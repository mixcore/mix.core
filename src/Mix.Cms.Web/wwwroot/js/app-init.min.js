'use strict';
var app = angular.module('MixPortal',
    ['ngRoute', 'ngFileUpload', 'LocalStorageModule','components']);
    var modules = angular.module('components', []);
app.config(function ($routeProvider, $locationProvider, $sceProvider) {
    $locationProvider.html5Mode(true);

    $routeProvider.when("/init", {
        controller: "Step1Controller",
        templateUrl: "/app/app-init/pages/step1/index.html"
    });

    $routeProvider.when("/init/step2", {
        controller: "Step2Controller",
        templateUrl: "/app/app-init/pages/step2/view.html"
    });
    $routeProvider.when("/init/step3", {
        controller: "Step3Controller",
        templateUrl: "/app/app-init/pages/step3/view.html"
    });
    $routeProvider.when("/init/step4", {
        controller: "Step4Controller",
        templateUrl: "/app/app-init/pages/step4/view.html"
    });
    $routeProvider.when("/init/step5", {
        controller: "Step5Controller",
        templateUrl: "/app/app-init/pages/step5/view.html"
    });
    $routeProvider.otherwise({
        redirectTo: "/init"
    });
});
"use strict";
app.controller("Step1Controller", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$timeout",
  "$location",
  "$http",
  "CommonService",
  "Step1Services",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $timeout,
    $location,
    $http,
    commonService,
    step1Services
  ) {
    var rand = Math.floor(Math.random() * 10000) + 1;
    $scope.settings = {
      providers: [
        {
          text: "MySQL Server",
          value: "MySQL",
          port: "3306",
          img: "/assets/img/mysql.jpg",
        },
        {
          text: "Microsoft SQL Server",
          value: "MSSQL",
          port: null,
          img: "/assets/img/mssql.jpg",
        },
        // { text: 'PostgreSQL Server', value: 'PostgreSQL', port: '5432', img: '/assets/img/mysql.jpg' }
      ],
      cultures: [],
    };
    $scope.loadSettings = async function () {
      step1Services.saveDefaultSettings();
      var getCultures = await commonService.loadJArrayData("cultures.json");
      if (getCultures.isSucceed) {
        $scope.settings.cultures = getCultures.data;
        $scope.initCmsModel.culture = $scope.settings.cultures[0];
        $scope.dbProvider = $scope.settings.providers[0];
        $scope.initCmsModel.databaseProvider = $scope.dbProvider.value;
        $scope.initCmsModel.databasePort = $scope.dbProvider.port;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (getCultures) {
          $rootScope.showErrors(getCultures.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.changeTypeDB = async function (type) {
      $scope.initCmsModel.isUseLocal = type;
    };
    $scope.initCmsModel = {
      isUseLocal: false,
      localDbConnectionString: "",
      sqliteDbConnectionString: "",
      localDbConnectionString:
        "Server=(localdb)\\MSSQLLocalDB;Initial Catalog=" +
        rand +
        "-mix-cms.db;Integrated Security=True;Persist Security Info=False;Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=True",
      sqliteDbConnectionString: "Data Source=" + rand + "-mix-cms",
      localDbName: rand + "-mix-cms",
      databaseServer: "",
      databasePort: "",
      databaseName: "",
      databaseUser: "",
      databasePassword: "",
      adminPassword: "",
      lang: "en-us",
      isMysql: false,
      databaseProvider: "",
      culture: $scope.settings.cultures[0],
    };

    $scope.updateLocalDbName = function () {
      $scope.initCmsModel.localDbName = $scope.initCmsModel.localDbName + ".db";
      $scope.initCmsModel.localDbConnectionString =
        "Server=(localdb)\\mssqllocaldb;Database=" +
        $scope.initCmsModel.localDbName +
        ";Trusted_Connection=True;MultipleActiveResultSets=true";
      $scope.initCmsModel.sqliteDbConnectionString =
        "Data Source=" + $scope.initCmsModel.localDbName;
    };
    $scope.updateDbProvider = function () {
      $scope.initCmsModel.databaseProvider = $scope.dbProvider.value;
      $scope.initCmsModel.databasePort = $scope.dbProvider.port;
    };
    $scope.initCms = async function () {
      $rootScope.isBusy = true;
      if ($scope.initCmsModel.siteName && $scope.initCmsModel.siteName != "") {
        var result = await step1Services.initCms($scope.initCmsModel);
        if (result.isSucceed) {
          $rootScope.isBusy = false;
          $rootScope.goToPath("/init/step2");
          $scope.$apply();
        } else {
          if (result) {
            $rootScope.showErrors(result.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      } else {
        $rootScope.showErrors(["Site name is required"]);
        $rootScope.isBusy = false;
      }
    };
  },
]);

'use strict';
app.factory('Step1Services', ['$http', '$rootScope', 'AppSettings', 'CommonService'
    , function ($http, $rootScope, appSettings, commonService) {

        var step1ServiceFactory = {};
        var _saveDefaultSettings = async function () {
            var req = {
                method: 'GET',
                url: '/portal/app-settings/save-default'
            };
            return commonService.getAnonymousApiResult(req);
        };
        
        var _initCms = async function (data) {
            var req = {
                method: 'POST',
                url: '/init/init-cms/step-1',
                data: JSON.stringify(data)
            };
            return await commonService.getAnonymousApiResult(req);
        };
        
        step1ServiceFactory.initCms = _initCms;
        step1ServiceFactory.saveDefaultSettings = _saveDefaultSettings;
        return step1ServiceFactory;

    }]);

'use strict';
app.controller('Step4Controller', ['$scope', '$rootScope',
    'CommonService', 'AuthService', 'Step4Services',
    function ($scope, $rootScope, commonService, authService, service) {
        var rand = Math.random();
        $scope.data = [];
        $scope.init = async function () {
            var getData = await commonService.loadJArrayData('languages.json');
            if (getData.isSucceed) {
                $scope.data = getData.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            } else {
                if (getData) {
                    $rootScope.showErrors(getData.errors);
                }
                $rootScope.isBusy = false;
                $scope.$apply();
            }

        };
        $scope.submit = async function () {
            $rootScope.isBusy = true;
            var result = await service.submit($scope.data);
            if (result.isSucceed) {
                authService.initSettings().then(function () {
                    $rootScope.isBusy = false;
                    window.top.location = '/';
                });

            }
            else {
                if (result) { $rootScope.showErrors(result.errors); }
                $rootScope.isBusy = false;
            }
        }
    }]);
'use strict';
app.factory('Step4Services', ['CommonService'
    , function (commonService) {

        var service = {};
        var _submit = async function (data) {
            var req = {
                method: 'POST',
                url: '/init/init-cms/step-4',
                data: JSON.stringify(data)
            };
            return await commonService.getApiResult(req);
        };
        service.submit = _submit;
        return service;

    }]);

'use strict';
app.controller('Step2Controller', 
    ['$scope', '$rootScope', '$location', 'Step2Services', 'AuthService',
    function ($scope, $rootScope, $location, services,authService) {
    $scope.user = {
        userName: '',
        email: '',
        password: '',
        confirmPassword: '',
        isAgreed: false
    }
    $scope.register = async function () {
        if (!$scope.user.isAgreed) {
            var ele = document.getElementById("notTNCYetChecked");
            ele.style.display= "block";
            // $rootScope.showMessage('Please agreed with our policy', 'warning');
        } else {
            if ($scope.password !== $scope.confirmPassword) {
                $rootScope.showErrors(['Confirm Password is not matched']);
            } else {
                $rootScope.isBusy = true;
                var result = await services.register($scope.user);
                if (result.isSucceed) {
                    var loginData = {
                        userName: $scope.user.userName,
                        password: $scope.user.password,
                        rememberMe: true
                    }
                    var result = await authService.login(loginData);
                    if (result.isSucceed) {
                        $rootScope.isBusy = false;
                        $rootScope.goToPath("/init/step3");
                        $scope.$apply();
                    }
                    else{
                        if (result) {
                            $rootScope.showErrors(result.errors);
                        }
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                } else {
                    if (result) {
                        $rootScope.showErrors(result.errors);
                    }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }
    }
    $scope.advanceSetup = async function () {
        if (!$scope.user.isAgreed) {
            var ele = document.getElementById("notTNCYetChecked");
            ele.style.display= "block";
            // $rootScope.showMessage('Please agreed with our policy', 'warning');
        } else {
            if ($scope.password !== $scope.confirmPassword) {
                $rootScope.showErrors(['Confirm Password is not matched']);
            } else {
                $rootScope.isBusy = true;
                var result = await services.register($scope.user);
                if (result.isSucceed) {
                    var loginData = {
                        userName: $scope.user.userName,
                        password: $scope.user.password,
                        rememberMe: true
                    }
                    var result = await authService.login(loginData);
                    if (result) {
                        $rootScope.isBusy = false;
                        // $location.url('/init/step3');
                        $scope.$apply();
                    }
                    else{
                        if (result) {
                            $rootScope.showErrors(result.errors);
                        }
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                } else {
                    if (result) {
                        $rootScope.showErrors(result.errors);
                    }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }
    }
}]);
'use strict';
app.factory('Step2Services', ['$http', 'CommonService', function ($http, commonService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var usersServiceFactory = {};
    var _register = async function (user) {
        var req = {
            method: 'POST',
            url: '/init/init-cms/step-2',
            data: JSON.stringify(user)
        };

        return await commonService.getApiResult(req);
    };

    usersServiceFactory.register = _register;
    return usersServiceFactory;

}]);

"use strict";
app.controller("Step3Controller", [
  "$scope",
  "$rootScope",
  "CommonService",
  "AuthService",
  "Step3Services",
  function ($scope, $rootScope, commonService, authService, service) {
    var rand = Math.random();
    $scope.data = {
      isCreateDefault: true,
      theme: null,
    };
    $scope.init = async function () {
      $(".preventUncheck").on("change", function (e) {
        if ($(".preventUncheck:checked").length == 0 && !this.checked)
          this.checked = true;
      });
      $(".option").click(function () {
        $(".option").removeClass("active");
        $(this).addClass("active");
      });
      // $("#theme-1").change(function () {
      //     $('.bg-register-image')[0].style.backgroundImage = "url('../assets/img/bgs/r_theme1.png')";
      // });
      // $("#theme-2").change(function () {
      //     $('.bg-register-image')[0].style.backgroundImage = "url('../assets/img/bgs/r_theme2.png')";
      // });
      // $("#theme-3").change(function () {
      //     $('.bg-register-image')[0].style.backgroundImage = "url('../assets/img/bgs/right-bg.png')";
      // });
      // $("input:checkbox").click(function () {
      //     if ($(this).is(":checked")) {
      //         var group = "input:checkbox[name='" + $(this).attr("name") + "']";
      //         $(group).prop("checked", false);
      //         $(this).prop("checked", true);
      //     } else {
      //         $(this).prop("checked", false);
      //     }
      // });
    };
    $scope.submit = async function () {
      $rootScope.isBusy = true;
      var form = document.getElementById("frm-theme");
      var frm = new FormData();
      var url = "/init/init-cms/step-3";

      $rootScope.isBusy = true;
      // Looping over all files and add it to FormData object
      frm.append("theme", form["theme"].files[0]);
      // Adding one more key to FormData object
      frm.append("model", angular.toJson($scope.data));

      var response = await service.ajaxSubmitForm(frm, url);
      if (response.isSucceed) {
        $scope.viewModel = response.data;
        authService.initSettings().then(function () {
          $rootScope.isBusy = false;
          $rootScope.goToSiteUrl("/portal");
          $scope.$apply();
        });
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

'use strict';
app.factory('Step3Services', ['CommonService'
    , function (commonService) {

        var service = {};
        var _submit = async function (data) {
            var req = {
                method: 'POST',
                url: '/init/init-cms/step-3',
                data: JSON.stringify(data)
            };
            return await commonService.getApiResult(req);
        };
        var _ajaxSubmitForm = async function (form, url) {            
            var req = {
                method: 'POST',
                url: url,
                headers: {'Content-Type': undefined},
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: form
            };
            return await commonService.getApiResult(req);            
        };
        service.submit = _submit;
        service.ajaxSubmitForm = _ajaxSubmitForm;
        return service;

    }]);

'use strict';
app.controller('Step5Controller', ['$scope', '$rootScope', '$location',
    'CommonService', 'Step5Services',
    function ($scope, $rootScope,$location, commonService, service) {
        var rand = Math.random();
        $scope.data = [];
        $scope.init = async function () {
            var getData = await commonService.loadJArrayData('configurations.json');
            if(getData.isSucceed){
                $scope.data = getData.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }else {
                if (getData) {
                    $rootScope.showErrors(getData.errors);
                }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
           
        };
        $scope.submit = async function () {
            $rootScope.isBusy = true;            
            var result = await service.submit($scope.data);
            if (result.isSucceed) {
                $rootScope.isBusy = false;
                window.top.location = "/";
            }
            else {
                if (result) { $rootScope.showErrors(result.errors); }
                $rootScope.isBusy = false;                
            }
        }
    }]);
'use strict';
app.factory('Step5Services', ['CommonService'
    , function (commonService) {

        //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

        var service = {};
        var _submit = async function (data) {
            var req = {
                method: 'POST',
                url: '/init/init-cms/step-5',
                data: JSON.stringify(data)
            };
            return await commonService.getApiResult(req);
        };
        service.submit = _submit;
        return service;

    }]);

modules.component('mssqlInfo', {
    templateUrl: '/app/app-init/pages/step1/components/mssql-info/view.html',
    controller: ['$rootScope',
        function ($rootScope) {
            var ctrl = this;
            
        }
    ],
    bindings: {
        initCmsModel: '='
    }
});
modules.component('mssqlLocalInfo', {
    templateUrl: '/app/app-init/pages/step1/components/mssql-local-info/view.html',
    controller: ['$rootScope',
        function ($rootScope) {
            var ctrl = this;
            
        }
    ],
    bindings: {
        initCmsModel: '='
    }
});
modules.component('mysqlInfo', {
    templateUrl: '/app/app-init/pages/step1/components/mysql-info/view.html',
    controller: ['$rootScope',
        function ($rootScope) {
            var ctrl = this;
        }
    ],
    bindings: {
        initCmsModel: '='
    }
});
modules.component('posgresqlInfo', {
    templateUrl: '/app/app-init/pages/step1/components/posgresql-info/view.html',
    controller: ['$rootScope',
        function ($rootScope) {
            var ctrl = this;
        }
    ],
    bindings: {
        initCmsModel: '='
    }
});

app.component('initCommonLanguages', {
    templateUrl: '/app/app-init/pages/step4/components/common-languages/view.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this; 
        ctrl.data = [];
        ctrl.$onInit = function(){
            ctrl.data = $rootScope.filterArray(ctrl.languages, ['category'], ['Common']);
        } 
    }],
    bindings: {
        languages: '=',
    }
});

app.component('initPortalLanguages', {
    templateUrl: '/app/app-init/pages/step4/components/portal-languages/view.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this; 
        ctrl.data = [];
        ctrl.$onInit = function(){
            ctrl.data = $rootScope.filterArray(ctrl.languages, ['category'], ['Portal']);
        } 
    }],
    bindings: {
        languages: '=',
    }
});

app.component('initFbConfigurations', {
    templateUrl: '/app/app-init/pages/step3/components/fb-configurations/view.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this; 
        ctrl.data = [];
        ctrl.$onInit = function(){
            ctrl.data = $rootScope.filterArray(ctrl.configurations, ['category'], ['Social_Facebook']);
        } 
    }],
    bindings: {
        configurations: '=',
    }
});

modules.component('initValueEditor', {
    templateUrl: '/app/app-init/pages/step3/components/init-value-editor/view.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings','FileService'
        , function ($rootScope, $scope, ngAppSettings, fileService) {
        var ctrl = this;
        ctrl.icons = ngAppSettings.icons;
        ctrl.mediaFile = {
            file: null,
            fullPath: '',
            fileFolder: 'content/site',
            title: '',
            description: ''
        };
        this.dataTypes = ngAppSettings.dataTypes;
        ctrl.initEditor = function () {
            ctrl.data.value = ctrl.data.default || null;
            setTimeout(function () {
                // Init Code editor
                $.each($('.code-editor'), function (i, e) {
                    var container = $(this);
                    var editor = ace.edit(e);
                    if (container.hasClass('json')) {
                        editor.session.setMode("ace/mode/json");
                    }
                    else {
                        editor.session.setMode("ace/mode/razor");
                    }
                    editor.setTheme("ace/theme/chrome");
                    //editor.setReadOnly(true);

                    editor.session.setUseWrapMode(true);
                    editor.setOptions({
                        maxLines: Infinity
                    });
                    editor.getSession().on('change', function (e) {
                        // e.type, etc
                        $(container).parent().find('.code-content').val(editor.getValue());
                    });
                })
                $.each($('.editor-content'), function (i, e) {
                    var $demoTextarea = $(e);
                    $demoTextarea.trumbowyg({
                        semantic: false
                    }).on('tbwblur', function () {
                        ctrl.data.value = $demoTextarea.val();
                    });
                });
            }, 200);
        };
        ctrl.selectFile = function (file, errFiles) {
            if (file !== undefined && file !== null) {
                ctrl.mediaFile.folder = ctrl.folder ? ctrl.folder : 'Media';
                ctrl.mediaFile.title = ctrl.title ? ctrl.title : '';
                ctrl.mediaFile.description = ctrl.description ? ctrl.description : '';
                ctrl.mediaFile.file = file;

                ctrl.uploadFile(file);
            }
        };
        ctrl.uploadFile = async function (file) {
            if (file !== null) {
                $rootScope.isBusy = true;
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = async function () {
                    ctrl.mediaFile.fileName = file.name.substring(0, file.name.lastIndexOf('.'));
                    ctrl.mediaFile.extension = file.name.substring(file.name.lastIndexOf('.'));
                    ctrl.mediaFile.fileStream = reader.result;
                    var resp = await fileService.save(ctrl.mediaFile);
                    if (resp && resp.isSucceed) {
                        ctrl.data.value = resp.data.webPath;
                        ctrl.srcUrl = resp.data.webPath;
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                    else {
                        if (resp) { $rootScope.showErrors(resp.errors); }
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                };
                reader.onerror = function (error) {

                };
            }
            else {
                return null;
            }

        }

    }
    ],
    bindings: {
        data: '=',
        inputClass: '=',
        isShowTitle: '=',
        title: '='
    }
});

app.component('initGgConfigurations', {
    templateUrl: '/app/app-init/pages/step3/components/gg-configurations/view.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this; 
        ctrl.data = [];
        ctrl.$onInit = function(){
            ctrl.data = $rootScope.filterArray(ctrl.configurations, ['category'], ['Social_Google']);
        } 
    }],
    bindings: {
        configurations: '=',
    }
});

app.component('initSiteConfigurations', {
    templateUrl: '/app/app-init/pages/step3/components/site-configurations/view.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this; 
        ctrl.data = [];
        ctrl.$onInit = function(){
            ctrl.data = $rootScope.filterArray(ctrl.configurations, ['category'], ['Site_Common']);
        } 
    }],
    bindings: {
        configurations: '=',
    }
});

app.component('initSysConfigurations', {
    templateUrl: '/app/app-init/pages/step3/components/site-configurations/view.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this; 
        ctrl.data = [];
        ctrl.$onInit = function(){
            ctrl.data = $rootScope.filterArray(ctrl.configurations, ['category'], ['System']);
        };
    }],
    bindings: {
        configurations: '=',
    }
});