"use strict";

var app = angular.module("MixClient", [
  "ngRoute",
  "LocalStorageModule",
  "components",
  "ngFileUpload",
  "angularCroppie",
  "ui.bootstrap",
  "cart",
  "ngSanitize",
  "MixShared",
]);

var serviceBase = "";
var modules = angular.module("components", []);
var cart = angular.module("cart", []);

// This is the "Offline page" service worker
// Add this below content to your HTML page, or add the js file to your page at the very top to register service worker
// Check compatibility for the browser we're running this in
// if ("serviceWorker" in navigator) {
//     if (navigator.serviceWorker.controller) {
//         console.log("[PWA Builder] active service worker found, no need to register");
//     } else {
//         // Register the service worker
//         navigator.serviceWorker
//             .register("service-worker.js", {
//                 scope: "./"
//             })
//             .then(function (reg) {
//                 console.log("[PWA Builder] Service worker has been registered for scope: " + reg.scope);
//             });
//     }
// }

(function (angular) {
  "use strict";
  app.controller("AppClientController", [
    "$rootScope",
    "$scope",
    "$location",
    "AppSettingsService",
    "ApiService",
    "AuthService",
    "localStorageService",
    "RestMixDatabaseDataClientService",
    function (
      $rootScope,
      $scope,
      $location,
      appSettingsService,
      apiService,
      authService,
      localStorageService,
      mixDatabaseDataService
    ) {
      $scope.lang = "";
      $scope.isInit = false;
      $scope.isLoaded = false;
      $rootScope.user = null;
      $scope.mediaFile = {
        file: null,
        fullPath: "",
        folder: "module-data",
        title: "",
        description: "",
      };
      $scope.cartData = {
        items: [],
        totalItem: 0,
        total: 0,
      };
      $rootScope.globalSettingsService = appSettingsService;
      $scope.changeLang = $rootScope.changeLang;
      $scope.init = function (lang) {
        angular.element(document).ready(function () {
          setTimeout(() => {
            if ($location.hash()) {
              $scope.gotoElement($location.hash());
            }
          }, 100);
        });

        mixDatabaseDataService.init(
          mixDatabaseDataService.modelName,
          false,
          lang
        );
        if (!$rootScope.isBusy) {
          $rootScope.isBusy = true;
          // appSettingsService.fillAppSettings().then(function (response) {
          $scope.cartData = localStorageService.get("shoppingCart");
          if (!$scope.cartData) {
            $scope.cartData = {
              items: [],
              totalItem: 0,
              total: 0,
            };
            localStorageService.set("shoppingCart", $scope.cartData);
          }
          apiService.getAllSettings(lang).then(function (response) {
            if ($rootScope.globalSettings) {
              authService.fillAuthData().then(function (response) {
                $rootScope.authentication = authService.authentication;
                $scope.isInit = true;
                $rootScope.isInit = true;
                $rootScope.isBusy = false;
                $scope.$apply();
              });
            } else {
              $scope.isInit = true;
              $rootScope.isInit = true;
              $rootScope.isBusy = false;
            }
          });

          // });
        }
      };

      $scope.translate = $rootScope.translate;
      $scope.gotoElement = function (eID) {
        // call $anchorScroll()
        if (!document.getElementById(eID)) {
          window.location = `/#${eID}`;
        }
        $scope.scrollTo(eID);
      };

      $scope.scrollTo = function (eID) {
        // This scrolling function
        // is from http://www.itnewb.com/tutorial/Creating-the-Smooth-Scroll-Effect-with-JavaScript

        var startY = currentYPosition();
        var stopY = elmYPosition(eID);
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
          scrollTo(0, stopY);
          return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
          for (var i = startY; i < stopY; i += step) {
            setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed);
            leapY += step;
            if (leapY > stopY) leapY = stopY;
            timer++;
          }
          return;
        }
        for (var i = startY; i > stopY; i -= step) {
          setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed);
          leapY -= step;
          if (leapY < stopY) leapY = stopY;
          timer++;
        }

        function currentYPosition() {
          // Firefox, Chrome, Opera, Safari
          if (self.pageYOffset) return self.pageYOffset;
          // Internet Explorer 6 - standards mode
          if (document.documentElement && document.documentElement.scrollTop)
            return document.documentElement.scrollTop;
          // Internet Explorer 6, 7 and 8
          if (document.body.scrollTop) return document.body.scrollTop;
          return 0;
        }

        function elmYPosition(eID) {
          var elm = document.getElementById(eID);
          var y = elm.offsetTop;
          var node = elm;
          while (node.offsetParent && node.offsetParent != document.body) {
            node = node.offsetParent;
            y += node.offsetTop;
          }
          return y;
        }
      };

      var getWindowOptions = function () {
        var width = 500;
        var height = 350;
        var left = window.innerWidth / 2 - width / 2;
        var top = window.innerHeight / 2 - height / 2;

        return [
          "resizable,scrollbars,status",
          "height=" + height,
          "width=" + width,
          "left=" + left,
          "top=" + top,
        ].join();
      };
    },
  ]);
})(window.angular);

modules.component("fbCustomerChat", {
  templateUrl:
    "/mix-app/views/app-client/components/fb-customer-chat/view.html",
  controller: [
    "$location",
    function ($location) {
      var ctrl = this;
      this.$onInit = function () {
        setTimeout(() => {
          FB.XFBML.parse();
        }, 200);
      };
    },
  ],
  bindings: {
    fbPageId: "=",
    themeColor: "=",
    inGreeting: "=",
    outGreeting: "=",
  },
});

modules.component("booking", {
  templateUrl: "/mix-app/views/app-client/components/booking/index.html",
  controller: [
    "$rootScope",
    "ApiService",
    "CommonService",
    function ($rootScope, apiService, commonService) {
      var ctrl = this;
      ctrl.submitted = false;
      ctrl.isShow = false;
      ctrl.order = {
        name: "",
        propertyId: "",
        price: "",
        quantity: 1,
      };
      ctrl.edm =
        'Url: <a href="[url]">View Tour</a> <br/>Name: [name] <br/>' +
        "Phone: [phone]<br/>" +
        "Email: [email]<br/>" +
        "Quantity: [quantity]<br/>" +
        "Message: [message] <br/>" +
        "property: [property] <br/>Price: [price] <br/>";
      ctrl.init = function () {
        if (!$rootScope.isInit) {
          setTimeout(function () {
            ctrl.init();
          }, 500);
        } else {
          ctrl.order.propertyId = ctrl.propertyId;
          ctrl.order.price = ctrl.price;
          ctrl.order.quantity = ctrl.quantity;
        }
      };
      ctrl.book = function () {
        ctrl.edm = ctrl.edm.replace(/\[url\]/g, window.top.location.href);
        ctrl.edm = ctrl.edm.replace(/\[name\]/g, ctrl.order.name);
        ctrl.edm = ctrl.edm.replace(/\[phone\]/g, ctrl.order.phone);
        ctrl.edm = ctrl.edm.replace(/\[email\]/g, ctrl.order.email);
        ctrl.edm = ctrl.edm.replace(/\[message\]/g, ctrl.order.message);
        ctrl.edm = ctrl.edm.replace(/\[property\]/g, ctrl.order.propertyId);
        ctrl.edm = ctrl.edm.replace(/\[price\]/g, ctrl.order.price);
        ctrl.edm = ctrl.edm.replace(/\[quantity\]/g, ctrl.order.quantity);

        commonService.sendMail("Booking - " + ctrl.propertyName, ctrl.edm);
        ctrl.submitted = true;
      };
    },
  ],
  bindings: {
    propertyId: "=",
    propertyName: "=",
    price: "=",
    quantity: "=",
  },
});

modules.component("addToCartButton", {
  templateUrl:
    "/mix-app/views/app-client/components/add-to-cart-button/view.html",
  bindings: {
    cartData: "=",
    propertyId: "=",
    title: "=",
    imageUrl: "=",
    price: "=",
    quantity: "=?",
  },
  controller: "AddToCartController",
});
modules.controller("AddToCartController", [
  "$rootScope",
  "$scope",
  "localStorageService",
  function ($rootScope, $scope, localStorageService) {
    $scope.init = function () {
      $scope.quantity = $scope.quantity || 1;
    };
    $scope.addToCart = function () {
      var current = $rootScope.findObjectByKey(
        $scope.cartData.items,
        "propertyId",
        $scope.propertyId
      );
      if (current) {
        current.quantity += parseInt($scope.quantity);
      } else {
        var item = {
          propertyId: $scope.propertyId,
          title: $scope.title,
          imageUrl: $scope.imageUrl,
          price: $scope.price,
          quantity: parseInt($scope.quantity) || 1,
        };
        $scope.cartData.items.push(item);
        $scope.cartData.totalItem += 1;
      }
      $scope.cartData.total += parseInt($scope.price);
      localStorageService.set("shoppingCart", $scope.cartData);
    };
  },
]);

modules.component("fbLike", {
  templateUrl: "/mix-app/views/app-client/components/fb-like/fb-like.html",
  controller: [
    "$location",
    function ($location) {
      var ctrl = this;
      ctrl.href = ctrl.href || window.top.location.href;
      ctrl.layout = ctrl.layout || "standard";
      ctrl.size = ctrl.size || "small";
      ctrl.showFaces = ctrl.showFaces || true;
      this.$onInit = function () {
        setTimeout(() => {
          FB.XFBML.parse();
        }, 200);
      };
    },
  ],
  bindings: {
    href: "=",
    layout: "=",
    size: "=",
    showFaces: "=",
  },
});

modules.component("fbSend", {
  templateUrl: "/mix-app/views/app-client/components/fb-send/fb-send.html",
  controller: [
    "$location",
    function ($location) {
      var ctrl = this;
      ctrl.href = ctrl.href || window.top.location.href;
      ctrl.send = function () {
        var link = ctrl.href || window.top.location.href;
        FB.ui(
          {
            method: "send",
            link: link,
          },
          function (response) {}
        );
      };
    },
  ],
  bindings: {
    href: "=",
    appId: "=",
  },
});

modules.component("fbShare", {
  templateUrl: "/mix-app/views/app-client/components/fb-share/fb-share.html",
  controller: [
    "$location",
    function ($location) {
      var ctrl = this;
      ctrl.href = ctrl.href || window.top.location.href;
      ctrl.share = function () {
        var href = window.top.location.href;
        FB.ui(
          {
            method: "share",
            href: href,
          },
          function (response) {}
        );
      };
    },
  ],
  bindings: {
    href: "=",
  },
});

modules.component("mixMessagesHubClient", {
  templateUrl:
    "/mix-app/views/app-client/components/mix-messages-hub-client/view.html",
  bindings: {
    mixDatabaseName: "=",
    isSave: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "RestMixDatabaseColumnPortalService",
    "RestMixDatabaseDataClientService",
    function ($rootScope, $scope, columnService, service) {
      var ctrl = this;
      BaseHub.call(this, ctrl);
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.user = {
        loggedIn: false,
        connection: {},
      };
      ctrl.mixDatabaseData = null;
      ctrl.isHide = true;
      ctrl.hideContact = true;
      ctrl.columns = [];
      ctrl.members = [];
      ctrl.errors = [];
      ctrl.messages = {
        items: [],
      };
      ctrl.message = { connection: {}, content: "" };
      ctrl.request = {
        uid: "",
        specificulture: "",
        action: "",
        objectType: null,
        data: {},
        room: "",
        isMyself: true,
        isSave: false,
      };
      ctrl.init = function () {
        ctrl.mixDatabaseId = ctrl.mixDatabaseId || 0;
        ctrl.request.specificulture = service.lang;
        ctrl.request.room = ctrl.mixDatabaseName;
        ctrl.request.isSave = ctrl.isSave || false;
        ctrl.startConnection("serviceHub", ctrl.checkLoginStatus);
      };
      ctrl.loadData = async function () {
        /*
                    If input is data id => load ctrl.mixDatabaseData from service and handle it independently
                    Else modify input ctrl.mixDatabaseData
                */
        $rootScope.isBusy = true;
        var getDefault = await service.initData(ctrl.mixDatabaseName);
        if (getDefault.success) {
          ctrl.defaultData = getDefault.data;
          ctrl.defaultData.data.user_name = ctrl.user.connection.name;
          ctrl.defaultData.data.user_id = ctrl.user.connection.id;
          ctrl.defaultData.data.user_avatar = ctrl.user.connection.avatar;
          ctrl.defaultData.data.data_type = 9;
          ctrl.defaultData.column = {
            dataType: "Text",
            title: "Message",
            name: "message",
          };
          ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
          $rootScope.isBusy = false;
        }
        var getFields = await columnService.initData(ctrl.mixDatabaseName);
        if (getFields.success) {
          ctrl.columns = getFields.data;
          ctrl.msgField = $rootScope.findObjectByKey(
            ctrl.columns,
            "name",
            "message"
          );
        }
      };
      ctrl.submit = async function () {
        if (ctrl.validate()) {
          ctrl.request.action = "send_group_message";
          ctrl.request.uid = ctrl.user.connection.id;
          ctrl.request.data = ctrl.mixDatabaseData.data;
          ctrl.request.connection = ctrl.user.connection;
          ctrl.connection.invoke("HandleRequest", JSON.stringify(ctrl.request));
          ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
        }
      };
      ctrl.validate = function () {
        var isValid = true;
        ctrl.errors = [];
        angular.forEach(ctrl.columns, function (column) {
          if (column.regex) {
            var regex = RegExp(column.regex, "g");
            isValid = regex.test(ctrl.mixDatabaseData.data[column.name]);
            if (!isValid) {
              if (column.name == "message") {
                ctrl.errors.push("Please don't use bad words in your message");
              } else {
                ctrl.errors.push(`${column.name} is not match Regex`);
              }
            }
          }
          if (isValid && column.isEncrypt) {
            ctrl.mixDatabaseData.data[column.name] = $rootScope.encrypt(
              ctrl.mixDatabaseData.data[column.name]
            );
          }
        });
        return isValid;
      };
      ctrl.receiveMessage = function (msg) {
        switch (msg.responseKey) {
          case "NewMember":
            ctrl.newMember(msg.data);
            // $('.widget-conversation').scrollTop = $('.widget-conversation')[0].scrollHeight;
            break;
          case "NewMessage":
            ctrl.newMessage(msg.data);
            break;
          case "ConnectSuccess":
            ctrl.user.loggedIn = true;
            ctrl.initListMember(msg.data);
            $scope.$apply();
            break;
          case "PreviousMessages":
            msg.data.items.forEach((element) => {
              element.msgField = angular.copy(ctrl.msgField);
              element.msgField.dataType = element.data.data_type;
            });
            ctrl.messages = msg.data;
            $scope.$apply();
            break;
          case "MemberOffline":
            ctrl.removeMember(msg.data);
            break;
          case "Error":
            console.error(msg.data);
            break;
        }
      };
      ctrl.newMessage = function (msg) {
        msg.msgField = angular.copy(ctrl.msgField);
        ctrl.messages.items.push(msg);
        $scope.$apply();
      };
      ctrl.newMember = function (member) {
        var m = $rootScope.findObjectByKey(ctrl.members, "id", member.id);
        if (!m) {
          ctrl.members.push(member);
        }
        $scope.$apply();
      };
      ctrl.join = async function () {
        ctrl.request.action = "join_group";
        ctrl.request.uid = ctrl.user.connection.id;
        ctrl.request.data = ctrl.user.connection;
        ctrl.message.connection = ctrl.user.connection;
        ctrl.connection.invoke("HandleRequest", JSON.stringify(ctrl.request));
        await ctrl.loadData();
        $scope.$apply();
      };
      ctrl.initListMember = function (data) {
        data.forEach((member) => {
          var index = ctrl.members.findIndex((x) => x.id === member.id);
          if (index < 0) {
            ctrl.members.splice(0, 0, member);
          }
        });

        $scope.$apply();
      };
      ctrl.updateDataType = function () {
        ctrl.mixDatabaseData.data.data_type = ctrl.msgField.dataType;
      };
      ctrl.checkLoginStatus = function () {
        FB.getLoginStatus(function (response) {
          if (response.status === "connected") {
            // The user is logged in and has authenticated your
            // app, and response.authResponse supplies
            // the user's ID, a valid access token, a signed
            // request, and the time the access token
            // and signed request each expire.
            FB.api("/me", function (response) {
              ctrl.user.connection.name = response.name;
              ctrl.user.connection.id = response.id;
              ctrl.user.connection.connectionId = ctrl.connection.connectionId;
              ctrl.user.connection.avatar =
                "//graph.facebook.com/" +
                response.id +
                "/picture?width=32&height=32";
              ctrl.user.loggedIn = true;
              ctrl.join();
            });
          } else if (response.status === "authorization_expired") {
            // The user has signed into your application with
            // Facebook Login but must go through the login flow
            // again to renew data authorization. You might remind
            // the user they've used Facebook, or hide other options
            // to avoid duplicate account creation, but you should
            // collect a user gesture (e.g. click/touch) to launch the
            // login dialog so popup blocking is not triggered.
          } else if (response.status === "not_authorized") {
            // The user hasn't authorized your application.  They
            // must click the Login button, or you must call FB.login
            // in response to a user gesture, to launch a login dialog.
          } else {
            // The user isn't logged in to Facebook. You can launch a
            // login dialog with a user gesture, but the user may have
            // to log in to Facebook before authorizing your application.
          }
        });
      };
      ctrl.logout = function () {
        FB.logout(function (response) {
          // user is now logged out
          ctrl.user.loggedIn = false;
        });
      };
      ctrl.login = function () {
        FB.login(function (response) {
          if (response.authResponse) {
            FB.api("/me", function (response) {
              ctrl.user.connection.name = response.name;
              ctrl.user.connection.id = response.id;
              ctrl.user.connection.connectionId = ctrl.connection.connectionId;
              ctrl.user.connection.avatar =
                "//graph.facebook.com/" +
                response.id +
                "/picture?width=32&height=32";
              ctrl.user.loggedIn = true;
              ctrl.join();
              $scope.$apply();
            });
          } else {
            console.log("User cancelled login or did not fully authorize.");
          }
        });
      };
    },
  ],
});

modules.component("serviceHubClient", {
  templateUrl:
    "/mix-app/views/app-client/components/service-hub-client/view.html",
  bindings: {
    mixDatabaseName: "=",
    isSave: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "RestMixDatabaseColumnPortalService",
    "RestMixDatabaseDataClientService",
    function ($rootScope, $scope, columnService, service) {
      var ctrl = this;
      BaseHub.call(this, ctrl);
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.user = {
        loggedIn: false,
        connection: {},
      };
      ctrl.mixDatabaseData = null;
      ctrl.isHide = true;
      ctrl.hideContact = true;
      ctrl.columns = [];
      ctrl.members = [];
      ctrl.errors = [];
      ctrl.messages = {
        items: [],
      };
      ctrl.message = { connection: {}, content: "" };
      ctrl.request = {
        uid: "",
        specificulture: "",
        action: "",
        objectType: null,
        data: {},
        room: "",
        isMyself: true,
        isSave: false,
      };
      ctrl.init = function () {
        ctrl.mixDatabaseId = ctrl.mixDatabaseId || 0;
        ctrl.request.specificulture = service.lang;
        ctrl.request.room = ctrl.mixDatabaseName;
        ctrl.request.isSave = ctrl.isSave == "true" || false;
        ctrl.startConnection("serviceHub", ctrl.checkLoginStatus);
      };
      ctrl.loadData = async function () {
        /*
                    If input is data id => load ctrl.mixDatabaseData from service and handle it independently
                    Else modify input ctrl.mixDatabaseData
                */
        $rootScope.isBusy = true;
        var getDefault = await service.initData(ctrl.mixDatabaseName);
        if (getDefault.success) {
          ctrl.defaultData = getDefault.data;
          ctrl.defaultData.data.user_name = ctrl.user.connection.name;
          ctrl.defaultData.data.user_id = ctrl.user.connection.id;
          ctrl.defaultData.data.user_avatar = ctrl.user.connection.avatar;
          ctrl.defaultData.data.data_type = 9;
          ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
          $rootScope.isBusy = false;
        }
        var getFields = await columnService.initData(ctrl.mixDatabaseName);
        if (getFields.success) {
          ctrl.columns = getFields.data;
        }
      };
      ctrl.submit = async function () {
        if (ctrl.validate()) {
          ctrl.request.action = "send_group_message";
          ctrl.request.uid = ctrl.user.connection.id;
          ctrl.request.data = ctrl.mixDatabaseData.data;
          ctrl.request.connection = ctrl.user.connection;
          ctrl.connection.invoke("HandleRequest", JSON.stringify(ctrl.request));
          ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
        }
      };
      ctrl.validate = function () {
        var isValid = true;
        ctrl.errors = [];
        angular.forEach(ctrl.columns, function (column) {
          if (column.regex) {
            var regex = RegExp(column.regex, "g");
            isValid = regex.test(ctrl.mixDatabaseData.data[column.name]);
            if (!isValid) {
              ctrl.errors.push(`${column.name} is not match Regex`);
            }
          }
          if (isValid && column.isEncrypt) {
            ctrl.mixDatabaseData.data[column.name] = $rootScope.encrypt(
              ctrl.mixDatabaseData.data[column.name]
            );
          }
        });
        return isValid;
      };
      ctrl.receiveMessage = function (msg) {
        switch (msg.responseKey) {
          case "NewMember":
            ctrl.newMember(msg.data);
            // $('.widget-conversation').scrollTop = $('.widget-conversation')[0].scrollHeight;
            break;
          case "NewMessage":
            ctrl.newMessage(msg.data);
            break;
          case "ConnectSuccess":
            ctrl.user.loggedIn = true;
            ctrl.initListMember(msg.data);
            $scope.$apply();
            break;
          case "PreviousMessages":
            ctrl.messages = msg.data;
            $scope.$apply();
            break;
          case "MemberOffline":
            ctrl.removeMember(msg.data);
            break;
          case "Error":
            console.error(msg.data);
            break;
        }
      };
      ctrl.newMessage = function (msg) {
        ctrl.messages.items.push(msg);
        $scope.$apply();
      };
      ctrl.newMember = function (member) {
        var m = $rootScope.findObjectByKey(ctrl.members, "id", member.id);
        if (!m) {
          ctrl.members.push(member);
        }
        $scope.$apply();
      };
      ctrl.join = async function () {
        ctrl.request.action = "join_group";
        ctrl.request.uid = ctrl.user.connection.id;
        ctrl.request.data = ctrl.user.connection;
        ctrl.message.connection = ctrl.user.connection;
        ctrl.connection.invoke("HandleRequest", JSON.stringify(ctrl.request));
        await ctrl.loadData();
        $scope.$apply();
      };
      ctrl.initListMember = function (data) {
        data.forEach((member) => {
          var index = ctrl.members.findIndex((x) => x.id === member.id);
          if (index < 0) {
            ctrl.members.splice(0, 0, member);
          }
        });

        $scope.$apply();
      };

      ctrl.checkLoginStatus = function () {
        FB.getLoginStatus(function (response) {
          if (response.status === "connected") {
            // The user is logged in and has authenticated your
            // app, and response.authResponse supplies
            // the user's ID, a valid access token, a signed
            // request, and the time the access token
            // and signed request each expire.
            FB.api("/me", function (response) {
              ctrl.user.connection.name = response.name;
              ctrl.user.connection.id = response.id;
              ctrl.user.connection.connectionId = ctrl.connection.connectionId;
              ctrl.user.connection.avatar =
                "//graph.facebook.com/" +
                response.id +
                "/picture?width=32&height=32";
              ctrl.user.loggedIn = true;
              ctrl.join();
            });
          } else if (response.status === "authorization_expired") {
            // The user has signed into your application with
            // Facebook Login but must go through the login flow
            // again to renew data authorization. You might remind
            // the user they've used Facebook, or hide other options
            // to avoid duplicate account creation, but you should
            // collect a user gesture (e.g. click/touch) to launch the
            // login dialog so popup blocking is not triggered.
          } else if (response.status === "not_authorized") {
            // The user hasn't authorized your application.  They
            // must click the Login button, or you must call FB.login
            // in response to a user gesture, to launch a login dialog.
          } else {
            // The user isn't logged in to Facebook. You can launch a
            // login dialog with a user gesture, but the user may have
            // to log in to Facebook before authorizing your application.
          }
        });
      };
      ctrl.logout = function () {
        FB.logout(function (response) {
          // user is now logged out
          ctrl.user.loggedIn = false;
        });
      };
      ctrl.login = function () {
        FB.login(function (response) {
          if (response.authResponse) {
            FB.api("/me", function (response) {
              ctrl.user.connection.name = response.name;
              ctrl.user.connection.id = response.id;
              ctrl.user.connection.connectionId = ctrl.connection.connectionId;
              ctrl.user.connection.avatar =
                "//graph.facebook.com/" +
                response.id +
                "/picture?width=32&height=32";
              ctrl.user.loggedIn = true;
              ctrl.join();
              $scope.$apply();
            });
          } else {
            console.log("User cancelled login or did not fully authorize.");
          }
        });
      };
    },
  ],
});

modules.component("haiyenLoader", {
  templateUrl: "/mix-app/views/app-client/components/customs/loader/view.html",
  controller: [
    "$scope",
    "$location",
    function ($scope, $location) {
      var ctrl = this;
      ctrl.imageDataArray = [];
      ctrl.canvasCount = 10;
      ctrl.duration = 500;
      ctrl.bgDuration = 2500;
      ctrl.canvas = null;
      ctrl.isLoaded = false;
      ctrl.init = function () {
        setTimeout(() => {
          $scope.$apply((ctrl.isLoaded = true));
        }, 500);
      };
    },
  ],

  bindings: {},
});

modules.component("tclLogin", {
  binding: {
    user: "=",
  },
  templateUrl: "/mix-app/views/app-client/components/customs/login/view.html",
  controller: [
    "$scope",
    "$rootScope",
    "RestMixDatabaseDataClientService",
    function ($scope, $rootScope, service) {
      var ctrl = this;
      ctrl.loginData = {
        username: "",
        password: "",
        pageSize: 1,
        pageIndex: 0,
        mixDatabaseName: "tcl_user",
        filterType: "equal",
      };
      ctrl.$onInit = async function () {};
      ctrl.isBusy = false;
      ctrl.translate = $rootScope.translate;
      ctrl.submit = async function () {
        $rootScope.isBusy = true;
        var result = await service.getList(ctrl.loginData);
        if (result.success) {
          if (result.data.totalItems > 0) {
            if (
              result.data.items[0].obj.password == ctrl.loginData.password &&
              result.data.items[0].obj.username == ctrl.loginData.username
            ) {
              ctrl.onSuccess(result);
            } else {
              ctrl.onFail(result);
            }
          } else {
            ctrl.onFail(result);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          ctrl.onFail(result);
          ctrl.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.onSuccess = function (result) {
        $rootScope.isLogin = true;
        ctrl.user = result.data.items[0];
        $rootScope.user = result.data.items[0];
        $scope.$apply();
      };

      ctrl.onFail = function (result) {
        ctrl.msg = {
          color: "red",
          text: "Sai tên đăng nhập hoặc mật khẩu!",
        };
      };
    },
  ],
});

modules.component("haiyenSubscriber", {
  binding: {},
  templateUrl:
    "/mix-app/views/app-client/components/customs/subscriber/view.html",
  controller: [
    "$scope",
    "$rootScope",
    "RestMixDatabaseDataClientService",
    function ($scope, $rootScope, service) {
      var ctrl = this;
      ctrl.subscriber = null;
      ctrl.formName = "subscribers";
      ctrl.$onInit = async function () {
        var initData = await service.initData(ctrl.formName);
        if (initData.success) {
          ctrl.default = initData.data;
          ctrl.subscriber = angular.copy(ctrl.default);
          $scope.$apply();
        }
      };
      ctrl.isBusy = false;
      ctrl.submit = async function () {
        ctrl.isBusy = true;
        var result = await service.save(ctrl.subscriber);
        if (result.success) {
          ctrl.onSuccess(result);
          ctrl.subscriber = angular.copy(ctrl.default);
          ctrl.isBusy = false;
        } else {
          ctrl.onFail(result);
          ctrl.isBusy = false;
        }
        $scope.$apply();
      };
      ctrl.onSuccess = function (result) {
        ctrl.msg = {
          color: "green",
          text: "Cám ơn bạn đã đăng ký thành công!",
        };
      };

      ctrl.onFail = function (result) {
        ctrl.msg = {
          color: "red",
          text: result.errors[0],
        };
      };
    },
  ],
});

app.controller("UserController", [
  "$rootScope",
  "$scope",
  "AuthService",
  "UserService",
  function ($rootScope, $scope, authService, userService) {
    $scope.loginData = {
      username: "",
      password: "",
      rememberme: true,
    };
    $scope.user = {
      firstName: "",
      lastName: "",
      username: "",
      email: "",
      password: "",
      userData: {},
    };
    $scope.init = function () {
      authService.fillAuthData().then((resp) => {
        if (authService.authentication.info) {
          $scope.user = authService.authentication.info;
          $scope.showLogin = false;
          $scope.userData = authService.authentication.info;
        } else {
          $scope.showLogin = true;
        }
      });
    };
    $scope.logout = function () {
      authService.logOut();
      window.top.location = window.top.location;
    };
    $scope.login = async function () {
      var result = await authService.login($scope.loginData);
      if (result.success) {
        $rootScope.executeFunctionByName("loginSuccess", [result.data]);
      } else {
        $rootScope.executeFunctionByName("loginFail", [result.errors]);
      }
    };

    $scope.save = async function () {
      $rootScope.isBusy = true;
      var resp = null;
      if (!$scope.user.id) {
        resp = await userService.register($scope.user);
      } else {
        resp = await userService.saveUser($scope.user);
      }
      if (resp && resp.success) {
        $scope.user = resp.data;
        authService
          .refreshToken(
            authService.authentication.refreshToken,
            authService.authentication.accessToken
          )
          .then(() => {
            $rootScope.executeFunctionByName("saveUserSuccess", [resp.Data]);
          });
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.executeFunctionByName("saveUserFail", [resp.errors]);
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.getMyProfile = async function () {
      $rootScope.isBusy = true;
      var response = await userService.getMyProfile();
      if (response.success) {
        $scope.user = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

window.loginSuccess = function (data) {
  window.top.location = window.top.location;
};
window.loginFail = function (errors) {
  console.error(errors);
};
window.saveUserSuccess = function (data) {
  window.top.location = window.top.location;
};
window.saveUserFail = function (errors) {
  console.error(errors);
};

"use strict";
app.factory("RestNavigationService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = angular.copy(baseService);
    serviceFactory.init("mix-database-data/navigation");
    var _initData = async function (mixDatabaseName) {
      var url = this.prefixUrl + "/init/" + mixDatabaseName;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    var _export = async function (objData) {
      var data = serviceFactory.parseQuery(objData);
      var url = this.prefixUrl;

      if (data) {
        url += "/export?";
        url = url.concat(data);
      }
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    serviceFactory.initData = _initData;
    serviceFactory.export = _export;
    return serviceFactory;
  },
]);

"use strict";
app.factory("UserService", [
  "ApiService",
  function (apiService) {
    var usersServiceFactory = {};

    var _getMyProfile = async function () {
      var apiUrl = "/rest/auth/user";
      var url = apiUrl + "my-profile";
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.getApiResult(req);
    };

    var _saveUser = async function (user) {
      var apiUrl = "/rest/auth/save";
      var req = {
        method: "POST",
        url: apiUrl,
        data: JSON.stringify(user),
      };
      return await apiService.getApiResult(req);
    };

    var _register = async function (user) {
      var apiUrl = "/rest/auth/";
      var req = {
        method: "POST",
        url: apiUrl + "register",
        data: JSON.stringify(user),
      };
      return await apiService.getApiResult(req);
    };

    usersServiceFactory.getMyProfile = _getMyProfile;
    usersServiceFactory.saveUser = _saveUser;
    usersServiceFactory.register = _register;
    return usersServiceFactory;
  },
]);
