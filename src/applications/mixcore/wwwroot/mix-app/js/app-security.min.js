"use strict";
var app = angular.module("MixSecurity", [
  "ui.bootstrap",
  "ngRoute",
  "ngFileUpload",
  "LocalStorageModule",
  "components",
  "MixShared",
]);
var modules = angular.module("components", []);

(function (d, s, id) {
  var js,
    fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) {
    return;
  }
  js = d.createElement(s);
  js.id = id;
  js.src = "https://connect.facebook.net/en_US/sdk.js";
  fjs.parentNode.insertBefore(js, fjs);
})(document, "script", "facebook-jssdk");

window.fbAsyncInit = function () {
  FB.init({
    appId: "1958592154434745",
    cookie: true,
    xfbml: true,
    version: "v10.0",
  });

  FB.AppEvents.logPageView();
};

particlesJS("particles-js", {
  particles: {
    number: {
      value: 50,
      density: {
        enable: true,
        value_area: 800,
      },
    },
    color: {
      value: "#ffffff",
    },
    shape: {
      type: "circle",
      stroke: {
        width: 0,
        color: "#000000",
      },
      polygon: {
        nb_sides: 5,
      },
      image: {
        src: "img/github.svg",
        width: 100,
        height: 100,
      },
    },
    opacity: {
      value: 0.2,
      random: false,
      anim: {
        enable: false,
        speed: 1,
        opacity_min: 0.1,
        sync: false,
      },
    },
    size: {
      value: 3,
      random: true,
      anim: {
        enable: false,
        speed: 40,
        size_min: 0.1,
        sync: false,
      },
    },
    line_linked: {
      enable: true,
      distance: 150,
      color: "#ffffff",
      opacity: 0.2,
      width: 1,
    },
    move: {
      enable: true,
      speed: 3,
      direction: "none",
      random: false,
      straight: false,
      out_mode: "out",
      bounce: false,
      attract: {
        enable: false,
        rotateX: 600,
        rotateY: 1200,
      },
    },
  },
  interactivity: {
    detect_on: "window",
    events: {
      onhover: {
        enable: true,
        mode: "grab",
      },
      onclick: {
        enable: true,
        mode: "push",
      },
      resize: true,
    },
    modes: {
      grab: {
        distance: 200,
        line_linked: {
          opacity: 0.2,
        },
      },
      bubble: {
        distance: 400,
        size: 40,
        duration: 2,
        opacity: 8,
        speed: 3,
      },
      repulse: {
        distance: 200,
        duration: 0.4,
      },
      push: {
        particles_nb: 4,
      },
      remove: {
        particles_nb: 2,
      },
    },
  },
  retina_detect: true,
});

app.config(function ($routeProvider, $locationProvider, $sceProvider) {
  $locationProvider.html5Mode(true);

  $routeProvider.when("/security/login", {
    controller: "LoginController",
    templateUrl: "/mix-app/views/app-security/pages/login/view.html",
  });

  $routeProvider.when("/security/register", {
    controller: "RegisterController",
    templateUrl: "/mix-app/views/app-security/pages/register/view.html",
  });
  $routeProvider.when("/security/forgot-password", {
    controller: "ForgotPasswordController",
    templateUrl: "/mix-app/views/app-security/pages/forgot-password/view.html",
  });
  $routeProvider.when("/security/reset-password", {
    controller: "ResetPasswordController",
    templateUrl: "/mix-app/views/app-security/pages/reset-password/view.html",
  });

  $routeProvider.otherwise({ redirectTo: "/security/login" });
});

"use strict";
app.controller("AppSecurityController", [
  "$rootScope",
  "$scope",
  "ApiService",
  "AuthService",
  "TranslatorService",
  "AppSettingsService",
  function (
    $rootScope,
    $scope,
    apiService,
    authService,
    translatorService,
    appSettingsService
  ) {
    $scope.isInit = false;
    $scope.pageTagName = "";
    $scope.pageTagTypeName = "";
    $scope.pageTagType = 0;
    $scope.isAdmin = false;
    $scope.translator = translatorService;
    $rootScope.globalSettingsService = appSettingsService;
    $scope.lang = null;
    $scope.mixConfigurations = {};
    $scope.portalThemeSettings = {};
    $scope.init = function () {
      if (!$rootScope.isBusy) {
        $rootScope.isBusy = true;
        apiService.getAllSettings($scope.lang).then(function () {
          $scope.isInit = true;
          $rootScope.isBusy = false;
          $scope.$apply();
        });
      }
    };
  },
]);

"use strict";
app.controller("LoginController", [
  "$rootScope",
  "$scope",
  "$location",
  "$routeParams",
  "ApiService",
  "CommonService",
  "AuthService",
  function (
    $rootScope,
    $scope,
    $location,
    $routeParams,
    apiService,
    commonService,
    authService
  ) {
    $scope.canLogin = true;
    if (authService.authentication && authService.isInRole("Owner")) {
      authService.referredUrl = $location.path();
      $location.path("/admin");
    }

    $scope.pageClass = "page-login";

    $scope.loginData = {
      username: "",
      password: "",
      rememberMe: true,
    };

    $scope.message = "";
    $scope.init = async function () {
      $scope.returnUrl = $scope.getReturnUrl();
      $rootScope.isBusy = false;
      $scope.providers = await authService.getExternalLoginProviders();
      await apiService.getAllSettings();
      $scope.$apply();
    };
    $scope.login = async function () {
      $rootScope.isBusy = true;
      var result = await authService.login($scope.loginData);
      if (result.success) {
        if ($routeParams.ReturnUrl) {
          window.top.location = $routeParams.ReturnUrl;
        } else if (
          document.referrer &&
          document.referrer.indexOf("init") === -1
        ) {
          window.top.location = document.referrer;
        } else {
          window.top.location = "/";
        }
      }
      $rootScope.isBusy = false;
      $scope.$apply();
    };
    $scope.externalLogin = async function (loginData, provider) {
      var result = await authService.externalLogin(loginData, provider);
      if (result) {
        $scope.canLogin = false;
        let returnUrl = $scope.getReturnUrl();
        let hasPermission = $scope.hasPermission(returnUrl);
        if (hasPermission) {
          window.top.location = returnUrl;
        } else {
          $rootScope.showErrors([
            "You don't have permission to access this url",
          ]);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.logOut = function () {
      $scope.canLogin = true;
      $scope.$apply();
    };

    $scope.getReturnUrl = function () {
      return $routeParams.ReturnUrl
        ? $routeParams.ReturnUrl
        : document.referrer && document.referrer.indexOf("init") === -1
        ? document.referrer
        : "/";
    };

    $scope.hasPermission = function (url) {
      return (
        url == "/" ||
        authService.isInRole("Owner") ||
        (authService.authentication.permissions &&
          authService.authentication.permissions.contains(url))
      );
    };

    $scope.authExternalProvider = function (provider) {
      var redirectUri =
        location.protocol + "//" + location.host + "/authcomplete.html";

      var externalProviderUrl =
        ngAuthSettings.apiServiceBaseUri +
        "api/Account/ExternalLogin?provider=" +
        provider +
        "&response_type=token&client_id=" +
        ngAuthSettings.clientId +
        "&redirect_uri=" +
        redirectUri;
      window.$windowScope = $scope;

      var oauthWindow = window.open(
        externalProviderUrl,
        "Authenticate Account",
        "location=0,status=0,width=600,height=750"
      );
    };

    $scope.authCompletedCB = function (fragment) {
      $scope.$apply(function () {
        if (fragment.haslocalaccount === "False") {
          authService.logOut();

          authService.externalAuthData = {
            provider: fragment.provider,
            username: fragment.external_user_name,
            externalAccessToken: fragment.external_access_token,
          };

          $location.path("/associate");
        } else {
          //Obtain access token and redirect to orders
          var externalData = {
            provider: fragment.provider,
            externalAccessToken: fragment.external_access_token,
          };
          authService.obtainAccessToken(externalData).then(
            function (response) {
              $location.path("/orders");
            },
            function (err) {
              $scope.message = err.error_description;
            }
          );
        }
      });
    };
  },
]);

"use strict";
app.controller("ForgotPasswordController", [
  "$rootScope",
  "$scope",
  "ngAppSettings",
  "$location",
  "AuthService",
  function ($rootScope, $scope, ngAppSettings, $location, authService) {
    if (
      authService.authentication &&
      authService.authentication.isAuth &&
      authService.authentication &&
      authService.authentication.isAdmin
    ) {
      authService.referredUrl = $location.path();
      $location.path("/admin");
    }
    $scope.pageClass = "page-forgot-password";
    $scope.success = false;
    $scope.viewmodel = {
      email: null,
    };

    $scope.message = "";
    $scope.$on("$viewContentLoaded", function () {
      $rootScope.isBusy = false;
      authService.referredUrl = "/security/login";
    });
    $scope.submit = async function () {
      var result = await authService.forgotPassword($scope.viewmodel);
      if (result.success) {
        $rootScope.isBusy = false;
        $scope.success = true;
        $scope.$apply();
      } else {
        $rootScope.isBusy = false;
        $rootScope.showErrors(result.errors);
      }
    };

    $scope.authExternalProvider = function (provider) {
      var redirectUri =
        location.protocol + "//" + location.host + "/authcomplete.html";

      var externalProviderUrl =
        ngAuthSettings.apiServiceBaseUri +
        "api/Account/ExternalLogin?provider=" +
        provider +
        "&response_type=token&client_id=" +
        ngAuthSettings.clientId +
        "&redirect_uri=" +
        redirectUri;
      window.$windowScope = $scope;

      var oauthWindow = window.open(
        externalProviderUrl,
        "Authenticate Account",
        "location=0,status=0,width=600,height=750"
      );
    };

    $scope.authCompletedCB = function (fragment) {
      $scope.$apply(function () {
        if (fragment.haslocalaccount === "False") {
          authService.logOut();

          authService.externalAuthData = {
            provider: fragment.provider,
            username: fragment.external_user_name,
            externalAccessToken: fragment.external_access_token,
          };

          $location.path("/associate");
        } else {
          //Obtain access token and redirect to orders
          var externalData = {
            provider: fragment.provider,
            externalAccessToken: fragment.external_access_token,
          };
          authService.obtainAccessToken(externalData).then(
            function (response) {
              $location.path("/orders");
            },
            function (err) {
              $scope.message = err.error_description;
            }
          );
        }
      });
    };
  },
]);

"use strict";
app.controller("RegisterController", [
  "$scope",
  "$rootScope",
  "RegisterServices",
  function ($scope, $rootScope, services) {
    $scope.user = {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      isAgreed: false,
    };
    $scope.register = async function () {
      if (!$scope.user.isAgreed) {
        $rootScope.showMessage("Please agreed with our policy", "warning");
      } else {
        if ($scope.password !== $scope.confirmPassword) {
          $rootScope.showErrors(["Confirm Password is not matched"]);
        } else {
          $rootScope.isBusy = true;
          var result = await services.register($scope.user);
          if (result.success) {
            $rootScope.isBusy = false;
            window.location.href = "/security/login";
          } else {
            if (result) {
              $rootScope.showErrors(result.errors);
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        }
      }
    };
  },
]);

"use strict";
app.factory("RegisterServices", [
  "$http",
  "ApiService",
  "CommonService",
  function ($http, apiService, commonService) {
    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var usersServiceFactory = {};
    var apiUrl = "/admin/";
    var _register = async function (user) {
      var apiUrl = "/rest/auth/user/register";
      var req = {
        method: "POST",
        url: apiUrl,
        data: JSON.stringify(user),
      };

      return await apiService.sendRequest(req);
    };

    usersServiceFactory.register = _register;
    return usersServiceFactory;
  },
]);

"use strict";
app.controller("ResetPasswordController", [
  "$scope",
  "$rootScope",
  "AuthService",
  "$routeParams",
  function ($scope, $rootScope, service, $routeParams) {
    $scope.user = {
      email: "",
      password: "",
      confirmPassword: "",
      code: "",
    };
    $scope.init = function () {
      $scope.user.code = $routeParams.token;
    };
    $scope.submit = async function () {
      if ($scope.password !== $scope.confirmPassword) {
        $rootScope.showErrors(["Confirm Password is not matched"]);
      } else {
        $rootScope.isBusy = true;
        var result = await service.resetPassword($scope.user);
        if (result.success) {
          $rootScope.isBusy = false;
          window.location.href = "/security/login";
        } else {
          if (result) {
            $rootScope.showErrors(result.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
  },
]);

"use strict";
app.factory("RegisterServices", [
  "$http",
  "ApiService",
  "CommonService",
  function ($http, apiService, commonService) {
    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var usersServiceFactory = {};
    var apiUrl = "/admin/";
    var _register = async function (user) {
      var apiUrl = "/rest/auth/user/register";
      var req = {
        method: "POST",
        url: apiUrl,
        data: JSON.stringify(user),
      };

      return await apiService.sendRequest(req);
    };

    usersServiceFactory.register = _register;
    return usersServiceFactory;
  },
]);
