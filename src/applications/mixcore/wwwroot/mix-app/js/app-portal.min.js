/* Thu Aug 01 2024 17:30:31 GMT+0700 (Indochina Time) */"use strict";
var app = angular.module("MixPortal", [
  "angularCroppie",
  "ui.bootstrap",
  "ngRoute",
  "components",
  "ngFileUpload",
  "LocalStorageModule",
  "bw.paging",
  "dndLists",
  "ngTagsInput",
  "ngSanitize",
  "MixShared",
]);
var modules = angular.module("components", []);

"use strict";
app.controller("AppPortalController", [
  "$rootScope",
  "$scope",
  "ngAppSettings",
  "$location",
  "ApiService",
  "CommonService",
  "AuthService",
  "TranslatorService",
  "AppSettingsService",
  "localStorageService",
  function (
    $rootScope,
    $scope,
    ngAppSettings,
    $location,
    apiService,
    commonService,
    authService,
    translatorService,
    appSettingsService,
    localStorageService
  ) {
    BaseHub.call(this, $scope);
    $scope.isInit = false;
    $scope.pageTagName = "";
    $scope.pageTagTypeName = "";
    $scope.pageTagType = 0;
    $scope.isAdmin = false;
    $scope.translator = translatorService;
    $rootScope.globalSettingsService = appSettingsService;
    $scope.lang = null;
    $scope.mixConfigurations = {};
    $scope.portalThemeSettings = {};
    $scope.init = function () {
      new ClipboardJS(".btn-clipboard");
      if (!$rootScope.isBusy) {
        $rootScope.isBusy = true;

        commonService.loadJsonData("micon").then((resp) => {
          ngAppSettings.icons = resp.data.items;
        });
        commonService.loadJsonData("enums").then((resp) => {
          ngAppSettings.enums = resp.data.items;
        });
        apiService.getAllSettings($scope.lang).then(function () {
          if ($rootScope.globalSettings) {
            $scope.portalThemeSettings =
              $rootScope.globalSettings.portalThemeSettings;
            authService.fillAuthData().then(function () {
              $rootScope.authentication = authService.authentication;
              $scope.isAuth = authService.authentication != null;
              $rootScope.isAuth = authService.authentication != null;
              if (authService.authentication) {
                $scope.isAdmin = authService.isInRole("Owner");
              } else {
                window.top.location.href = "/security/login";
              }
            });
            $rootScope.isInit = true;
            $scope.isInit = true;
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            window.top.location.href = "/security/login";
          }
        });
      }
    };
  },
]);

app.config(function (
  $routeProvider,
  $locationProvider,
  $sceProvider,
  ngAppSettings
) {
  $locationProvider.html5Mode(true);
  var data = JSON.parse($("#portal-menus").val());
  ngAppSettings.routes = data.routes;
  angular.forEach(ngAppSettings.routes, function (cate, key) {
    if (cate.items.length) {
      angular.forEach(cate.items, function (item, key) {
        $routeProvider.when(item.path, {
          controller: item.controller,
          templateUrl: item.templatePath,
        });
      });
    }
  });
  $routeProvider.otherwise({ redirectTo: "/admin" });
});

"use strict";
app.factory("AttributeDataService", [
  "BaseService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("attribute-data");
    // Define more service methods here
    return serviceFactory;
  },
]);

"use strict";
app.factory("PostPostRestService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-post-post");

    var _search = async function (request) {
      var url = `${this.prefixUrl}/search`;
      var data = serviceFactory.parseQuery(request);
      if (data) {
        url = `${url}?${url.concat(data)}`;
      }
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };
    // Define more service methods here
    serviceFactory.search = _search;
    return serviceFactory;
  },
]);

"use strict";
app.factory("TemplateService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-template", true);
    var _copy = async function (id) {
      var url = this.prefixUrl + "/copy/" + id;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };
    serviceFactory.copy = _copy;
    return serviceFactory;
  },
]);

"use strict";
app.controller("MixApplicationController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "MixApplicationRestService",
  "StoreService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    service,
    storeService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
    BaseHub.call(this, $scope, endpoints.Messenger);

    $scope.progress = 0;
    $scope.viewMode = "list";
    $scope.current = null;
    $scope.themeRequest = angular.copy(ngAppSettings.request);
    $scope.themeRequest.orderBy = "createdDatetime";
    $scope.themeRequest.mixDatabaseName = "mixApplicationPackage";
    $scope.themeRequest.queries = [
      { fieldName: "mixcoreVersion", value: "2.0.1" },
    ];
    $scope.request.columns = [
      "id",
      "displayName",
      "baseHref",
      "detailUrl",
      "createdDateTime",
      "createdBy",
    ];
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";

    $scope.generateBaseHref = (forceRename) => {
      if (
        forceRename ||
        ($scope.viewmodel.displayName && !$scope.viewmodel.baseHref)
      ) {
        $scope.viewmodel.baseHref = `/app/${$rootScope.generateKeyword(
          $scope.viewmodel.displayName,
          "-",
          false,
          true
        )}`;
      }
    };
    $scope.init = async function () {
      $scope.startConnection("mixThemeHub", null, (err) => {
        console.log(err);
      });
      $scope.onConnected = () => {
        $scope.joinRoom("Theme");
      };
      if (!$scope.viewmodel.id) {
        await $scope.getThemes();
      }
    };
    $scope.install = async function () {
      $rootScope.isBusy = true;
      $scope.installStatus = "Downloading";
      var resp = await service.install($scope.viewmodel);
      if (resp && resp.success) {
        $rootScope.isBusy = false;
        $("html, body").animate({ scrollTop: "0px" }, 500);
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.restore = async function () {
      $rootScope.isBusy = true;
      $scope.installStatus = "Restoring";
      $("html, body").animate({ scrollTop: "0px" }, 500);
      var resp = await service.restore({
        appId: $scope.viewmodel.id,
        packageFilePath: $scope.viewmodel.appSettings.activePackage,
      });
      if (resp && resp.success) {
        $scope.data = resp.data;
        $rootScope.isBusy = false;
        $scope.installStatus = "Finished";
        $scope.status = "";
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.installStatus = "";
        $scope.status = "";
        $scope.$apply();
      }
    };
    $scope.receiveMessage = function (msg) {
      switch (msg.action) {
        case "Downloading":
          var index = $scope.data.items.findIndex(
            (m) => m.id == $scope.current.id
          );
          var progress = Math.round(msg.message);
          if (index >= 0) {
            $scope.progress = progress;
            $scope.$apply();
          }
          break;
        case "Finished":
          $scope.installStatus = "Finished";
          $location.url("/admin/mix-application/list");
          $scope.$apply();
          break;
        default:
          setTimeout(() => {
            $scope.status = msg.message;
            $scope.$apply();
          }, 200);
          break;
      }
    };
    $scope.getThemes = async function () {
      $rootScope.isBusy = true;
      if ($scope.themeRequest.fromDate !== null) {
        var d = new Date($scope.themeRequest.fromDate);
        $scope.themeRequest.fromDate = d.toISOString();
      }
      if ($scope.themeRequest.toDate !== null) {
        var dt = new Date($scope.themeRequest.toDate);
        $scope.themeRequest.toDate = dt.toISOString();
      }
      var resp = await storeService.getThemes($scope.themeRequest);
      if (resp && resp.success) {
        $scope.data = resp.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        if ($scope.getListFailCallback) {
          $scope.getListFailCallback();
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.select = function (theme) {
      $scope.viewmodel.packageFilePath = theme.additionalData.builtSourceCode;
      $scope.viewmodel.displayName = theme.additionalData.title;
      $scope.generateBaseHref(true);
      $scope.current = theme;
      // TODO: verify user - theme to enable install
      $scope.current.canInstall = true;
      $scope.viewMode = "detail";
    };
    $scope.back = function () {
      $scope.viewMode = "list";
    };
    $scope.validate = function () {
      if ($scope.viewmodel.baseHref.indexOf("/mixapp/") != 0) {
        $rootScope.showErrors(['baseHref must start with "/mixapp/"']);
        return false;
      }
      return true;
    };
    $scope.updateAppSettings = (data) => {
      $scope.viewmodel.appSettings = data;
    };
  },
]);

"use strict";
app.factory("MixApplicationRestService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-application");
    var _install = async function (objData) {
      var url = `${this.prefixUrl}/install`;
      var req = {
        serviceBase: this.serviceBase,
        method: "POST",
        url: url,
        data: JSON.stringify(objData),
      };
      return await this.getRestApiResult(req);
    };
    var _restore = async function (objData) {
      var url = `${this.prefixUrl}/restore-package`;
      var req = {
        serviceBase: this.serviceBase,
        method: "POST",
        url: url,
        data: JSON.stringify(objData),
      };
      return await this.getRestApiResult(req);
    };
    serviceFactory.install = _install;
    serviceFactory.restore = _restore;
    return serviceFactory;
  },
]);

"use strict";
app.controller("AppSettingsController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$timeout",
  "$location",
  "AuthService",
  "ApiService",
  "CommonService",
  "AppSettingsServices",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $timeout,
    $location,
    authService,
    apiService,
    commonService,
    appSettingsServices
  ) {
    $scope.appSettings = null;
    $scope.errors = [];
    $scope.statuses = ngAppSettings.contentStatuses;
    $scope.cultures = $rootScope.globalSettings.cultures;
    $scope.settingTypes = [
      "Global",
      "Log",
      "RateLimit",
      "Authentication",
      "Portal",
      "EPPlus",
      "IPSecurity",
      "MixHeart",
      "Quartz",
      "Smtp",
      "Endpoint",
      "Azure",
      "Ocelot",
      "Storage",
      "Queue",
      "Payments",
      "GoogleFirebase",
      "GoogleCredential",
    ];
    $scope.type = "Global";
    $scope.getAppSettings = async function (type) {
      $rootScope.isBusy = true;
      $scope.type = type;
      $scope.appSettings = null;
      setTimeout(async () => {
        var resp = await appSettingsServices.getAppSettings($scope.type);
        if (resp && resp.success) {
          $scope.appSettings = JSON.stringify(resp.data, null, "\t");
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }, 200);
    };
    $scope.updateAppSettings = function (content) {
      $scope.appSettings = content;
    };
    $scope.loadAppSettings = async function () {
      $rootScope.isBusy = true;
      await $scope.getAppSettings("Global");

      await apiService.initAllSettings();
      $scope.mixConfigurations = $rootScope.mixConfigurations;
      $rootScope.isBusy = false;
      $scope.$apply();

      // load portal menus
      //   commonService.loadJsonData("portal-menus.json").then((resp) => {
      //     $scope.menus = resp.data.items;
      //     $rootScope.isBusy = false;
      //     $scope.$apply();
      //   });
    };

    $scope.stopApplication = async function () {
      $rootScope.isBusy = true;
      await commonService.stopApplication();
      $rootScope.showMessage("success", "success");
      $rootScope.isBusy = false;
      $scope.$apply();
    };
    $scope.clearCache = async function () {
      $rootScope.isBusy = true;
      await commonService.clearCache();
      $rootScope.showMessage("success", "success");
      $rootScope.isBusy = false;
      $scope.$apply();
    };
    $scope.saveAppSettings = async function (appSettings) {
      $rootScope.isBusy = true;
      var resp = await appSettingsServices.saveAppSettings(
        $scope.type,
        appSettings
      );
      if (resp && resp.success) {
        $scope.appSettings = resp.data;
        $rootScope.showMessage(
          "Please stop application to restart application pool",
          "warning"
        );
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("AppSettingsServices", [
  "$http",
  "$rootScope",
  "ApiService",
  "CommonService",
  function ($http, $rootScope, apiService, commonService) {
    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var appSettingssServiceFactory = {};

    var settings = $rootScope.globalSettings;

    var _getAppSettings = async function (name) {
      var url = `/rest/settings/${name}`;

      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    var _saveAppSettings = async function (name, appSettings) {
      var url = `/rest/settings/${name}`;
      var req = {
        method: "POST",
        url: url,
        data: appSettings,
      };
      return await apiService.sendRequest(req);
    };
    // var _saveAppSettings = async function (name, content) {
    //   var apiUrl = "/admin/app-settings/save-global/" + name;
    //   var req = {
    //     method: "POST",
    //     url: apiUrl,
    //     data: JSON.stringify(content),
    //   };
    //   return await apiService.sendRequest(req);
    // };

    appSettingssServiceFactory.getAppSettings = _getAppSettings;
    appSettingssServiceFactory.saveAppSettings = _saveAppSettings;
    return appSettingssServiceFactory;
  },
]);

"use strict";
app.controller("AuditLogController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "AuthService",
  "AuditLogRestService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    authService,
    service
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
    BaseHub.call(this, $scope, endpoints.Messenger);

    authService.fillAuthData();
    $scope.request.status = null;
    $scope.messages = [];
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";

    $scope.connect = () => {
      $scope.startConnection(
        "log-stream-hub",
        authService.authentication.accessToken,
        (err) => {
          if (
            authService.authentication.refreshToken &&
            err.message.indexOf("401") >= 0
          ) {
            authService.refreshToken().then(async () => {
              $scope.startConnection(
                "log-stream-hub",
                authService.authentication.accessToken
              );
            });
          }
        }
      );
    };
    $scope.receiveMessage = function (msg) {
      switch (msg.action) {
        case "MyConnection":
          $scope.hubRequest.from = msg.data;
          $scope.$apply();
          break;
        case "NewMessage":
          $scope.newMessage(msg);

          break;
      }
    };
    $scope.newMessage = function (msg) {
      msg.style = $scope.getMessageType(msg.type);
      if (msg.data) {
        msg.data = JSON.parse(msg.data);
      }
      $scope.messages.push(msg);
      $scope.$apply();

      setTimeout(() => {
        $("body,html").animate(
          {
            scrollTop: $("#log-stream-container").height(), // Scroll to top of body
          },
          500
        );
      }, 200);
    };
    $scope.getMessageType = function (type) {
      switch (type) {
        case "Success":
          return "success";
        case "Error":
          return "danger";
        case "Warning":
          return "warning";
        case "Info":
          return "info";
        default:
          return "default";
      }
    };
    $scope.view = function (item) {
      item.objClass = item.success ? "text-success" : "text-danger";
      $rootScope.preview("object", item, null, "modal-lg");
    };
  },
]);

"use strict";
app.factory("AuditLogRestService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.initService("/rest", "mix-log/audit-log", true);
    var _search = async function (objData, queries = null) {
      var data = serviceFactory.parseQuery(objData);

      var url = `${this.prefixUrl}/search`;

      if (data) {
        url += "?";
        url = url.concat(data);
        if (queries) {
          url += "&";
          var extraQueries = serviceFactory.parseQuery(queries);
          url = url.concat(extraQueries);
        }
      }
      var req = {
        serviceBase: this.serviceBase,
        apiVersion: this.apiVersion,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };
    serviceFactory.getList = _search;
    return serviceFactory;
  },
]);

"use strict";
app.controller("CultureController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "CultureService",
  "CommonService",
  "ApiService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    service,
    commonService,
    apiService
  ) {
    $scope.selected = null;
    BaseCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.loadCultures = async function () {
      var getCultures = await commonService.loadJsonData("cultures");
      $scope.cultures = getCultures.data.items;
      $scope.$apply();
    };
    $scope.saveSuccessCallback = function () {
      apiService
        .initAllSettings()
        .then(() => (window.location.href = "/admin/language/list"));
    };
    $scope.removeCallback = function () {
      apiService
        .initAllSettings()
        .then(() => (window.location.href = "/admin/language/list"));
    };
    $scope.changeData = function (selected) {
      if (selected) {
        $scope.viewmodel.specificulture = selected.specificulture;
        $scope.viewmodel.displayName = selected.fullName;
        $scope.viewmodel.icon = selected.icon;
      }
    };
  },
]);

"use strict";
app.factory("CultureService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("culture");
    var _updateInfos = async function (pages) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-infos",
        data: JSON.stringify(pages),
      };
      return await apiService.sendRequest(req);
    };

    var _syncTemplates = async function (id) {
      var apiUrl = "/culture/";
      var url = apiUrl + "sync/" + id;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    serviceFactory.syncTemplates = _syncTemplates;
    serviceFactory.updateInfos = _updateInfos;
    return serviceFactory;
  },
]);

"use strict";
app.controller("CustomerController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$timeout",
  "$location",
  "CustomerServices",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $timeout,
    $location,
    customerServices
  ) {
    $scope.request = angular.copy(ngAppSettings.request);
    $scope.request.contentStatuses = ["Active"];
    $scope.request.status = "0";
    $scope.activedCustomer = null;
    $scope.relatedCustomers = [];
    $rootScope.isBusy = false;
    $scope.data = {
      pageIndex: 0,
      pageSize: 1,
      totalItems: 0,
    };
    $scope.errors = [];

    $scope.range = function (max) {
      var input = [];
      for (var i = 1; i <= max; i += 1) input.push(i);
      return input;
    };

    $scope.loadCustomer = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      var response = await customerServices.getCustomer(id, "portal");
      if (response.success) {
        $scope.activedCustomer = response.data;
        $rootScope.initEditor();
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.loadCustomers = async function (pageIndex) {
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      if ($scope.request.fromDate !== null) {
        var d = new Date($scope.request.fromDate);
        $scope.request.fromDate = d.toISOString();
      }
      if ($scope.request.toDate !== null) {
        var d = new Date($scope.request.toDate);
        $scope.request.toDate = d.toISOString();
      }
      var resp = await customerServices.getCustomers($scope.request);
      if (resp && resp.success) {
        $scope.data = resp.data;
        //$("html, body").animate({ "scrollTop": "0px" }, 500);
        $.each($scope.data.items, function (i, customer) {
          $.each($scope.activedCustomers, function (i, e) {
            if (e.customerId === customer.id) {
              customer.isHidden = true;
            }
          });
        });
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $scope.$apply();
      }
    };

    $scope.removeCustomer = function (id) {
      $rootScope.showConfirm(
        $scope,
        "removeCustomerConfirmed",
        [id],
        null,
        "Remove Customer",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeCustomerConfirmed = async function (id) {
      var result = await customerServices.removeCustomer(id);
      if (result.success) {
        $rootScope.showMessage("success", "success");
        $scope.loadCustomers();
      } else {
        $rootScope.showMessage("failed");
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.saveCustomer = async function (customer) {
      customer.content = $(".editor-content").val();
      var resp = await customerServices.saveCustomer(customer);
      if (resp && resp.success) {
        $scope.activedCustomer = resp.data;
        $rootScope.showMessage("Update successfully!", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
        //$location.path('/admin/customer/details/' + resp.data.id);
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("CustomerServices", [
  "$http",
  "$rootScope",
  "ApiService",
  "CommonService",
  function ($http, $rootScope, apiService, commonService) {
    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var customersServiceFactory = {};

    var settings = $rootScope.globalSettings;

    var _getCustomer = async function (id, type) {
      var apiUrl = "/queen-beauty/customer/";
      var url = apiUrl + "details/" + type;
      if (id) {
        url += "/" + id;
      }
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    var _initCustomer = async function (type) {
      var apiUrl = "/queen-beauty/customer/";
      var req = {
        method: "GET",
        url: apiUrl + "init/" + type,
      };
      return await apiService.sendRequest(req);
    };

    var _getCustomers = async function (request) {
      var apiUrl = "/queen-beauty/customer/";
      var req = {
        method: "POST",
        url: apiUrl + "list",
        data: JSON.stringify(request),
      };

      return await apiService.sendRequest(req);
    };

    var _removeCustomer = async function (id) {
      var apiUrl = "/queen-beauty/customer/";
      var req = {
        method: "GET",
        url: apiUrl + "delete/" + id,
      };
      return await apiService.sendRequest(req);
    };

    var _saveCustomer = async function (customer) {
      var apiUrl = "/queen-beauty/customer/";
      var req = {
        method: "POST",
        url: apiUrl + "save",
        data: JSON.stringify(customer),
      };
      return await apiService.sendRequest(req);
    };

    customersServiceFactory.getCustomer = _getCustomer;
    customersServiceFactory.initCustomer = _initCustomer;
    customersServiceFactory.getCustomers = _getCustomers;
    customersServiceFactory.removeCustomer = _removeCustomer;
    customersServiceFactory.saveCustomer = _saveCustomer;
    return customersServiceFactory;
  },
]);

"use strict";
app.controller("ConfigurationController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "ConfigurationService",
  "ApiService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    apiService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.init = function () {
      $scope.request.category = $routeParams.category || "";
      $scope.request.culture = $rootScope.globalSettings.defaultCulture;
      $scope.getList();
    };
    $scope.getSingleSuccessCallback = function () {
      $scope.cates = ngAppSettings.enums?.configuration_cates;
      $scope.appSettings = $rootScope.globalSettings;
      $scope.request.category = $routeParams.category || "";
      if (!$scope.viewmodel.id) {
        $scope.viewmodel.dataType = "Text";
        $scope.viewmodel.specificulture =
          $rootScope.globalSettings.defaultCulture;
      }
      if (!$scope.viewmodel.category) {
        $scope.viewmodel.category = "Site";
      }
    };
    $scope.saveSuccessCallback = function () {
      apiService.getAllSettings().then(function () {
        // $location.url($scope.referrerUrl);
        $rootScope.isBusy = false;
        $scope.$apply();
      });
    };
    $scope.removeCallback = function () {
      apiService.getAllSettings().then(function () {
        $location.url($scope.referrerUrl);
      });
    };

    $scope.generateName = function () {
      $scope.viewmodel.keyword = $rootScope.generateKeyword(
        $scope.viewmodel.keyword,
        "_",
        true
      );
    };
  },
]);

"use strict";
app.factory("ConfigurationService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("configuration");

    var _uploadConfiguration = async function (configurationFile) {
      //var container = $(this).parents('.model-configuration').first().find('.custom-file').first();
      if (
        configurationFile.file !== undefined &&
        configurationFile.file !== null
      ) {
        // Create FormData object
        var files = new FormData();

        // Looping over all files and add it to FormData object
        files.append(configurationFile.file.name, configurationFile.file);

        // Adding one more key to FormData object
        files.append("fileFolder", configurationFile.folder);
        files.append("title", configurationFile.title);
        files.append("description", configurationFile.description);

        var req = {
          url: this.prefixUrl + "/upload",
          type: "POST",
          headers: {},
          contentType: false, // Not to set any content header
          processData: false, // Not to process data
          data: files,
        };

        return await apiService.sendRequest(req);
      }
    };
    serviceFactory.uploadConfiguration = _uploadConfiguration;
    return serviceFactory;
  },
]);

"use strict";
app.controller("DashboardController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$timeout",
  "$location",
  "DashboardServices",
  "AuthService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $timeout,
    $location,
    dashboardServices,
    authService
  ) {
    var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
    BaseHub.call(this, $scope, endpoints.POS);
    $scope.pageClass = "page-dashboard";
    $(".side-nav li").removeClass("active");
    $(".side-nav .page-dashboard").addClass("active");
    $scope.data = {
      totalPage: 0,
      totalPost: 0,
      totalProduct: 0,
      totalUser: 0,
    };
    $scope.users = [];
    $scope.$on("$viewContentLoaded", function () {
      $rootScope.isBusy = false;
    });
    $scope.init = async function () {
      await $scope.startConnection(
        "pos",
        authService.authentication.accessToken,
        (err) => {
          if (
            authService.authentication.refreshToken &&
            err.message.indexOf("401") >= 0
          ) {
            authService.refreshToken().then(async () => {
              $scope.startConnection(
                "pos",
                authService.authentication.accessToken
              );
            });
          }
        }
      );
    };
    $scope.receiveMessage = (msg) => {
      console.log(msg);
      $scope.result = msg;
      $scope.$apply();
      $rootScope.showMessage(msg.title, $scope.getMessageType(msg.type));
    };
    $scope.onConnected = () => {
      $scope.joinStore(1);
    };
    $scope.invokeHubMethod = () => {
      let obj = JSON.parse($scope.hubData);
      $scope.connection
        .invoke($scope.hubMethod, obj)
        .then((result) => {
          console.log(result);
        })
        .catch((resp) => {
          if (
            authService.authentication.refreshToken &&
            resp.message.indexOf("unauthorized") >= 0
          ) {
            authService.refreshToken().then(async () => {
              $scope.startConnection(
                "pos",
                authService.authentication.accessToken
              );
            });
          }
          console.log(resp);
        });
    };
    $scope.joinStore = function (storeId) {
      $scope.connection
        .invoke("JoinStore", storeId)
        .then((result) => {
          console.log(result);
          $scope.storeId = storeId;
        })
        .catch((resp) => {
          if (
            authService.authentication.refreshToken &&
            resp.message.indexOf("unauthorized") >= 0
          ) {
            authService.refreshToken().then(async () => {
              $scope.startConnection(
                "pos",
                authService.authentication.accessToken
              );
            });
          }
          console.log(resp);
        });
    };
    $scope.updateJsonContent = (content) => {
      $scope.hubData = content;
      $scope.$apply();
    };
    $scope.getDashboardInfo = async function () {
      $rootScope.isBusy = true;
      //   var response = await dashboardServices.getDashboardInfo();
      //   if (response.success) {
      //     // $('#mainSection').removeClass('card');
      //     $scope.data = response.data;
      //     $rootScope.isBusy = false;
      //     $scope.$apply();
      //     // $scope.getChart();
      //   } else {
      //     $rootScope.showErrors(response.errors);
      //     $rootScope.isBusy = false;
      //     $scope.$apply();
      //   }
    };
    $scope.getChart = function () {
      var ctx = document.getElementById("myChart");
      var myChart = new Chart(ctx, {
        // type: 'pie',
        // data: {
        //   labels: ["Africa", "Asia", "Europe", "Latin America", "North America"],
        //   datasets: [{
        //     label: "Population (millions)",
        //     backgroundColor: ["#3e95cd", "#8e5ea2","#3cba9f","#e8c3b9","#c45850"],
        //     data: [2478,5267,734,784,433]
        //   }]
        // },
        // options: {
        //   title: {
        //     display: true,
        //     text: 'Predicted world population (millions) in 2050'
        //   }
        // }
      });
    };
  },
]);

"use strict";
app.factory("DashboardServices", [
  "$rootScope",
  "$http",
  "ApiService",
  "CommonService",
  function ($rootScope, $http, apiService, commonService) {
    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var usersServiceFactory = {};
    var apiUrl = "/rest/portal/common/" + $rootScope.globalSettings.lang;
    var _getDashboardInfo = async function () {
      var req = {
        method: "GET",
        url: apiUrl + "/dashboard",
      };
      return await apiService.sendRequest(req);
    };

    usersServiceFactory.getDashboardInfo = _getDashboardInfo;
    return usersServiceFactory;
  },
]);

"use strict";
app.controller("DomainController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "DomainRestService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    service
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.request.columns = [
      "id",
      "displayName",
      "host",
      "createdDateTime",
      "createdBy",
    ];
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
  },
]);

"use strict";
app.factory("DomainRestService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-domain");
    return serviceFactory;
  },
]);

"use strict";
app.controller("FileController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$timeout",
  "$location",
  "AuthService",
  "FileServices",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $timeout,
    $location,
    authService,
    fileServices
  ) {
    $scope.request = {
      pageSize: "10",
      pageIndex: 0,
      status: "Published",
      orderBy: "CreatedDateTime",
      direction: "Desc",
      fromDate: null,
      toDate: null,
      keyword: "",
      key: "",
    };

    $scope.activedFile = null;
    $scope.relatedFiles = [];
    $rootScope.isBusy = false;
    $scope.data = {
      pageIndex: 0,
      pageSize: 1,
      totalItems: 0,
    };
    $scope.errors = [];

    $scope.range = function (max) {
      var input = [];
      for (var i = 1; i <= max; i += 1) input.push(i);
      return input;
    };
    $scope.loadPage = async function (folder) {
      if (folder) {
        $scope.request.folder += $scope.request.folder !== "" ? "/" : "";
        $scope.request.folder += folder;
      }
      $location.url(
        "/admin/file/list?folder=" + encodeURIComponent($scope.request.folder)
      );
    };
    $scope.loadFile = async function () {
      $rootScope.isBusy = true;
      $scope.listUrl = "/admin/file/list?folder/" + $routeParams.folder;
      $rootScope.isBusy = true;
      var response = await fileServices.getFile(
        $routeParams.folder,
        $routeParams.filename
      );
      if (response.success) {
        $scope.activedFile = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.loadFiles = async function (folder) {
      if (folder) {
        $scope.request.folder +=
          $scope.request.folder !== ""
            ? "MixContent/StaticFiles"
            : "MixContent/StaticFiles";
        $scope.request.folder += folder;
      } else {
        $scope.request.folder = $routeParams.folder
          ? $routeParams.folder
          : "MixContent/StaticFiles";
      }
      if ($routeParams.folder) {
        $scope.backUrl =
          "/admin/file/list?folder=" +
          $routeParams.folder.substring(
            0,
            $routeParams.folder.lastIndexOf("/")
          );
      }
      $rootScope.isBusy = true;
      var resp = await fileServices.getFiles($scope.request);
      if (resp && resp.success) {
        $scope.data = resp.data;
        $.each($scope.data.items, function (i, file) {
          $.each($scope.activedFiles, function (i, e) {
            if (e.fileId === file.id) {
              file.isHidden = true;
            }
          });
        });
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.removeFile = async function (id) {
      if (confirm("Are you sure!")) {
        $rootScope.isBusy = true;
        var resp = await fileServices.removeFile(id);
        if (resp && resp.success) {
          $scope.loadFiles();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };

    $scope.saveFile = async function (file) {
      $rootScope.isBusy = true;
      var resp = await fileServices.saveFile(file);
      if (resp && resp.success) {
        $scope.activedFile = resp.data;
        $rootScope.showMessage("Update successfully!", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.updateTemplateContent = function (content) {
      $scope.activedFile.content = content;
    };
  },
]);

"use strict";
app.factory("FileServices", [
  "$http",
  "$rootScope",
  "ApiService",
  "CommonService",
  "BaseRestService",
  function ($http, $rootScope, apiService, commonService, baseService) {
    var filesServiceFactory = angular.copy(baseService);
    filesServiceFactory.initService("/rest", "mix-storage/file-system", true);
    var _getFile = async function (folder, filename) {
      var url =
        this.prefixUrl + "/details?folder=" + folder + "&filename=" + filename;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    var _initFile = async function (type) {
      var req = {
        method: "GET",
        url: this.prefixUrl + "/init/" + type,
      };
      return await apiService.sendRequest(req);
    };

    var _getFiles = async function (request) {
      var url = this.prefixUrl;
      var data = filesServiceFactory.parseQuery(request);
      if (data) {
        url += "?";
        url = url.concat(data);
      }
      var req = {
        method: "GET",
        url: url,
        data: JSON.stringify(request),
      };
      return await apiService.sendRequest(req);
    };

    var _removeFile = async function (fullPath) {
      var req = {
        method: "DELETE",
        url: this.prefixUrl + "/delete/?fullPath=" + fullPath,
      };
      return await apiService.sendRequest(req);
    };

    var _saveFile = async function (file) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/save",
        data: JSON.stringify(file),
      };
      return await apiService.sendRequest(req);
    };
    var _uploadFile = async function (file, folder) {
      var apiUrl = this.prefixUrl + "/upload-file";
      var fd = new FormData();
      fd.append("folder", folder);
      fd.append("file", file);
      return await filesServiceFactory.ajaxSubmitForm(fd, apiUrl);
    };

    var _extractFile = async function (file, folder) {
      var apiUrl = this.prefixUrl + "/extract-file";
      var fd = new FormData();
      fd.append("folder", folder);
      fd.append("file", file);
      return await filesServiceFactory.ajaxSubmitForm(fd, apiUrl);
    };

    filesServiceFactory.getFile = _getFile;
    filesServiceFactory.initFile = _initFile;
    filesServiceFactory.getFiles = _getFiles;
    filesServiceFactory.removeFile = _removeFile;
    filesServiceFactory.saveFile = _saveFile;
    filesServiceFactory.uploadFile = _uploadFile;
    filesServiceFactory.extractFile = _extractFile;
    return filesServiceFactory;
  },
]);

"use strict";
app.controller("ImportFileController", [
  "$scope",
  "$rootScope",
  "ImportFileServices",
  "TranslatorService",
  "AppSettingsService",
  function (
    $scope,
    $rootScope,
    service,
    translatorService,
    AppSettingsService
  ) {
    $scope.saveImportFile = async function () {
      $rootScope.isBusy = true;
      var form = document.getElementById("frm-import");
      var frm = new FormData();
      frm.append("assets", form["assets"].files[0]);
      var response = await service.saveImportFile(frm);
      if (response.success) {
        $scope.viewmodel = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("ImportFileServices", [
  "$rootScope",
  "BaseService",
  function ($rootScope, baseService) {
    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var serviceFactory = {};

    var settings = $rootScope.globalSettings;
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("portal", true);
    var _saveImportFile = async function (frm) {
      var apiUrl = this.prefixUrl + "/" + settings.lang + "/import";
      return await this.ajaxSubmitForm(frm, apiUrl);
    };

    serviceFactory.saveImportFile = _saveImportFile;
    return serviceFactory;
  },
]);

"use strict";
app.controller("JsonDataController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$timeout",
  "$location",
  "AuthService",
  "JsonDataService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $timeout,
    $location,
    authService,
    service
  ) {
    $scope.request = {
      pageSize: "10",
      pageIndex: 0,
      status: "Published",
      orderBy: "CreatedDateTime",
      direction: "Desc",
      fromDate: null,
      toDate: null,
      keyword: "",
      key: "",
    };

    $scope.activedFile = null;
    $scope.editorVisible = false;
    $scope.data = null;
    $scope.relatedFiles = [];
    $rootScope.isBusy = false;

    $scope.errors = [];

    $scope.loadPage = async function (folder) {
      if (folder) {
        $scope.request.key += $scope.request.key !== "" ? "/" : "";
        $scope.request.key += folder;
      }
      $location.url(
        "/admin/json-data/list?folder=" + encodeURIComponent($scope.request.key)
      );
    };
    $scope.init = async function () {
      $rootScope.isBusy = true;
      $scope.filename = $routeParams.filename;
      $scope.folder = $routeParams.folder;
      $scope.listUrl = "/admin/json-data/list?folder=" + $routeParams.folder;
      $rootScope.isBusy = true;
      var response = await service.getFile(
        $routeParams.folder,
        $routeParams.filename
      );
      if (response.success) {
        $scope.activedFile = response.data;
        $scope.data = $.parseJSON(response.data.content);
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.loadFiles = async function (folder) {
      if (folder) {
        $scope.request.key += $scope.request.key !== "" ? "/" : "";
        $scope.request.key += folder;
      } else {
        $scope.request.key = $routeParams.folder ? $routeParams.folder : "data";
      }

      $rootScope.isBusy = true;
      var resp = await service.getFiles($scope.request);
      if (resp && resp.success) {
        $scope.data = resp.data;
        $.each($scope.data.items, function (i, file) {
          $.each($scope.activedFiles, function (i, e) {
            if (e.fileId === file.id) {
              file.isHidden = true;
            }
          });
        });
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.removeFile = async function (id) {
      if (confirm("Are you sure!")) {
        $rootScope.isBusy = true;
        var resp = await service.removeFile(id);
        if (resp && resp.success) {
          $scope.loadFiles();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.selectPane = function (pane) {
      $scope.editorVisible = pane.header == "Content";
    };
    $scope.save = async function (data) {
      $scope.activedFile.contennt = JSON.stringify(data);
      $scope.saveFile($scope.activedFile);
    };
    $scope.updateData = async function (data) {
      $scope.data = data;
    };
    $scope.saveFile = async function (file) {
      $rootScope.isBusy = true;
      file.content = JSON.stringify($scope.data);
      var resp = await service.saveFile(file);
      if (resp && resp.success) {
        $scope.activedFile = resp.data;
        $rootScope.showMessage("Update successfully!", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("JsonDataService", [
  "$http",
  "$rootScope",
  "ApiService",
  "CommonService",
  function ($http, $rootScope, apiService, commonService) {
    var filesServiceFactory = {};

    var settings = $rootScope.globalSettings;

    var _getFile = async function (folder, filename) {
      var apiUrl = "/file/";
      var url = apiUrl + "details?folder=" + folder + "&filename=" + filename;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    var _initFile = async function (type) {
      var apiUrl = "/file/";
      var req = {
        method: "GET",
        url: apiUrl + "init/" + type,
      };
      return await apiService.sendRequest(req);
    };

    var _getFiles = async function (request) {
      var apiUrl = "/file/";
      var req = {
        method: "POST",
        url: apiUrl + "list",
        data: JSON.stringify(request),
      };

      return await apiService.sendRequest(req);
    };

    var _removeFile = async function (id) {
      var apiUrl = "/file/";
      var req = {
        method: "GET",
        url: apiUrl + "delete/" + id,
      };
      return await apiService.sendRequest(req);
    };

    var _saveFile = async function (file) {
      var apiUrl = "/file/";
      var req = {
        method: "POST",
        url: apiUrl + "save",
        data: JSON.stringify(file),
      };
      return await apiService.sendRequest(req);
    };

    filesServiceFactory.getFile = _getFile;
    filesServiceFactory.initFile = _initFile;
    filesServiceFactory.getFiles = _getFiles;
    filesServiceFactory.removeFile = _removeFile;
    filesServiceFactory.saveFile = _saveFile;
    return filesServiceFactory;
  },
]);

"use strict";
app.controller("LocalizeController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "LocalizeService",
  "ApiService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    apiService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.init = function () {
      $scope.request.category = $routeParams.category || "";
      $scope.request.culture = $rootScope.globalSettings.defaultCulture;
      $scope.getList();
    };
    $scope.getSingleSuccessCallback = function () {
      $scope.cates = ngAppSettings.enums.configuration_cates;
      $scope.appSettings = $rootScope.globalSettings;
      $scope.request.category = $routeParams.category || "";
      if (!$scope.viewmodel.id) {
        $scope.viewmodel.dataType = "Text";
        $scope.viewmodel.specificulture =
          $rootScope.globalSettings.defaultCulture;
      }
      if (!$scope.viewmodel.category) {
        $scope.viewmodel.category = "Site";
      }
    };
    $scope.saveSuccessCallback = function () {
      apiService.getAllSettings().then(function () {
        // $location.url($scope.referrerUrl);
        $rootScope.isBusy = false;
        $scope.$apply();
      });
    };
    $scope.removeCallback = function () {
      apiService.getAllSettings().then(function () {
        $location.url($scope.referrerUrl);
      });
    };

    $scope.generateName = function () {
      $scope.viewmodel.keyword = $rootScope.generateKeyword(
        $scope.viewmodel.keyword,
        "_",
        true
      );
    };
  },
]);

"use strict";
app.factory("LocalizeService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("language");

    var _uploadLanguage = async function (languageFile) {
      //var container = $(this).parents('.model-language').first().find('.custom-file').first();
      if (languageFile.file !== undefined && languageFile.file !== null) {
        // Create FormData object
        var files = new FormData();

        // Looping over all files and add it to FormData object
        files.append(languageFile.file.name, languageFile.file);

        // Adding one more key to FormData object
        files.append("fileFolder", languageFile.folder);
        files.append("title", languageFile.title);
        files.append("description", languageFile.description);

        var req = {
          url: this.prefixUrl + "/upload",
          type: "POST",
          headers: {},
          contentType: false, // Not to set any content header
          processData: false, // Not to process data
          data: files,
        };

        return await apiService.sendRequest(req);
      }
    };
    serviceFactory.uploadLanguage = _uploadLanguage;
    return serviceFactory;
  },
]);

"use strict";
app.controller("loginController", [
  "$rootScope",
  "$scope",
  "ngAppSettings",
  "$location",
  "AuthService",
  "ngAppSettings",
  function (
    $rootScope,
    $scope,
    ngAppSettings,
    $location,
    authService,
    ngAuthSettings
  ) {
    if (
      authService.authentication &&
      authService.authentication.isAuth &&
      authService.authentication.isAdmin
    ) {
      authService.referredUrl = $location.path();
      $location.path("/admin");
    }

    $scope.pageClass = "page-login";

    $scope.loginData = {
      username: "",
      password: "",
      rememberme: true,
    };

    $scope.message = "";
    $scope.$on("$viewContentLoaded", function () {
      $rootScope.isBusy = false;
    });
    $scope.login = async function () {
      if (authService.referredUrl === "/init/login") {
        authService.referredUrl = "/admin";
      }
      $rootScope.isBusy = true;
      var result = await authService.login($scope.loginData);
      if (result.success) {
        if ($routeParams.ReturnUrl) {
          window.top.location = $routeParams.ReturnUrl;
        } else if (
          document.referrer &&
          document.referrer.indexOf("init") === -1
        ) {
          window.top.location = document.referrer;
        } else {
          window.top.location = "/";
        }
      }
      $rootScope.isBusy = false;
      $scope.$apply();
    };

    $scope.authExternalProvider = function (provider) {
      var redirectUri =
        location.protocol + "//" + location.host + "/authcomplete.html";

      var externalProviderUrl =
        ngAuthSettings.apiServiceBaseUri +
        "api/Account/ExternalLogin?provider=" +
        provider +
        "&response_type=token&client_id=" +
        ngAuthSettings.clientId +
        "&redirect_uri=" +
        redirectUri;
      window.$windowScope = $scope;

      var oauthWindow = window.open(
        externalProviderUrl,
        "Authenticate Account",
        "location=0,status=0,width=600,height=750"
      );
    };

    $scope.authCompletedCB = function (fragment) {
      $scope.$apply(function () {
        if (fragment.haslocalaccount === "False") {
          authService.logOut();

          authService.externalAuthData = {
            provider: fragment.provider,
            username: fragment.external_user_name,
            externalAccessToken: fragment.external_access_token,
          };

          $location.path("/associate");
        } else {
          //Obtain access token and redirect to orders
          var externalData = {
            provider: fragment.provider,
            externalAccessToken: fragment.external_access_token,
          };
          authService.obtainAccessToken(externalData).then(
            function (response) {
              $location.path("/orders");
            },
            function (err) {
              $scope.message = err.error_description;
            }
          );
        }
      });
    };
  },
]);

"use strict";
app.controller("MixDatabaseController", [
  "$scope",
  "$rootScope",
  "$location",
  "ngAppSettings",
  "$routeParams",
  "RestMixDatabaseDataPortalService",
  "RestMixDatabaseColumnPortalService",
  "RestMixDatabasePortalService",
  "RestMixDatabaseContextService",
  function (
    $scope,
    $rootScope,
    $location,
    ngAppSettings,
    $routeParams,
    databaseDataService,
    databaseColumnService,
    databaseService,
    dbContextService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      databaseService
    );
    $scope.defaultAttr = null;
    $scope.actions = ["Delete"];
    $scope.viewmodelType = "mix-database";
    // $scope.request.selects = 'id,title,name,createdDateTime';
    $scope.orders = [
      { title: "Id", value: "Id" },
      { title: "Name", value: "Name" },
      { title: "Created Date", value: "CreatedDateTime" },
    ];
    $scope.request.orderBy = "CreatedDateTime";
    $scope.request.columns = "id,displayName,systemName,type,createdDatetime";
    $scope.request.searchColumns = "displayName,systemName";
    $scope.saveDatabase = function () {
      $scope.save($scope.viewmodel);
    };

    $scope.getSingleSuccessCallback = async function () {
      $scope.viewmodel.mixDatabaseContextId = $routeParams.mixDatabaseContextId;
      $scope.viewmodel.namingConvention =
        $routeParams.namingConvention || "TitleCase";
      if ($scope.viewmodel.mixDatabaseContextId) {
        var resp = await dbContextService.getSingle([
          $scope.viewmodel.mixDatabaseContextId,
        ]);
        if (resp.success) {
          $scope.dbContext = resp.data;
        }
      }
      if (!$scope.defaultAttr) {
        var getDefaultAttr = await databaseColumnService.getDefault();
        if (getDefaultAttr.success) {
          $scope.defaultAttr = getDefaultAttr.data;
          $scope.defaultAttr.options = [];
        }
        $scope.$apply();
      }
    };
    $scope.migrate = async function () {
      if ($scope.viewmodel.id) {
        $rootScope.isBusy = true;
        var result = await databaseService.migrate($scope.viewmodel);
        if (result.success) {
          $rootScope.showMessage(
            "Please restart pool to apply new db schema",
            "warning"
          );
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(["Cannot migrate database"]);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.backup = async function () {
      if ($scope.viewmodel.id) {
        $rootScope.isBusy = true;
        var result = await databaseService.backup($scope.viewmodel);
        if (result.success) {
          $rootScope.showMessage(
            `Backup ${$scope.viewmodel.systemName} is queued`,
            "success"
          );
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(["Cannot backup database"]);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.restore = async function () {
      if ($scope.viewmodel.id) {
        $rootScope.isBusy = true;
        var result = await databaseService.restore($scope.viewmodel);
        if (result.success) {
          $rootScope.showMessage(
            `Restore ${$scope.viewmodel.systemName} is queued`,
            "success"
          );
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(["Cannot restore database"]);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.updateSchema = async function () {
      if ($scope.viewmodel.id) {
        $rootScope.isBusy = true;
        var result = await databaseService.updateSchema($scope.viewmodel);
        if (result.success) {
          $rootScope.showMessage(
            "Please restart pool to apply new db schema",
            "warning"
          );
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(["Cannot update database"]);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };

    $scope.back = function () {
      window.history.back();
    };
  },
]);

"use strict";
app.controller("MixDatabaseDataController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "RestMixDatabasePortalService",
  "MixDbService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    databaseService,
    mixDbService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      mixDbService
    );
    $scope.queries = {};
    $scope.data = null;
    $scope.exportAll = true;
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.filterType = "contain";
    $scope.defaultId = "default";
    $scope.importFile = {
      file: null,
      fullPath: "",
      folder: "import",
      title: "",
      description: "",
    };
    $scope.initRouteParams = async () => {
      $scope.requestKey = `request${$rootScope.generateKeyword(
        $location.$$path,
        "_"
      )}_${$routeParams.mixDatabaseId}`;
      $scope.request = $rootScope.getRequest($scope.requestKey);
      if ($routeParams.mixDatabaseId) {
        $scope.request.mixDatabaseId = $routeParams.mixDatabaseId;
      }
      if ($routeParams.queryFields) {
        if (Array.isArray($routeParams.queryFields)) {
          angular.forEach($routeParams.queryFields, (e) => {
            let val = e.split(":");
            $scope.queries[val[0]] = val[1];
          });
        } else {
          let val = $routeParams.queryFields.split(":");
          $scope.queries[val[0]] = val[1];
        }
        $scope.request.mixDatabaseId = $routeParams.mixDatabaseId;
      }
      $scope.request.mixDatabaseName = $routeParams.mixDatabaseName;

      await $scope.loadMixDb();

      $scope.request.filterType = $routeParams.filterType || "contain";
      $scope.request.compareType = $routeParams.compareType || "or";

      $scope.mixDatabaseId = $routeParams.mixDatabaseId;
      $scope.mixDatabaseName = $routeParams.mixDatabaseName;
      $scope.mixDatabaseTitle = $routeParams.mixDatabaseTitle;
      $scope.guidParentId = $routeParams.guidParentId;
      $scope.parentType = $routeParams.parentType;
      $scope.request.mixDatabaseName = $routeParams.mixDatabaseName;
      $scope.request.isGroup = $routeParams.isGroup || false;
      $scope.dataUrl = `/admin/mix-database-data/list?mixDatabaseId=${$scope.mixDatabaseId}&mixDatabaseName=${$scope.mixDatabaseName}&mixDatabaseTitle=${$scope.mixDatabaseTitle}`;
      if ($routeParams.backUrl) {
        $scope.backUrl = decodeURIComponent($routeParams.backUrl);
      }
      if ($routeParams.dataContentId != $scope.defaultId) {
        $scope.dataContentId = $routeParams.dataContentId;
      }

      if ($scope.parentId && $scope.parentType) {
        $scope.refDataModel = {
          parentId: $scope.parentId,
          parentType: $scope.parentType,
        };
      }
    };
    $scope.loadMixDb = async () => {
      var getDatabase = await databaseService.getByName(
        $routeParams.mixDatabaseName
      );
      if (getDatabase.success) {
        $scope.database = getDatabase.data;
        $scope.fieldNames = {
          id: $scope.database.namingConvention == "TitleCase" ? "Id" : "id",
          parentId:
            $scope.database.namingConvention == "TitleCase"
              ? "ParentId"
              : "parent_id",
          parentDatabaseName:
            $scope.database.namingConvention == "TitleCase"
              ? "ParentDatabaseName"
              : "parent_database_name",
          childId:
            $scope.database.namingConvention == "TitleCase"
              ? "ChildId"
              : "child_id",
          childDatabaseName:
            $scope.database.namingConvention == "TitleCase"
              ? "ChildDatabaseName"
              : "child_database_name",
          createdDateTime:
            $scope.database.namingConvention == "TitleCase"
              ? "CreatedDateTime"
              : "created_date_time",
          lastModified:
            $scope.database.namingConvention == "TitleCase"
              ? "LastModified"
              : "last_modified",
          tenantId:
            $scope.database.namingConvention == "TitleCase"
              ? "MixTenantId"
              : "mix_tenant_id",
          createdBy:
            $scope.database.namingConvention == "TitleCase"
              ? "CreatedBy"
              : "created_by",
          modifiedBy:
            $scope.database.namingConvention == "TitleCase"
              ? "ModifiedBy"
              : "modified_by",
          priority:
            $scope.database.namingConvention == "TitleCase"
              ? "Priority"
              : "priority",
          status:
            $scope.database.namingConvention == "TitleCase"
              ? "Status"
              : "status",
          isDeleted:
            $scope.database.namingConvention == "TitleCase"
              ? "IsDeleted"
              : "is_deleted",
        };
        $scope.arrOrderBy = [];
        Object.keys($scope.fieldNames).forEach(function (key, index) {
          $scope.arrOrderBy.push($scope.fieldNames[key]);
        });
        $scope.$apply();
      }
    };
    $scope.init = async function () {
      $scope.initRouteParams();
      mixDbService.initDbName($scope.request.mixDatabaseName);
    };
    $scope.saveSuccess = function (data) {
      if ($scope.backUrl) {
        $location.url($scope.backUrl);
      } else {
        $location.url(
          `/admin/mix-database-data/details?dataContentId=${data}&mixDatabaseTitle=${
            $scope.mixDatabaseTitle
          }&backUrl=${encodeURIComponent($scope.dataUrl)}`
        );
      }
    };
    $scope.selectData = function () {
      if ($scope.selectedList.data.length) {
        $scope.viewmodel = $scope.selectedList.data[0];
      }
    };

    $scope.preview = function (item) {
      item.editUrl = "/admin/post/details/" + item.id;
      $rootScope.preview("post", item, item.title, "modal-lg");
    };
    $scope.edit = function (data) {
      $rootScope.goToPath(
        `/admin/mix-database-data/details?dataContentId=${data.id}&mixDatabaseName=${$scope.mixDatabaseName}&mixDatabaseTitle=${$scope.mixDatabaseTitle}`
      );
    };
    $scope.remove = function (data) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [data.id],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeConfirmed = async function (dataContentId) {
      $rootScope.isBusy = true;
      var result = await mixDbService.delete([dataContentId]);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.import = async function () {
      if ($scope.validateDataFile()) {
        $rootScope.isBusy = true;
        var form = document.getElementById("form-portal");
        var result = await mixDbService.import(
          form["import-data-inp"].files[0]
        );
        if (result.success) {
          $rootScope.showMessage("success", "success");
          $rootScope.isBusy = false;
          $scope.getList(0);
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.validateDataFile = function () {
      if (!$scope.importFile.file) {
        $rootScope.showMessage("Please choose data file", "danger");
        return false;
      } else {
        return true;
      }
    };
    $scope.sendMail = function (data) {
      var email = "";
      angular.forEach(data.values, function (e) {
        if (e.mixDatabaseColumnName == "email") {
          email = e.stringValue;
        }
      });
      $rootScope.showConfirm(
        $scope,
        "sendMailConfirmed",
        [data],
        null,
        "Send mail",
        "Are you sure to send mail to " + email
      );
    };
    $scope.sendMailConfirmed = async function (data) {
      $rootScope.isBusy = true;
      $rootScope.isBusy = true;
      var result = await service.sendMail([data.id]);
      if (result.success) {
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.saveOthers = async function () {
      var response = await service.saveList($scope.others);
      if (response.success) {
        $scope.getList();
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.selectImportFile = function (files) {
      if (files !== undefined && files !== null && files.length > 0) {
        const file = files[0];
        $scope.importFile.folder = "imports";
        $scope.importFile.title = $scope.mixDatabaseName;
        $scope.importFile.description = $scope.mixDatabaseName + "'s data";
        $scope.importFile.file = file;

        // if ($scope.auto=='true') {
        //     $scope.uploadFile(file);
        // }
        // else {
        //     $scope.getBase64(file);
        // }
      }
    };
    $scope.getList = async function (pageIndex) {
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      if ($scope.request.fromDate !== null) {
        var df = new Date($scope.request.fromDate);
        $scope.request.fromDate = df.toISOString();
      }
      if ($scope.request.toDate !== null) {
        var dt = new Date($scope.request.toDate);
        $scope.request.toDate = dt.toISOString();
      }
      $scope.request.queries = [];

      Object.keys($scope.queries).forEach((e) => {
        if ($scope.queries[e]) {
          $scope.request.queries.push({
            fieldName: e,
            value: $scope.queries[e],
          });
        }
      });
      $rootScope.isBusy = true;
      var resp = await mixDbService.filter($scope.request);
      if (resp && resp.success) {
        $scope.data = resp.data;
        $.each($scope.data.items, function (i, data) {
          $.each($scope.activeddata, function (i, e) {
            if (e.dataContentId === data.id) {
              data.isHidden = true;
            }
          });
        });
        if ($scope.getListSuccessCallback) {
          $scope.getListSuccessCallback();
        }
        $("html, body").animate(
          {
            scrollTop: "0px",
          },
          500
        );
        if (!resp.data || !resp.data.items.length) {
          $scope.queries = {};
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        if ($scope.getListFailCallback) {
          $scope.getListFailCallback();
        }
        $scope.queries = {};
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.export = async function (pageIndex, exportAll) {
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      if ($scope.request.fromDate !== null) {
        var df = new Date($scope.request.fromDate);
        $scope.request.fromDate = df.toISOString();
      }
      if ($scope.request.toDate !== null) {
        var dt = new Date($scope.request.toDate);
        $scope.request.toDate = dt.toISOString();
      }
      var query = {};
      if ($routeParams.mixDatabaseId) {
        $scope.request.mixDatabaseId = $routeParams.mixDatabaseId;
      }
      $scope.request.mixDatabaseName = $routeParams.mixDatabaseName;
      $scope.request.filterType = $routeParams.filterType || "contain";
      $scope.request.queries = [];

      Object.keys($scope.queries).forEach((e) => {
        if ($scope.queries[e]) {
          $scope.request.queries.push({
            fieldName: e,
            value: $scope.queries[e],
          });
        }
      });
      var request = angular.copy($scope.request);
      $scope.exportAll = $scope.exportAll;
      if (exportAll) {
        request.pageSize = 10000;
        request.pageIndex = 0;
      }
      $rootScope.isBusy = true;
      var resp = await mixDbService.export(request);
      if (resp && resp.success) {
        if (resp.data) {
          window.top.location = resp.data.webPath;
        } else {
          $rootScope.showMessage("Nothing to export");
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.migrate = async function () {
      if ($routeParams.mixDatabaseId) {
        $rootScope.isBusy = true;
        var result = await service.migrate($routeParams.mixDatabaseId);
        $scope.handleResult(result);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.controller("ModuleController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "ModuleRestService",
  "SharedModuleDataService",
  "RestMixDatabaseDataPortalService",
  "RestMixDatabaseColumnPortalService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    moduleServices,
    moduleDataService,
    dataService,
    columnService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      moduleServices,
      "product"
    );
    $scope.request.culture = $rootScope.globalSettings.defaultCulture;
    $scope.viewmodelType = "module";
    $scope.contentUrl = "";
    $scope.getSingleSuccessCallback = function () {
      $scope.loadAdditionalData();

      if ($scope.viewmodel.id > 0) {
        // module => list post or list product
        if ($scope.viewmodel.type.localeCompare("ListPost") == 0) {
          $scope.contentUrl = "/admin/module-post/list/" + $scope.viewmodel.id;
        } else if ($scope.viewmodel.type.localeCompare("Data") == 0) {
          $scope.contentUrl = "/admin/module-data/list/" + $scope.viewmodel.id;
        }
      }
      if ($scope.viewmodel.sysCategories) {
        angular.forEach($scope.viewmodel.sysCategories, function (e) {
          e.attributeData.obj.isActived = true;
        });
      }

      if ($scope.viewmodel.sysTags) {
        angular.forEach($scope.viewmodel.sysTags, function (e) {
          e.attributeData.obj.isActived = true;
        });
      }

      if ($routeParams.template) {
        $scope.viewmodel.view = $rootScope.findObjectByKey(
          $scope.viewmodel.templates,
          "fileName",
          $routeParams.template
        );
      }
    };
    $scope.getListByType = async function (pageIndex) {
      $scope.request.query = "?type=" + $scope.type;
      await $scope.getList(pageIndex);
    };
    $scope.defaultAttr = {
      name: "",
      options: [],
      priority: 0,
      dataType: 7,
      isGroupBy: false,
      isSelect: false,
      isDisplay: true,
      width: 3,
    };
    $scope.type = "-1";

    $scope.localizeSettings = $rootScope.globalSettings;
    $scope.viewmodel = null;
    $scope.editDataUrl = "";

    $scope.loadModuleDatas = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.dataColumns = [];
      var response = await moduleServices.getSingle([id]);
      if (response.success) {
        $scope.viewmodel = response.data;
        $scope.editDataUrl =
          "/admin/module-data/details/" + $scope.viewmodel.id;
        $scope.loadMoreModuleDatas();
        angular.forEach($scope.viewmodel.columns, function (e, i) {
          if (e.isDisplay) {
            $scope.dataColumns.push({
              title: e.title,
              name: e.name,
              filter: true,
              type: 0, // string - ngAppSettings.dataTypes[0]
            });
          }
        });
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.loadMoreModuleDatas = async function (pageIndex) {
      $scope.request.query = "&moduleContentId=" + $scope.viewmodel.id;
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      if ($scope.request.fromDate !== null) {
        var d = new Date($scope.request.fromDate);
        $scope.request.fromDate = d.toISOString();
      }
      if ($scope.request.toDate !== null) {
        var d = new Date($scope.request.toDate);
        $scope.request.toDate = d.toISOString();
      }
      $rootScope.isBusy = true;
      var resp = await moduleDataService.getModuleDatas($scope.request);
      if (resp && resp.success) {
        $scope.viewmodel.data = resp.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.exportModuleData = async function (pageIndex) {
      $scope.request.query = "&moduleContentId=" + $scope.viewmodel.id;
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      if ($scope.request.fromDate !== null) {
        var d = new Date($scope.request.fromDate);
        $scope.request.fromDate = d.toISOString();
      }
      if ($scope.request.toDate !== null) {
        var d = new Date($scope.request.toDate);
        $scope.request.toDate = d.toISOString();
      }
      $rootScope.isBusy = true;
      var resp = await moduleDataService.exportModuleData($scope.request);
      if (resp && resp.success) {
        window.top.location = resp.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.removeData = function (id) {
      if ($scope.viewmodel) {
        $rootScope.showConfirm(
          $scope,
          "removeDataConfirmed",
          [id],
          null,
          "Remove Data",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      }
    };

    $scope.removeDataConfirmed = async function (id) {
      $rootScope.isBusy = true;
      var result = await moduleDataService.removeModuleData(id);
      if (result.success) {
        $scope.loadModuleDatas();
      } else {
        $rootScope.showMessage("failed");
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.updateModuleDataField = async function (item, propertyName) {
      var result = await moduleDataService.saveFields(
        item.id,
        propertyName,
        item[propertyName]
      );
      if (result.success) {
        $scope.loadModuleDatas();
      } else {
        $rootScope.showMessage("failed");
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.updateDataInfos = async function (items) {
      $rootScope.isBusy = true;
      var resp = await moduleDataService.updateInfos(items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.saveSuccessCallback = async function () {
      let result = await $scope.saveAdditionalData();
      if (result) {
        $rootScope.showMessage("Saved", "success");
      }
    };
    $scope.saveAdditionalData = async () => {
      if ($scope.additionalData) {
        $scope.additionalData.isClone = $scope.viewmodel.isClone;
        $scope.additionalData.cultures = $scope.viewmodel.cultures;
        $scope.additionalData.intParentId = $scope.viewmodel.id;
        $scope.additionalData.parentType = "Module";
        let result = await dataService.save($scope.additionalData);
        if (!result.success) {
          $rootScope.showErrors(result.errors);
        }
        return result.success;
      }
    };

    $scope.saveColumns = async function () {
      let result = await columnService.saveMany($scope.additionalData.columns);
      if (result.success) {
        $rootScope.showMessage("success", "success");
      }
    };

    $scope.loadPosts = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.postRequest.query += "&page_id=" + id;
      var response = await pagePostRestService.getList($scope.postRequest);
      if (response.success) {
        $scope.pageData.posts = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.selectedCol = null;
    $scope.dragoverCallback = function (index, item, external, type) {
      //console.log('drop ', index, item, external, type);
    };
    $scope.insertColCallback = function (index, item, external, type) {};
    $scope.removeAttribute = function (attr, index) {
      $rootScope.showConfirm(
        $scope,
        "removeAttributeConfirmed",
        [attr, index],
        null,
        "Remove Field",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };
    $scope.removeAttributeConfirmed = function (attr, index) {
      $scope.viewmodel.attributeData.data.values.splice(index, 1);
    };
    $scope.loadAdditionalData = async function () {
      const obj = {
        parentType: "Module",
        parentId: $scope.viewmodel.id,
        databaseName: "sysModuleColumn",
      };
      const getData = await dataService.getAdditionalData(obj);
      if (getData.success) {
        $scope.additionalData = getData.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("ModuleRestService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-module-content");
    // Define more service methods here
    return serviceFactory;
  },
]);

"use strict";
app.controller("ModuleDataController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "ModuleDataRestService",
  "ModuleRestService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    moduleService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.request.culture = $rootScope.globalSettings.defaultCulture;
    // $scope.request.orderBy = "Priority";
    // $scope.request.direction = "Asc";
    $scope.cates = ["Site", "System"];
    $scope.others = [];
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.moduleContentId = $routeParams.moduleContentId;
    $scope.backUrl = `/admin/module-data/list/${$scope.moduleContentId}`;
    $scope.module = null;
    $scope.columns = [];
    $scope.editDataUrl = "/admin/module-data/details/" + $scope.moduleContentId;
    $scope.init = async function () {
      $scope.id = $routeParams.id;
    };
    $scope.initList = async function () {
      $scope.id = $routeParams.id;
      if (!$scope.module) {
        var getModule = await moduleService.getSingle([$scope.moduleContentId]);
        if (getModule.success) {
          $scope.module = getModule.data;
          $scope.columns = $scope.module.columns;
          $scope.$apply();
        }
      }
    };
    $scope.getList = async function () {
      $rootScope.isBusy = true;
      $scope.request.moduleContentId = $scope.moduleContentId;
      var response = await service.getList($scope.request);
      if (response.success) {
        $scope.data = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.export = async function () {
      $rootScope.isBusy = true;
      $scope.request.moduleContentId = $scope.moduleContentId;
      var response = await service.export($scope.request);
      if (response.success) {
        window.top.location = response.data.webPath;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.getSingle = async function () {
      $rootScope.isBusy = true;
      var resp = await service.getSingle($routeParams.id, "portal");
      if (resp && resp.success) {
        $scope.activedModuleData = resp.data;
        $rootScope.initEditor();
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.remove = function (dataContentId) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [dataContentId],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeConfirmed = async function (dataContentId) {
      $rootScope.isBusy = true;
      var result = await service.delete([dataContentId]);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.removeCallback = function () {};

    $scope.saveOthers = async function () {
      var response = await service.saveList($scope.others);
      if (response.success) {
        $scope.getList();
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("ModuleDataRestService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-module-data");
    // Define more service methods here

    var _initForm = async function (moduleContentId) {
      var url = `${this.prefixUrl}/init-form/${moduleContentId}`;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };
    serviceFactory.initForm = _initForm;
    return serviceFactory;
  },
]);

"use strict";
app.controller("MixDatabaseContextController", [
  "$scope",
  "$rootScope",
  "$location",
  "ngAppSettings",
  "$routeParams",
  "RestMixDatabaseContextService",
  function (
    $scope,
    $rootScope,
    $location,
    ngAppSettings,
    $routeParams,
    mixdbContextService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      mixdbContextService
    );
    $scope.namingConventions = ["TitleCase", "SnakeCase"];
    $scope.defaultAttr = null;
    $scope.databaseProvider = ["MySQL", "PostgreSQL", "SQLITE", "SQLSERVER"];
    $scope.actions = ["Delete"];
    // $scope.request.selects = 'id,title,name,createdDateTime';
    $scope.orders = [
      { title: "Id", value: "Id" },
      { title: "Name", value: "DisplayName" },
      { title: "Created Date", value: "CreatedDateTime" },
    ];
    $scope.request.orderBy = "CreatedDateTime";
    $scope.request.columns = "id,displayName,systemName,type,createdDatetime";
    $scope.request.searchColumns = "displayName,systemName";
    $scope.saveDatabase = function () {
      $scope.save($scope.viewmodel);
    };
    $scope.migrate = async function () {
      $rootScope.isBusy = true;
      var resp = await mixdbContextService.migrate($scope.viewmodel);
      if (resp.success) {
        $rootScope.showMessage("success", "success");
      } else if (resp) {
        $rootScope.showErrors(resp.errors);
      }
      $rootScope.isBusy = false;
      $scope.$apply();
    };
    $scope.generateName = function () {
      $scope.viewmodel.systemName = $rootScope.generateKeyword(
        $scope.viewmodel.displayName,
        "_",
        true,
        true
      );
    };
    $scope.getSingleSuccessCallback = async function () {};
  },
]);

"use strict";
app.factory("RestMixDatabaseContextService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mixdb-context");

    var _getByName = async function (name) {
      var url = `${this.prefixUrl}/get-by-name/${name}`;
      var req = {
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };
    var _migrate = async function (dbContext) {
      var url = `${this.prefixUrl}/migrate`;
      var req = {
        method: "POST",
        url: url,
        data: dbContext,
      };
      return await this.getRestApiResult(req);
    };
    serviceFactory.getByName = _getByName;
    serviceFactory.migrate = _migrate;
    return serviceFactory;
  },
]);

"use strict";
app.controller("ModuleGalleryController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "ModuleGalleryService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    apiService,
    commonService
  ) {
    BaseCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.cates = ["Site", "System"];
    $scope.others = [];
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.moduleContentId = $routeParams.id;
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.translate = $rootScope.translate;
    $scope.moduleContentId = $routeParams.id;
    $scope.getList = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.moduleContentId = $routeParams.id;
      $scope.request.query = "&moduleContentId=" + id;
      $scope.canDrag =
        $scope.request.orderBy !== "Priority" ||
        $scope.request.direction !== "0";
      var response = await service.getList($scope.request);
      if (response.success) {
        $scope.data = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.remove = function (moduleContentId, postId) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [moduleContentId, postId],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeConfirmed = async function (moduleContentId, postId) {
      $rootScope.isBusy = true;
      var result = await service.delete(moduleContentId, postId);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showMessage("failed");
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.removeCallback = function () {};

    $scope.saveOthers = async function () {
      var response = await service.saveList($scope.others);
      if (response.success) {
        $scope.getList();
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.updateInfos = async function (index) {
      $scope.data.items.splice(index, 1);
      $rootScope.isBusy = true;
      var startIndex = $scope.data.items[0].priority - 1;
      for (var i = 0; i < $scope.data.items.length; i++) {
        $scope.data.items[i].priority = startIndex + i + 1;
      }
      var resp = await service.updateInfos($scope.data.items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("ModuleGalleryService", [
  "$rootScope",
  "ApiService",
  "CommonService",
  "BaseService",
  function ($rootScope, apiService, commonService, baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("module-post");
    var _delete = async function (moduleContentId, postId) {
      var url = this.prefixUrl + "/delete/" + moduleContentId + "/" + postId;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };
    var _updateInfos = async function (modules) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-infos",
        data: JSON.stringify(modules),
      };
      return await apiService.sendRequest(req);
    };
    serviceFactory.delete = _delete;
    serviceFactory.updateInfos = _updateInfos;
    return serviceFactory;
  },
]);

"use strict";
app.controller("ModulePostController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "ModulePostRestService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    commonService
  ) {
    BaseCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.request.culture = $rootScope.globalSettings.defaultCulture;
    $scope.cates = ["Site", "System"];
    $scope.others = [];
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.translate = $rootScope.translate;
    $scope.moduleIds = $routeParams.moduleIds || $routeParams.id;
    $scope.pageIds = $routeParams.page_ids;
    $scope.type = $routeParams.type;
    $scope.template = $routeParams.template || "";

    $scope.init = function () {
      $scope.createUrl = `/admin/post/create?page_ids=${$scope.pageIds}&moduleIds=${$scope.moduleIds}&type=${$scope.type}&template=${$scope.template}`;
      $scope.getList();
    };
    $scope.getList = async function (pageIndex) {
      $rootScope.isBusy = true;
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      var id = $routeParams.id;
      $scope.moduleContentId = $routeParams.id;
      $scope.request.parentId = id;
      $scope.canDrag =
        $scope.request.orderBy !== "Priority" ||
        $scope.request.direction !== "0";
      var response = await service.search($scope.request);
      if (response.success) {
        $scope.data = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.preview = function (item) {
      item.editUrl = "/admin/post/details/" + item.id;
      $rootScope.preview("post", item, item.title, "modal-lg");
    };
    $scope.remove = function (id) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [id],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeConfirmed = async function (id) {
      $rootScope.isBusy = true;
      var result = await service.delete(id);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showMessage("failed");
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.removeCallback = function () {};

    $scope.saveOthers = async function () {
      var response = await service.saveList($scope.others);
      if (response.success) {
        $scope.getList();
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.updateInfos = async function (index) {
      $scope.data.items.splice(index, 1);
      $rootScope.isBusy = true;
      var startIndex = $scope.data.items[0].priority - 1;
      for (var i = 0; i < $scope.data.items.length; i++) {
        $scope.data.items[i].priority = startIndex + i + 1;
      }
      var resp = await service.updateInfos($scope.data.items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("ModulePostRestService", [
  "$rootScope",
  "ApiService",
  "CommonService",
  "BaseRestService",
  function ($rootScope, apiService, commonService, baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("module-post");

    var _search = async function (objData) {
      var data = serviceFactory.parseQuery(objData);
      var url = this.prefixUrl;

      if (data) {
        url += "/search?";
        url = url.concat(data);
      }
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };

    var _delete = async function (id) {
      var url = this.prefixUrl + "/" + id;
      var req = {
        method: "DELETE",
        url: url,
      };
      return await apiService.sendRequest(req);
    };
    var _updateInfos = async function (modules) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-infos",
        data: JSON.stringify(modules),
      };
      return await apiService.sendRequest(req);
    };
    serviceFactory.search = _search;
    serviceFactory.delete = _delete;
    serviceFactory.updateInfos = _updateInfos;
    return serviceFactory;
  },
]);

"use strict";
app.controller("PageController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "PageRestService",
  "PagePostRestService",
  "UrlAliasService",
  "RestMixDatabasePortalService",
  "RestMixDatabaseDataPortalService",
  "RestMixDatabaseColumnPortalService",
  "MixDbService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    service,
    pagePostRestService,
    urlAliasService,
    databaseService,
    dataService,
    columnService,
    mixDbService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.request.culture = $rootScope.globalSettings.defaultCulture;
    var pageModuleService = $rootScope.getRestService("mix-page-module");
    $scope.viewmodelType = "page";
    $scope.request.query = "level=0";
    $scope.pageType = {};
    $scope.pageTypes = $rootScope.globalSettings.pageTypes;
    $scope.selectedCategories = [];
    $scope.selectedTags = [];
    $scope.selectedModules = [];
    $scope.pageData = {
      posts: [],
      products: [],
      data: [],
    };
    $scope.request.columns = [
      "id",
      "title",
      "createdDateTime",
      "type",
      "image",
    ];
    $scope.additionalData = null;
    $scope.temp = null;
    $scope.postRequest = angular.copy(ngAppSettings.request);
    $scope.additionalDatabaseRequest = angular.copy(ngAppSettings.request);
    ($scope.additionalDatabaseRequest.searchColumns = "Type"),
      ($scope.additionalDatabaseRequest.searchMethod = "Equal"),
      ($scope.additionalDatabaseRequest.keyword = "AdditionalData");
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.loadPosts = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.postRequest.query += "&page_id=" + id;
      var response = await pagePostRestService.getList($scope.postRequest);

      if (response.success) {
        $scope.pageData.posts = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.$watch("additionalDatabase", function (newValue, oldValue) {
      console.log(newValue, oldValue);
    });
    $scope.init = async function () {
      await $scope.loadAdditionalDatabases();
      await $scope.getSingle();
    };
    $scope.initList = function () {
      $scope.additionalDatabases.splice(0, 0, {
        systemName: "",
        displayName: "All",
        id: 0,
      });
      $scope.getList();
    };
    $scope.getSingleSuccessCallback = function () {
      mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
      $scope.additionalDatabase = $rootScope.findObjectByKey(
        $scope.additionalDatabases,
        "systemName",
        $scope.viewmodel.mixDatabaseName
      );
      if ($scope.additionalDatabase) {
        $scope.loadAdditionalData();
      }
      if ($routeParams.template) {
        $scope.viewmodel.view = $rootScope.findObjectByKey(
          $scope.viewmodel.templates,
          "fileName",
          $routeParams.template
        );
      }
      $scope.$apply();
    };
    $scope.getListSuccessCallback = function () {
      $scope.canDrag =
        $scope.request.orderBy !== "Priority" ||
        $scope.request.direction !== "0";
    };
    $scope.loadAdditionalData = async function () {
      $scope.loadingData = true;
      const getData = await mixDbService.getSingleByParent(
        "Page",
        $scope.viewmodel.id
      );
      if (getData.success) {
        $scope.additionalData = getData.data;
        $scope.loadingData = false;
      } else {
        $scope.additionalData = {
          parentType: "Page",
        };
        $scope.loadingData = false;
      }
      $scope.$apply();
    };
    $scope.showChilds = function (id) {
      $("#childs-" + id).toggleClass("collapse");
    };
    $scope.updateInfos = async function (index) {
      $scope.data.items.splice(index, 1);
      $rootScope.isBusy = true;
      var startIndex = $scope.data.items[0].priority - 1;
      for (var i = 0; i < $scope.data.items.length; i++) {
        $scope.data.items[i].priority = startIndex + i + 1;
      }
      var resp = await service.updateInfos($scope.data.items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.selPageType = function () {
      $scope.request.query = "level=0&pageType=" + $scope.pageType;
      $scope.getList();
    };
    $scope.selectModule = (associations) => {
      if (associations) {
        $scope.selectedModules = associations;
      }
    };
    $scope.goUp = async function (items, index) {
      items[index].priority -= 1;
      items[index - 1].priority += 1;
    };

    $scope.goDown = async function (items, index) {
      items[index].priority += 1;
      items[index - 1].priority -= 1;
    };

    $scope.saveSuccessCallback = async function () {
      var result = await $scope.savePageModules();
      result = result && (await $scope.saveAdditionalData());
      if (result) {
        $rootScope.showMessage("Saved", "success");
      }
      $rootScope.isBusy = false;
      $scope.$apply();
    };
    $scope.loadAdditionalDatabases = async function () {
      let getTypes = await databaseService.getList(
        $scope.additionalDatabaseRequest
      );
      if (getTypes.success) {
        $scope.additionalDatabases = getTypes.data.items;
        $scope.additionalDatabases.splice(0, 0, {
          systemName: null,
          displayName: "All",
          id: 0,
        });
        if ($scope.request.mixDatabaseName) {
          $scope.additionalDatabase = $rootScope.findObjectByKey(
            $scope.additionalDatabases,
            "mixDatabaseName",
            $scope.request.mixDatabaseName
          );
        }
        $scope.request.mixDatabaseName = $routeParams.type || "";
        $scope.$apply();
      }
    };
    $scope.onSelectType = async function () {
      if (
        $scope.viewmodel &&
        $scope.additionalDatabase &&
        $scope.additionalDatabase.systemName
      ) {
        $scope.viewmodel.mixDatabaseName = $scope.additionalDatabase.systemName;
        mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
        await $scope.loadAdditionalData();
      } else {
        $scope.viewmodel.mixDatabaseName = null;
        $scope.additionalData = null;
      }
      $scope.request.mixDatabaseName = $scope.additionalDatabase.systemName;
      $scope.createUrl = `/admin/page/create?type=${$scope.request.mixDatabaseName}`;
      if ($routeParams.template) {
        $scope.createUrl += `&template=${$routeParams.template}`;
      }
      if (
        $scope.additionalDatabase &&
        (!$scope.viewmodel || !$scope.viewmodel.id)
      ) {
        await $scope.getDefault($scope.request.mixDatabaseName);
      }
      if ($scope.pageName == "pageList") {
        await $scope.filter();
      }
    };
    $scope.getDefault = async function (type = null) {
      $rootScope.isBusy = true;
      type = type || $routeParams.type;
      var resp = await service.getDefault({
        type: type || "",
        template: $routeParams.template || "",
      });
      if (resp.success) {
        $scope.viewmodel = resp.data;
        mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
        if ($scope.getSingleSuccessCallback) {
          $scope.getSingleSuccessCallback();
        }

        // $scope.viewmodel.createdDateTime = Date.now();
        $scope.viewmodel.createdBy = $rootScope.authentication.username;

        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        if ($scope.getSingleFailCallback) {
          $scope.getSingleFailCallback();
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.saveAdditionalData = async () => {
      if ($scope.additionalDatabase.systemName && $scope.additionalData) {
        $scope.additionalData.isClone = $scope.viewmodel.isClone;
        $scope.additionalData.cultures = $scope.viewmodel.cultures;
        $scope.additionalData.intParentId = $scope.viewmodel.id;
        $scope.additionalData.parentType = "Page";
        let result = await dataService.save($scope.additionalData);
        if (!result.success) {
          $rootScope.showErrors(result.errors);
        }
        return result.success;
      }
    };
    $scope.savePageModules = async () => {
      angular.forEach($scope.selectedModules, (e) => {
        e.parentId = $scope.viewmodel.id;
      });
      var result = await pageModuleService.saveMany($scope.selectedModules);
      if (!result.success) {
        $rootScope.showErrors(result.errors);
      }
      return result.success;
    };
    $scope.saveColumns = async function () {
      let result = await columnService.saveMany($scope.additionalData.columns);
      if (result.success) {
        $rootScope.showMessage("success", "success");
      }
    };

    $scope.validate = async function () {
      return true;
      // Add default alias if create new page
      //   if (!$scope.viewmodel.id && !$scope.viewmodel.urlAliases.length) {
      //     // Ex: en-us/page-seo-name
      //     // await $scope.addAlias($scope.viewmodel.specificulture + '/' + $scope.viewmodel.seoName);
      //     return true;
      //   } else {
      //     return true;
      //   }
    };
    $scope.addAlias = async function (alias) {
      var getAlias = await urlAliasService.getDefault();
      if (getAlias.success) {
        if (alias) {
          getAlias.data.alias = alias;
        }
        $scope.viewmodel.urlAliases.push(getAlias.data);
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(getAlias.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.removeAliasCallback = async function (index) {
      $scope.viewmodel.urlAliases.splice(index, 1);
      $scope.$apply();
    };
  },
]);

"use strict";
app.factory("PageRestService", [
  "$rootScope",
  "ApiService",
  "CommonService",
  "BaseRestService",
  function ($rootScope, apiService, commonService, baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-page-content");
    var _updateInfos = async function (pages) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-infos",
        data: JSON.stringify(pages),
      };
      return await apiService.sendRequest(req);
    };
    serviceFactory.updateInfos = _updateInfos;
    return serviceFactory;
  },
]);

"use strict";
app.controller("PageGalleryController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "PageGalleryService",
  "PostRestService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    postService,
    apiService,
    commonService
  ) {
    BaseCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.cates = ["Site", "System"];
    $scope.others = [];
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.pageId = $routeParams.id;
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.getList = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.request.query = "&page_id=" + id;
      var response = await service.getList($scope.request);
      $scope.canDrag =
        $scope.request.orderBy !== "Priority" ||
        $scope.request.direction !== "0";
      if (response.success) {
        $scope.data = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.remove = function (pageId, postId) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [pageId, postId],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeConfirmed = async function (pageId, postId) {
      $rootScope.isBusy = true;
      var result = await service.delete(pageId, postId);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showMessage("failed");
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.saveOthers = async function () {
      var response = await service.saveList($scope.others);
      if (response.success) {
        $scope.getList();
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.updateInfos = async function (index) {
      $scope.data.items.splice(index, 1);
      $rootScope.isBusy = true;
      var startIndex = $scope.data.items[0].priority - 1;
      for (var i = 0; i < $scope.data.items.length; i++) {
        $scope.data.items[i].priority = startIndex + i + 1;
      }
      var resp = await service.updateInfos($scope.data.items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("PageGalleryService", [
  "$rootScope",
  "ApiService",
  "CommonService",
  "BaseService",
  function ($rootScope, apiService, commonService, baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("page-post");
    var _delete = async function (pageId, postId) {
      var url = this.prefixUrl + "/delete/" + pageId + "/" + postId;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };
    var _updateInfos = async function (pages) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-infos",
        data: JSON.stringify(pages),
      };
      return await apiService.sendRequest(req);
    };
    serviceFactory.delete = _delete;
    serviceFactory.updateInfos = _updateInfos;
    return serviceFactory;
  },
]);

"use strict";
app.controller("PagePostController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "PagePostRestService",
  "PostRestService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    postService,
    commonService
  ) {
    BaseCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.request.culture = $rootScope.globalSettings.defaultCulture;
    $scope.cates = ["Site", "System"];
    $scope.others = [];
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.init = function () {
      $scope.pageId = $routeParams.id;
      $scope.type = $routeParams.type || "";
      $scope.template = $routeParams.template || "";
      $scope.pageIds = $routeParams.page_ids || $routeParams.id || "";
      $scope.moduleIds = $routeParams.module_ids || "";
      $scope.canDrag =
        $scope.request.orderBy === "Priority" &&
        $scope.request.direction === "Asc";
      $scope.createUrl =
        $routeParams.post_type === "gallery"
          ? "/admin/post/create-gallery"
          : `/admin/post/create?page_ids=${$scope.pageIds}&moduleIds=${$scope.moduleIds}&type=${$scope.type}&template=${$scope.template}`;
      $scope.updateUrl =
        $routeParams.post_type === "gallery"
          ? "/admin/post/gallery-details"
          : "/admin/post/details";
    };
    $scope.getList = async function (pageIndex) {
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.request.query = "&page_id=" + id;
      var response = await service.getList($scope.request);
      $scope.canDrag =
        $scope.request.orderBy === "Priority" &&
        $scope.request.direction === "Asc";
      if (response.success) {
        $scope.data = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.preview = function (item) {
      item.editUrl = "/admin/post/details/" + item.id;
      $rootScope.preview("post", item, item.title, "modal-lg");
    };
    $scope.remove = function (pageId, postId) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [pageId, postId],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };
    $scope.back = function () {
      window.history.back();
    };

    $scope.removeConfirmed = async function (id) {
      $rootScope.isBusy = true;
      var result = await service.delete(id);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.saveOthers = async function () {
      var response = await service.saveList($scope.others);
      if (response.success) {
        $scope.getList();
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.updateInfos = async function (index) {
      $scope.data.items.splice(index, 1);
      $rootScope.isBusy = true;
      var startIndex = $scope.data.items[0].priority - 1;
      for (var i = 0; i < $scope.data.items.length; i++) {
        $scope.data.items[i].priority = startIndex + i + 1;
      }
      var resp = await service.updateInfos($scope.data.items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("PagePostRestService", [
  "$rootScope",
  "ApiService",
  "CommonService",
  "BaseRestService",
  function ($rootScope, apiService, commonService, baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-page-post");
    var _delete = async function (id) {
      var url = this.prefixUrl + "/delete/" + id;
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.getApiResult(req);
    };
    var _updateInfos = async function (pages) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-infos",
        data: JSON.stringify(pages),
      };
      return await apiService.getApiResult(req);
    };
    serviceFactory.delete = _delete;
    serviceFactory.updateInfos = _updateInfos;
    return serviceFactory;
  },
]);

"use strict";
app.controller("OAuthClientController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "RestOAuthClientService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    service
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );

    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.applicationTypes = ["JavaScript", "NativeConfidential"];
  },
]);

"use strict";
app.factory("RestOAuthClientService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.initService("/rest/auth", "oauth-client", true);
    return serviceFactory;
  },
]);

"use strict";
app.controller("PermissionController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "ApiService",
  "CommonService",
  "PermissionService",
  "RestPortalPageNavigationService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    apiService,
    commonService,
    service,
    navService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.request.level = 0;
    $scope.miOptions = ngAppSettings.miIcons;
    $scope.initDialog = function () {
      $("#dlg-permission").on("shown.bs.modal", function () {
        $scope.initCurrentPath();
      });
    };

    $scope.initCurrentPath = async function () {
      var resp = await service.getDefault();
      if (resp && resp.success) {
        $scope.viewmodel = resp.data;
        $scope.viewmodel.url = $location.url();
        $rootScope.isBusy = false;
        $scope.$applyAsync();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        if ($scope.getSingleFailCallback) {
          $scope.getSingleFailCallback();
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.saveSuccessCallback = function () {
      $scope.getSingle();
    };

    $scope.dragStart = function (index) {
      $scope.minPriority = $scope.data.items[0].priority;
      $scope.dragStartIndex = index;
    };
    $scope.updateOrders = function (index) {
      if (index > $scope.dragStartIndex) {
        $scope.data.items.splice($scope.dragStartIndex, 1);
      } else {
        $scope.data.items.splice($scope.dragStartIndex + 1, 1);
      }
      angular.forEach($scope.data.items, function (e, i) {
        e.priority = $scope.minPriority + i;
        service.saveFields(e.id, { priority: e.priority }).then((resp) => {
          $rootScope.isBusy = false;
          $scope.$apply();
        });
      });
    };

    $scope.updateChildInfos = async function (items) {
      $rootScope.isBusy = true;
      var resp = await service.updateChildInfos(items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $("#dlg-favorite").on("show.bs.modal", function (event) {
      $scope.initCurrentPath();
    });
  },
]);

"use strict";
app.factory("PermissionService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.initService("/rest/mix-services", "permission", true);
    var _updateInfos = async function (pages) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-infos",
        data: JSON.stringify(pages),
      };
      return await apiService.sendRequest(req);
    };

    var _updateChildInfos = async function (pages) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-child-infos",
        data: JSON.stringify(pages),
      };
      return await apiService.sendRequest(req);
    };

    serviceFactory.updateInfos = _updateInfos;
    serviceFactory.updateChildInfos = _updateChildInfos;
    return serviceFactory;
  },
]);

"use strict";
app.factory("RestPortalPageNavigationService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("portal-page-navigation", true);

    return serviceFactory;
  },
]);

"use strict";
app.controller("QueueLogController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "AuthService",
  "QueueLogRestService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    authService,
    service
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    authService.fillAuthData();
    $scope.request.status = null;
    $scope.messages = [];
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.getListSuccessCallback = function () {
      angular.forEach($scope.data.items, function (e) {
        switch (e.state) {
          case "ACK":
            e.objClass = "text-success";
            break;
          case "NACK":
            e.objClass = "text-warning";
            break;
          case "FAILED":
            e.objClass = "text-danger";
            break;
          default:
            e.objClass = "text-info";
            break;
        }
      });
    };
    $scope.view = function (item) {
      switch (item.state) {
        case "ACK":
          item.objClass = "text-success";
          break;
        case "NACK":
          item.objClass = "text-warning";
          break;
        case "FAILED":
          item.objClass = "text-danger";
          break;
        default:
          item.objClass = "text-info";
          break;
      }
      $rootScope.preview("object", item, null, "modal-lg");
    };
  },
]);

"use strict";
app.factory("QueueLogRestService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = angular.copy(baseService);
    serviceFactory.initService("/rest", "mix-log/queue-log", true);
    var _search = async function (objData, queries = null) {
      var data = serviceFactory.parseQuery(objData);

      var url = `${this.prefixUrl}/search`;

      if (data) {
        url += "?";
        url = url.concat(data);
        if (queries) {
          url += "&";
          var extraQueries = serviceFactory.parseQuery(queries);
          url = url.concat(extraQueries);
        }
      }
      var req = {
        serviceBase: this.serviceBase,
        apiVersion: this.apiVersion,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };
    serviceFactory.getList = _search;
    return serviceFactory;
  },
]);

"use strict";
app.controller("PostController", [
  "$scope",
  "$rootScope",
  "$location",
  "$filter",
  "ngAppSettings",
  "$routeParams",
  "PostRestService",
  "UrlAliasService",
  "RestMixDatabaseDataPortalService",
  "RestMixDatabaseColumnPortalService",
  "RestRelatedAttributeDataPortalService",
  "RestMixDatabasePortalService",
  "MixDbService",
  function (
    $scope,
    $rootScope,
    $location,
    $filter,
    ngAppSettings,
    $routeParams,
    service,
    urlAliasService,
    dataService,
    columnService,
    navService,
    databaseService,
    mixDbService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    if (!$scope.referrerUrl) {
      $scope.referrerUrl = "/admin/post/list";
    }
    $scope.request.searchColumns = "title";
    $scope.request.culture = $rootScope.globalSettings.defaultCulture;
    $scope.request.queries = [];
    $scope.request.metadataQueries = [];
    $scope.defaultQuery = {
      fieldName: "",
      compareOperator: "Equal",
      value: "",
    };
    $scope.viewmodelType = "post";
    $scope.additionalData = {};
    $scope.createUrl = "/admin/post/create?";
    $scope.postTypeRequest = angular.copy(ngAppSettings.request);
    ($scope.postTypeRequest.searchColumns = "Type"),
      ($scope.postTypeRequest.searchMethod = "Equal"),
      ($scope.postTypeRequest.keyword = "AdditionalData");

    $scope.initList = async function () {
      if ($routeParams.template) {
        $scope.createUrl = `${$scope.createUrl}&template=${$routeParams.template}`;
      }
      if ($routeParams.category) {
        $scope.request.category = $routeParams.category;
      }
      if ($routeParams.type) {
        $scope.createUrl = `${$scope.createUrl}&type=${$routeParams.type}`;
        $scope.request.additionalDatabase = $routeParams.type;
        $scope.request.mixDatabaseName = $routeParams.type;
      }
      if ($routeParams.layout) {
        $scope.createUrl = `${$scope.createUrl}&layout=${$routeParams.layout}`;
      }
      if ($routeParams.page_ids) {
        $scope.createUrl = `${$scope.createUrl}&page_ids=${$routeParams.page_ids}`;
      }
      $scope.pageName = "postList";
      await $scope.loadAdditionalDatabases();
      $scope.filter();
    };

    $scope.parseQueryField = function (fieldName, value, operator = "Equal") {
      return {
        fieldName: fieldName,
        value: value,
        compareOperator: operator,
      };
    };
    $scope.syncProducts = async function () {
      $rootScope.isBusy = true;
      let names = $scope.data.items.map((m) => {
        return m.title;
      });
      await service.syncProducts(names);
      $rootScope.isBusy = false;
    };
    $scope.filter = async function (pageIndex) {
      $rootScope.isBusy = true;
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      if ($scope.request.fromDate !== null) {
        var d = new Date($scope.request.fromDate);
        $scope.request.fromDate = d.toISOString();
      }
      if ($scope.request.toDate !== null) {
        var dt = new Date($scope.request.toDate);
        $scope.request.toDate = dt.toISOString();
      }
      var resp = await service.filter($scope.request);
      if (resp && resp.success) {
        $scope.data = resp.data;
        $.each($scope.data.items, function (i, data) {
          $.each($scope.viewmodels, function (i, e) {
            if (e.dataContentId === data.id) {
              data.isHidden = true;
            }
          });
        });
        if ($scope.getListSuccessCallback) {
          $scope.getListSuccessCallback();
        }
        if ($scope.isScrollTop) {
          $("html, body").animate({ scrollTop: "0px" }, 500);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        if ($scope.getListFailCallback) {
          $scope.getListFailCallback();
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.loadMetadataDatabase = async function () {
      var getMixDatabase = await databaseService.getByName(["Metadata"]);
      let typeCol = getMixDatabase.data.columns.find(
        (c) => c.systemName == "type"
      );
      $scope.lstMetadata = typeCol.columnConfigurations.allowedValues;
      $scope.$apply();
    };
    $scope.loadAdditionalDatabases = async function () {
      let getTypes = await databaseService.getList($scope.postTypeRequest);
      if (getTypes.success) {
        $scope.additionalDatabases = getTypes.data.items;
        $scope.additionalDatabases.splice(0, 0, {
          systemName: null,
          displayName: "All",
          id: 0,
        });
        if ($scope.request.mixDatabaseName) {
          $scope.additionalDatabase = $rootScope.findObjectByKey(
            $scope.additionalDatabases,
            "mixDatabaseName",
            $scope.request.mixDatabaseName
          );
        }
        $scope.request.mixDatabaseName = $routeParams.type || "";
        $scope.$apply();
      }
    };
    $scope.getDefault = async function (type = null) {
      $rootScope.isBusy = true;
      type = type || $routeParams.type;
      var resp = await service.getDefault({
        type: type || "",
        template: $routeParams.template || "",
      });
      if (resp.success) {
        $scope.viewmodel = resp.data;
        mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
        if ($scope.getSingleSuccessCallback) {
          $scope.getSingleSuccessCallback();
        }

        // $scope.viewmodel.createdDateTime = Date.now();
        $scope.viewmodel.createdBy = $rootScope.authentication.username;

        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        if ($scope.getSingleFailCallback) {
          $scope.getSingleFailCallback();
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.preview = function (item) {
      item.editUrl = "/admin/post/details/" + item.id;
      $rootScope.preview("post", item, item.title, "modal-lg");
    };
    $scope.onSelectType = function () {
      if ($scope.viewmodel) {
        $scope.viewmodel.mixDatabaseName = $scope.additionalDatabase.systemName;
        mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
        $scope.loadAdditionalData();
      }
      $scope.request.additionalDatabase =
        $scope.additionalDatabase.mixDatabaseName;
      $scope.createUrl = `/admin/post/create?type=${$scope.request.additionalDatabase}`;
      if ($routeParams.template) {
        $scope.createUrl += `&template=${$routeParams.template}`;
      }
      if (
        $scope.additionalDatabase.mixDatabaseName &&
        (!$scope.viewmodel || !$scope.viewmodel.id)
      ) {
        $scope.getDefault($scope.request.additionalDatabase);
      }
      if ($scope.pageName == "postList") {
        $scope.filter();
      }
    };
    $scope.getListRelated = async function (pageIndex) {
      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      if ($scope.request.fromDate !== null) {
        var d = new Date($scope.request.fromDate);
        $scope.request.fromDate = d.toISOString();
      }
      if ($scope.request.toDate !== null) {
        var d = new Date($scope.request.toDate);
        $scope.request.toDate = d.toISOString();
      }
      var resp = await service.filter($scope.request);
      if (resp && resp.success) {
        $scope.relatedData = angular.copy(resp.data);
        $scope.relatedData.items = [];
        angular.forEach(resp.data.items, (element) => {
          let isActive =
            null !=
            $scope.viewmodel.postNavs.find(
              (p) => p.destinationId == element.id
            );
          if (!isActive) {
            var obj = {
              description: element.title,
              destinationId: element.id,
              image: element.image,
              isActived: isActive,
              sourceId: $scope.viewmodel.id,
              specificulture: $scope.viewmodel.specificulture,
              status: "Published",
            };
            result.push(obj);
          }
        });
        resp.data.items = result;
        $rootScope.isBusy = false;
        $scope.$apply();
        return resp.data;
      } else {
        $rootScope.showErrors(getData.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.saveFailCallback = function () {
      angular.forEach($scope.viewmodel.mixDatabaseNavs, function (nav) {
        if (nav.isActived) {
          $rootScope.decryptMixDatabase(
            nav.mixDatabase.attributes,
            nav.mixDatabase.postData.items
          );
        }
      });
    };
    $scope.saveSuccessCallback = async function () {
      if ($scope.additionalData && $scope.viewmodel.mixDatabaseName) {
        var creating = !$scope.additionalData.parentId;
        $scope.additionalData.parentType = "Post";
        $scope.additionalData.parentId = $scope.viewmodel.id;
        mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
        var saveResult = await mixDbService.save($scope.additionalData);
        if (saveResult.success) {
          $rootScope.showMessage("Additional Data Saved", "success");
          $scope.additionalData = saveResult.data;
          if (creating) {
            $location.url(`/admin/post/details/${$scope.viewmodel.id}`);
          }
        } else {
          $rootScope.showErrors(result.errors);
        }
        // $scope.additionalData.isClone = $scope.viewmodel.isClone;
        // $scope.additionalData.cultures = $scope.viewmodel.cultures;
        // $scope.additionalData.intParentId = $scope.viewmodel.id;
        // $scope.additionalData.parentType = "Post";
        // let result = await dataService.save($scope.additionalData);
        // if (!result.success) {
        //   $rootScope.showErrors(result.errors);
        // } else {
        //   $scope.additionalData = result.data;
        //   //   $scope.saveColumns();
        // }
      }
      $rootScope.showMessage("success", "success");
      $rootScope.isBusy = false;
      $scope.$apply();
    };

    $scope.saveColumns = async function () {
      let result = await columnService.saveMany($scope.additionalData.columns);
      if (result.success) {
        $rootScope.showMessage("success", "success");
      }
    };
    $scope.getSingleSuccessCallback = async function () {
      if (!$scope.viewmodel.id) {
        $scope.viewmodel.mixDatabaseName = $routeParams.type;
      }
      mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
      await $scope.loadMetadataDatabase();
      //   $scope.defaultThumbnailImgWidth =
      //     ngAppSettings.mixConfigurations.DefaultThumbnailImgWidth;
      //   $scope.defaultThumbnailImgHeight =
      //     ngAppSettings.mixConfigurations.DefaultThumbnailImgHeight;

      //   $scope.defaultFeatureImgWidth =
      //     ngAppSettings.mixConfigurations.DefaultFeatureImgWidth;
      //   $scope.defaultFeatureImgHeight =
      //     ngAppSettings.mixConfigurations.DefaultFeatureImgHeight;
      $scope.request.additionalDatabase = $scope.viewmodel.mixDatabaseName;
      var moduleIds = $routeParams.moduleIds;
      var pageIds = $routeParams.page_ids;
      $scope.additionalDatabase = $rootScope.findObjectByKey(
        $scope.additionalDatabases,
        "systemName",
        $scope.request.additionalDatabase
      );
      $scope.loadAdditionalData();
      if (moduleIds) {
        for (var moduleContentId of moduleIds.split(",")) {
          var moduleNav = $rootScope.findObjectByKey(
            $scope.viewmodel.modules,
            "moduleContentId",
            moduleContentId
          );
          if (moduleNav) {
            moduleNav.isActived = true;
          }
        }
      }
      if (pageIds) {
        for (var pageId of pageIds.split(",")) {
          var pageNav = $rootScope.findObjectByKey(
            $scope.viewmodel.pages,
            "pageId",
            pageId
          );
          if (pageNav) {
            pageNav.isActived = true;
          }
        }
      }
    };
    $scope.loadAdditionalData = async function () {
      if ($scope.viewmodel.mixDatabaseName) {
        $scope.loadingData = true;
        mixDbService.initDbName($scope.viewmodel.mixDatabaseName);
        if ($scope.viewmodel.id) {
          const getData = await mixDbService.getSingleByParent(
            "Post",
            $scope.viewmodel.id
          );
          if (getData.success) {
            $scope.additionalData = getData.data;
            $scope.loadingData = false;
          }
          $scope.$apply();
        } else {
          $scope.additionalData = {
            parentType: "Post",
          };
          $scope.loadingData = false;
        }
      }
    };
    $scope.generateSeo = function () {
      if ($scope.viewmodel) {
        if (
          $scope.viewmodel.seoName === null ||
          $scope.viewmodel.seoName === ""
        ) {
          $scope.viewmodel.seoName = $rootScope.generateKeyword(
            $scope.viewmodel.title,
            "-"
          );
          if ($scope.viewmodel.seoName.length > 50) {
            $scope.viewmodel.seoName =
              $scope.viewmodel.seoName.substring(0, 80) + "...";
          }
        }
        if (
          $scope.viewmodel.seoTitle === null ||
          $scope.viewmodel.seoTitle === ""
        ) {
          $scope.viewmodel.seoTitle = $scope.viewmodel.title;
        }
        if (
          $scope.viewmodel.seoDescription === null ||
          $scope.viewmodel.seoDescription === ""
        ) {
          $scope.viewmodel.seoDescription = $scope.viewmodel.excerpt;
        }
        if (
          $scope.viewmodel.seoKeywords === null ||
          $scope.viewmodel.seoKeywords === ""
        ) {
          $scope.viewmodel.seoKeywords = $scope.viewmodel.title;
        }
      }
    };
    $scope.addAlias = async function () {
      var getAlias = await urlAliasService.getDefault();
      if (getAlias.success) {
        $scope.viewmodel.urlAliases.push(getAlias.data);
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(getAlias.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.removeAliasCallback = async function (index) {
      $scope.viewmodel.urlAliases.splice(index, 1);
      $scope.$apply();
    };

    $scope.validate = function () {
      angular.forEach($scope.viewmodel.mixDatabaseNavs, function (nav) {
        if (nav.isActived) {
          $rootScope.encryptMixDatabase(
            nav.mixDatabase.attributes,
            nav.mixDatabase.postData.items
          );
        }
      });
      return true;
    };
  },
]);

"use strict";
app.factory("PostRestService", [
  "BaseRestService",
  "ApiService",
  function (baseService, apiService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-post-content");
    var _syncProducts = async function (names) {
      var url = `/api/daphale/sync/products`;
      var req = {
        serviceBase: "",
        method: "POST",
        url: url,
        data: {
          batch: 50,
          isScaleImage: true,
          isSyncPrice: true,
          isSyncAll: false,
          productNames: names,
        },
      };
      return await apiService.sendPureRequest(req);
    };
    var _filter = async function (request) {
      var url = `${this.prefixUrl}/filter`;
      var req = {
        serviceBase: this.serviceBase,
        method: "POST",
        url: url,
        data: request,
      };
      return await this.getRestApiResult(req);
    };
    // Define more service methods here
    serviceFactory.filter = _filter;
    serviceFactory.syncProducts = _syncProducts;
    return serviceFactory;
  },
]);

"use strict";
app.controller("RoleController", [
  "$scope",
  "$rootScope",
  "$location",
  "$routeParams",
  "ngAppSettings",
  "RestMixDatabaseDataPortalService",
  "RestMixDatabaseColumnPortalService",
  "RoleService",
  function (
    $scope,
    $rootScope,
    $location,
    $routeParams,
    ngAppSettings,
    dataService,
    columnService,
    service
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.role = { name: "" };
    $scope.initPermissions = async function () {
      let backUrl = "/admin/role/list";
      $scope.createUrl = `/admin/mix-database-data/create?mixDatabaseName=sysPermission&dataContentId=default&parentId=${$scope.viewmodel.id}&parentName=Role&backUrl=${backUrl}`;
      $scope.updateUrl = "/admin/mix-database-data/details";
    };

    $scope.createRole = async function () {
      $rootScope.isBusy = true;
      var result = await service.createRole($scope.role.name);
      if (result.success) {
        $scope.role.name = "";
        $scope.getList();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("RoleService", [
  "BaseRestService",
  "ApiService",
  "CommonService",
  function (baseService, apiService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.initService("/rest/auth", "role", true);

    var _getPermissions = async function () {
      var req = {
        method: "GET",
        url: this.prefixUrl + "/permissions",
      };
      return await apiService.sendRequest(req);
    };

    var _updatePermission = async function (permission) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/update-permission",
        data: JSON.stringify(permission),
      };
      return await apiService.sendRequest(req);
    };
    var _createRole = function (name) {
      var req = {
        method: "POST",
        url: this.prefixUrl + "/create",
        data: JSON.stringify(name),
      };

      return apiService.sendRequest(req);
    };
    serviceFactory.createRole = _createRole;
    serviceFactory.getPermissions = _getPermissions;
    serviceFactory.updatePermission = _updatePermission;
    return serviceFactory;
  },
]);

"use strict";
app.controller("SchedulerController", [
  "$scope",
  "$rootScope",
  "$routeParams",
  "$location",
  "SchedulerService",
  function ($scope, $rootScope, $routeParams, $location, service) {
    $scope.jobs = [];
    $scope.intervalTypes = [
      "Second",
      "Minute",
      "Hour",
      "Day",
      "Week",
      "Month",
      "Year",
    ];
    $scope.templates = {
      "Mix.Scheduler.Jobs.KeepPoolAliveJob": {
        domain: "https://example.com",
      },
      "Mix.Scheduler.Jobs.PublishScheduledPostsJob": {},
      "Mix.Scheduler.Jobs.SendMessageQueueJob": {
        data: {
          topic: "",
          action: "",
          data: {},
        },
      },
      "Mix.Scheduler.Jobs.SendPortalMessageJob": {
        data: {
          topic: "",
          action: "",
          data: "",
        },
      },
    };
    $scope.schedule = {
      jobData: {
        data: {
          type: "Info",
          from: {
            connectionId: "",
            userName: "",
            avatar: "",
          },
          title: "value",
          message: "content",
          data: {},
        },
      },
      cronExpression: null,
      name: null,
      groupName: null,
      jobName: null,
      description: null,
      startAt: null,
      isStartNow: true,
      interval: null,
      intervalType: "Second",
      repeatCount: null,
    };
    $scope.updateMessageTemplate = () => {
      if ($scope.templates[$scope.schedule.jobName]) {
        $scope.schedule.jobData = null;
        setTimeout(() => {
          $scope.schedule.jobData = $scope.templates[$scope.schedule.jobName];
          $scope.$apply();
        }, 200);
      }
    };
    $scope.init = function () {
      $scope.getTriggers();
      $scope.getJobs();
    };

    $scope.getSingle = async function () {
      $scope.getJobs();
      $scope.getTrigger();
    };

    $scope.getTrigger = async function () {
      if ($routeParams.name) {
        $rootScope.isBusy = true;
        $scope.isReschedule = true;
        var resp = await service.getTrigger($routeParams.name);
        if (resp && resp.success) {
          $scope.trigger = resp.data.trigger;
          //   $scope.schedule.trigger = $scope.trigger;
          $scope.schedule.name = $scope.trigger.name;
          $scope.schedule.jobName = $scope.trigger.jobName;
          $scope.schedule.groupName = $scope.trigger.group;
          //   $scope.schedule.interval = $scope.trigger.repeatInterval;
          $scope.schedule.repeatCount = $scope.trigger.repeatCount;
          if ($scope.trigger.jobDataMap) {
            if ($scope.trigger.jobDataMap.data) {
              $scope.schedule.jobData = {
                data: JSON.parse($scope.trigger.jobDataMap.data),
              };
            } else {
              $scope.schedule.jobData = $scope.trigger.jobDataMap;
            }
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors || ["Failed"]);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };

    $scope.createSchedule = async function () {
      $rootScope.isBusy = true;
      var resp = $scope.isReschedule
        ? await service.reschedule($scope.schedule)
        : await service.createSchedule($scope.schedule);
      if (resp && resp.success) {
        $rootScope.isBusy = true;
        $location.url("/admin/scheduler");
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.execute = async function (name) {
      try {
        $rootScope.isBusy = true;
        await service.execute(name);
        $rootScope.isBusy = false;
        $scope.$apply();
      } catch {}
    };
    $scope.updateJobData = function (content) {
      try {
        $scope.schedule.jobData = JSON.parse(content);
        $scope.$apply();
      } catch {}
    };
    $scope.pauseTrigger = async function (name) {
      $rootScope.isBusy = true;
      var resp = await service.pauseTrigger(name);
      if (resp && resp.success) {
        $scope.schedule = resp.data;
        await $scope.getTriggers();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.resumeTrigger = async function (name) {
      $rootScope.isBusy = true;
      var resp = await service.resumeTrigger(name);
      if (resp && resp.success) {
        $scope.schedule = resp.data;
        await $scope.getTriggers();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.getTriggers = async function () {
      $rootScope.isBusy = true;
      var resp = await service.getTriggers();
      if (resp && resp.success) {
        $scope.data = resp.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.getJobs = async function () {
      $rootScope.isBusy = true;
      var resp = await service.getJobs();
      if (resp && resp.success) {
        $scope.jobs = resp.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.deleteJob = async function (name) {
      $rootScope.isBusy = true;
      var resp = await service.deleteJob(name);
      if (resp && resp.success) {
        $scope.getJobs();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors || ["Failed"]);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("SchedulerService", [
  "AuthService",
  "ApiService",
  function (authService, apiService) {
    var serviceFactory = {};
    serviceFactory.prefixUrl = "/scheduler";
    var _createSchedule = async function (schedule) {
      var url = `${this.prefixUrl}/trigger/create`;
      var req = {
        serviceBase: this.serviceBase,
        method: "POST",
        url: url,
        data: JSON.stringify(schedule),
      };
      return await this.getRestApiResult(req);
    };
    var _reschedule = async function (schedule) {
      var url = `${this.prefixUrl}/reschedule`;
      var req = {
        serviceBase: this.serviceBase,
        method: "POST",
        url: url,
        data: JSON.stringify(schedule),
      };
      return await this.getRestApiResult(req);
    };
    var _execute = async function (name) {
      var url = `${this.prefixUrl}/execute/${name}`;
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };
    var _pauseTrigger = async function (name) {
      var url = `${this.prefixUrl}/trigger/pause/${name}`;
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };

    var _resumeTrigger = async function (name) {
      var url = `${this.prefixUrl}/trigger/resume/${name}`;
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };

    var _getTrigger = async function (name) {
      var url = `${this.prefixUrl}/trigger/${name}`;
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };

    var _getTriggers = async function () {
      var url = `${this.prefixUrl}/trigger`;
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };

    var _getJobs = async function () {
      var url = `${this.prefixUrl}/job`;
      var req = {
        serviceBase: this.serviceBase,
        method: "GET",
        url: url,
      };
      return await this.getRestApiResult(req);
    };

    var _deleteJob = async function (name) {
      var url = `${this.prefixUrl}/job/${name}`;
      var req = {
        serviceBase: this.serviceBase,
        method: "DELETE",
        url: url,
      };
      return await this.getRestApiResult(req);
    };

    var _getRestApiResult = async function (req) {
      if (!authService.authentication) {
        await authService.fillAuthData();
      }
      if (authService.authentication) {
        req.Authorization = authService.authentication.accessToken;
      }
      if (!req.headers) {
        req.headers = {
          "Content-Type": "application/json",
        };
      }
      req.headers.Authorization = "Bearer " + req.Authorization || "";

      return apiService.sendRequest(req).then(function (resp) {
        return resp;
      });
    };
    var _parseQuery = function (req) {
      var result = "";
      if (req) {
        for (var key in req) {
          if (angular.isObject(req.query)) {
            req.query = JSON.stringify(req.query);
          }
          if (req.hasOwnProperty(key) && req[key]) {
            if (result != "") {
              result += "&";
            }
            result += `${key}=${req[key]}`;
          }
        }
        return result;
      } else {
        return result;
      }
    };
    serviceFactory.execute = _execute;
    serviceFactory.parseQuery = _parseQuery;
    serviceFactory.getRestApiResult = _getRestApiResult;
    serviceFactory.createSchedule = _createSchedule;
    serviceFactory.reschedule = _reschedule;
    serviceFactory.getJobs = _getJobs;
    serviceFactory.deleteJob = _deleteJob;
    serviceFactory.getTrigger = _getTrigger;
    serviceFactory.getTriggers = _getTriggers;
    serviceFactory.pauseTrigger = _pauseTrigger;
    serviceFactory.resumeTrigger = _resumeTrigger;
    return serviceFactory;
  },
]);

"use strict";
app.controller("ServiceController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "RestMixDatabasePortalService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    commonService
  ) {
    BaseODataCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.defaultId = "default";
    $scope.parentId = null;
    $scope.parentType = null;
    $scope.cates = ["Site", "System"];
    $scope.others = [];
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.init = async function () {
      $scope.mixDatabaseId = $routeParams.mixDatabaseId;
      $scope.mixDatabaseName = $routeParams.mixDatabaseName;
      $scope.dataContentId = $routeParams.dataContentId;
    };
    $scope.saveSuccessCallback = function () {
      $rootScope.isBusy = false;
      $scope.$apply();
      // if($scope.parentId){
      //     $location.url('/admin/mix-database-data/details?dataContentId='+ $scope.parentId);
      // }
      // else{
      //     $location.url('/admin/mix-database-data/list?mixDatabaseId='+ $scope.viewmodel.mixDatabaseId);
      // }
    };
    $scope.getList = async function () {
      $rootScope.isBusy = true;
      $scope.mixDatabaseId = $routeParams.mixDatabaseId;
      $scope.mixDatabaseName = $routeParams.mixDatabaseName;
      var type = $routeParams.type;
      var parentId = $routeParams.parentId;
      var response = await service.getList(
        "read",
        $scope.request,
        $scope.mixDatabaseId,
        $scope.mixDatabaseName,
        type,
        parentId
      );
      $scope.canDrag =
        $scope.request.orderBy !== "Priority" ||
        $scope.request.direction !== "0";
      if (response) {
        $scope.data = response;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors("Failed");
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.getSingle = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id || $scope.defaultId;
      $scope.mixDatabaseId = $routeParams.mixDatabaseId;
      $scope.mixDatabaseName = $routeParams.mixDatabaseName;
      var resp = await service.getSingle("portal", [
        id,
        $scope.mixDatabaseId,
        $scope.mixDatabaseName,
      ]);
      if (resp) {
        $scope.viewmodel = resp;
        $scope.viewmodel.parentType = $scope.parentType;
        $scope.viewmodel.parentId = $scope.parentId;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors("Failed");
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.preview = function (item) {
      item.editUrl = "/admin/post/details/" + item.id;
      $rootScope.preview("post", item, item.title, "modal-lg");
    };
    $scope.edit = function (data) {
      $scope.goToPath(
        "/admin/mix-database-data/details?dataContentId=" +
          data.id +
          "&mixDatabaseId=" +
          $scope.mixDatabaseId
      );
    };
    $scope.remove = function (data) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [data.id],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeConfirmed = async function (dataContentId) {
      $rootScope.isBusy = true;
      var result = await service.delete([dataContentId]);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.saveOthers = async function () {
      var response = await service.saveList($scope.others);
      if (response.success) {
        $scope.getList();
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.controller("SocialFeedController", [
  "$rootScope",
  "$scope",
  "$http",
  "PostRestService",
  function ($rootScope, $scope, $http, postService) {
    $scope.types = ["Facebook", "Instagram"];
    $scope.isInit = false;
    $scope.defaultPost = null;
    $scope.defaultProperty = {
      name: null,
      dataType: 7,
      value: "",
    };
    $scope.data = [];
    $scope.errors = [];
    $scope.socialSettings = {
      app_id: null,
      page_id: null,
      app_secret: null,
      access_token: "",
      page: [],
      data: [],
      posts: [],
      show_login: true,
      errors: [],
    };
    $scope.init = async function () {
      window.fbAsyncInit = function () {
        FB.init({
          appId: $rootScope.getConfiguration("FacebookAppId"),
          autoLogAppEvents: true,
          xfbml: true,
          version: "v3.2",
        });
      };
      $scope.socialSettings = {
        app_id: $rootScope.mixConfigurations.data.FacebookAppId,
        page_id: $rootScope.mixConfigurations.data.Facebook_Page_Id,
        app_secret: $rootScope.mixConfigurations.data.FacebookAppSecret,
        access_token: $rootScope.mixConfigurations.data.FacebookAccessToken,
        show_login: true,
        errors: [],
      };
      if ($scope.socialSettings.access_token) {
        $scope.socialSettings.show_login = false;
        $scope.loadPages();
      }
      postService.getSingle(["portal"]).then((resp) => {
        $scope.defaultPost = resp.data;
      });
    };

    // This function is called when someone finishes with the Login
    // Button.  See the onlogin handler attached to it in the sample
    // code below.
    $scope.login = function () {
      FB.login(
        function (response) {
          // handle the response
          $scope.statusChangeCallback(response);
        },
        {
          scope: "email, manage_pages",
          return_scopes: true,
        }
      );
    };

    $scope.statusChangeCallback = function (response) {
      // The response object is returned with a status column that lets the
      // app know the current login status of the person.
      // Full docs on the response object can be found in the documentation
      // for FB.getLoginStatus().
      if (response.status === "connected") {
        // Logged into your app and Facebook.
        $scope.exchangeToken(response);
        $scope.loadPages();
        //window.location = '/bo/feed?code=' + response.authResponse.accessToken;
      } else {
        $scope.socialSettings.show_login = true;
        $scope.$apply();
        // The person is not logged into your app or we are unable to tell.
      }
    };

    $scope.exchangeToken = function (response) {
      var url =
        "/oauth/access_token?grant_type=fb_exchange_token&client_id=" +
        $scope.socialSettings.app_id +
        "&client_secret=" +
        $scope.socialSettings.app_secret +
        "&fb_exchange_token=" +
        response.authResponse.accessToken;
      FB.api(url, function (response) {
        if (response.access_token) {
          $scope.socialSettings.access_token = response.access_token;
        } else {
          $scope.show_login = true;
          $scope.socialSettings.errors = response;
          $scope.$apply();
        }
      });
    };
    $scope.loadFeeds = function (url) {
      $scope.socialSettings.errors = "";
      $scope.socialSettings.posts = [];
      url =
        url ||
        "/" +
          $scope.socialSettings.page_id +
          "/posts?access_token=" +
          $scope.socialSettings.access_token +
          "&columns=type,name,story,full_picture,created_time,permalink_url,message,description,caption,attachments{media,type,target,subattachments},shares.summary(true).limit(0),likes.summary(true).limit(0),comments.summary(true).limit(0)&limit=10";
      $rootScope.isBusy = true;
      FB.api(url, function (response) {
        if (response.data) {
          $scope.socialSettings.data = response.data;
          angular.forEach(response.data, function (e, i) {
            var post = $scope.parsePost(e);
            $scope.socialSettings.posts.push(post);
          });
          if (response.paging) {
            $scope.socialSettings.nextUrl = response.paging.next;
            $scope.socialSettings.prevUrl = response.paging.previous;
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $scope.socialSettings.show_login = true;
          $rootScope.isBusy = false;
          $scope.socialSettings.errors = response;
          $scope.$apply();
        }
      });
    };
    $scope.loadPages = function () {
      $scope.socialSettings.errors = "";
      var url =
        "/me/accounts?access_token=" +
        $scope.socialSettings.access_token +
        "&columns=id,name";
      FB.api(url, function (response) {
        if (response.data) {
          $scope.socialSettings.pages = response.data;
          $scope.$apply();
        } else {
          $scope.socialSettings.show_login = true;
          $scope.socialSettings.errors = response;
        }
      });
    };
    $scope.setAttr = function (e, attrName, attVal) {
      $(e).attr(attrName, attVal);
    };
    $scope.parsePost = function (post) {
      var post = angular.copy($scope.defaultPost);
      var prop = angular.copy($scope.defaultProperty);
      post.title = "Facebook Id";
      post.name = "facebook_id";
      post.value = post.id;
      post.properties.push(prop);

      post.title = post.name || post.id;
      post.excerpt = post.message;
      post.content = post.description;
      post.source = "Facebook";
      post.image = post.full_picture;
      post.detailUrl = post.permalink_url;
      var attachments = post.attachments.data[0];

      if (attachments.media) {
        var media = $scope.parseMedia(attachments.media, attachments.type);
        if (media) {
          post.mediaNavs.push({
            media: media,
            specificulture: $rootScope.mixConfigurations.lang,
            image: media.fullPath,
          });
        }
      }

      if (attachments.subattachments) {
        var medias = $scope.parseMedias(attachments.subattachments.data);
        angular.forEach(medias, function (e, i) {
          post.mediaNavs.push({
            media: e,
            specificulture: $rootScope.mixConfigurations.lang,
            image: e.fullPath,
          });
        });
      }
      return post;
    };
    $scope.parseMedias = function (data) {
      var result = [];
      if (data) {
        angular.forEach(data, function (e, i) {
          var media = $scope.parseMedia(e.media, e.type);
          if (media) {
            result.push(media);
          }
        });
      }
      return result;
    };
    $scope.parseMedia = function (media, type) {
      if (media) {
        var src = "";
        switch (type) {
          case "video_autoplay":
            src = media.source;
            break;
          case "profile_media":
          case "photo":
          default:
            src = media.image.src;
            break;
        }
        try {
          if (src) {
            var index = src.lastIndexOf("/");
            var ext = src.match(/.(?:jpg|gif|png|gif|jpeg|mp4)/)[0];
            // if valid  file
            if (ext) {
              var eIndex = src.indexOf(ext);
              var filename = src.substring(index + 1, eIndex);
              var media = {
                fileName: filename,
                fileFolder: "Facebook",
                extension: ext,
                targetUrl: src,
                fullPath: src,
                fileType: type,
                source: "Facebook",
              };

              return media;
            } else {
              return null;
            }
          } else {
            return null;
          }
        } catch (err) {
          console.log("Cannot parse media", media);
          return null;
        }
      }
    };
    $scope.syncPosts = async function () {
      $rootScope.isBusy = true;
      var resp = await postService.saveList($scope.socialSettings.posts);
      if (resp && resp.success) {
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.controller("StoreController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "CryptoService",
  "ThemeService",
  "StoreService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    cryptoService,
    themeService,
    service
  ) {
  },
]);

"use strict";
app.controller("TemplateController", [
  "$scope",
  "$rootScope",
  "$routeParams",
  "$location",
  "ngAppSettings",
  "AuthService",
  "TemplateService",
  function (
    $scope,
    $rootScope,
    $routeParams,
    $location,
    ngAppSettings,
    authService,
    service
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    BaseHub.call(this, $scope);

    $scope.folderTypes = [
      "Masters",
      "Layouts",
      "Pages",
      "Modules",
      "Forms",
      "Edms",
      "Products",
      "Posts",
      "Widgets",
    ];
    $scope.isInitHub = false;
    $scope.room = null;
    $scope.members = [];
    $scope.activedPane = null;
    $scope.canRename = true;
    $scope.user = null;
    $scope.selectPane = function (pane) {
      $scope.activedPane = pane;
    };
    $scope.init = async function () {
      authService.fillAuthData().then(function () {
        $scope.user = {
          username: authService.authentication.info.username,
          avatar: authService.authentication.info.avatar,
        };
        $scope.canEdit = true;
        // $scope.startConnection("editFileHub", () => {
        //   let id = $routeParams.id || $rootScope.generateUUID();
        //   $scope.room = `Template-${id}`;
        //   $scope.joinRoom();
        // });
      });
    };
    $scope.validate = function () {
      $scope.viewmodel.displayName = $scope.viewmodel.fileName;
      $scope.viewmodel.extension = ".cshtml";
      return true;
    };
    $scope.loadFolder = function (d) {
      $location.url(
        "/admin/template/list/" +
          $routeParams.themeId +
          "?folderType=" +
          encodeURIComponent(d)
      );
    };
    $scope.loadParams = async function () {
      $rootScope.isBusy = true;
      $scope.themeId = $routeParams.themeId;
      $scope.folderType = $routeParams.folderType;
    };
    $scope.getSingle = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.folderType = $routeParams.folderType;

      if (id) {
        var resp = await service.getSingle([id], {
          folderType: $scope.folderType,
        });
        if (resp && resp.success) {
          $scope.viewmodel = resp.data;
          if (!$scope.viewmodel.content) {
            $scope.viewmodel.content = "<div></div>";
          }
          $scope.listUrl =
            "/admin/template/list/" +
            $scope.viewmodel.themeId +
            "?folderType=" +
            encodeURIComponent($scope.viewmodel.folderType);
          $scope.canRename =
            $scope.viewmodel.id === 0 ||
            $scope.viewmodel.fileName.indexOf("Copy") === 0;
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      } else {
        var themeId = $routeParams.themeId;
        var resp = await service.getDefault();
        if (resp && resp.success) {
          resp.data.mixThemeId = themeId;
          resp.data.folderType = $scope.folderType;
          $scope.viewmodel = resp.data;
          if (!$scope.viewmodel.content) {
            $scope.viewmodel.content = "<div></div>";
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.copy = async function (id) {
      $rootScope.isBusy = true;
      $scope.folderType = $routeParams.folderType; // ? $routeParams.folderType : 'Masters';
      var themeId = $routeParams.themeId;
      $scope.listUrl =
        "/admin/template/list/" +
        themeId +
        "?folderType=" +
        encodeURIComponent($scope.folderType);
      var resp = await service.copy(id);
      if (resp && resp.success) {
        $location.url(
          `/admin/template/details/${$scope.folderType}/${resp.data.id}`
        );
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.getList = async function (pageIndex, themeId) {
      $scope.request.themeId = themeId || $routeParams.themeId;
      $scope.request.folderType = $routeParams.folderType;
      $scope.request.status = null;
      $scope.folderType = $routeParams.folderType;
      if ($scope.folderType) {
        if (pageIndex !== undefined) {
          $scope.request.pageIndex = pageIndex;
        }
        if ($scope.request.fromDate !== null) {
          var df = new Date($scope.request.fromDate);
          $scope.request.fromDate = df.toISOString();
        }
        if ($scope.request.toDate !== null) {
          var dt = new Date($scope.request.toDate);
          $scope.request.toDate = dt.toISOString();
        }
        var resp = await service.getList($scope.request, [$scope.themeId]);
        if (resp && resp.success) {
          $scope.data = resp.data;
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      } else {
        $rootScope.isBusy = false;
      }
    };
    $scope.updateTemplateContent = function (content) {
      $scope.viewmodel.content = content;
    };
    $scope.updateStyleContent = function (content) {
      $scope.viewmodel.scripts = content;
    };
    $scope.updateScriptContent = function (content) {
      $scope.viewmodel.styles = content;
    };
    $scope.joinRoom = function () {
      $scope.connection.invoke("JoinRoom", $scope.room, $scope.user);
    };
    $scope.receiveMessage = function (msg) {
      switch (msg.type) {
        case "MemberList":
          $scope.members = msg.data;
          $scope.initMembersData();
          $scope.canEdit = $scope.members.length == 1;
          if (!$scope.canEdit) {
            $scope.errors = [
              "Cannot modify if there is another user opening this template",
            ];
          } else {
            $scope.errors = [];
          }
          $scope.$apply();
          break;

        default:
          break;
      }
      console.log(msg);
    };
    $scope.initMembersData = function () {
      angular.forEach($scope.members, function (e) {
        if (!e.Avatar) {
          e.Avatar = "/mix-app/assets/img/user.png";
        }
      });
    };
  },
]);

"use strict";
app.controller("TenantController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$location",
  "$routeParams",
  "TenantRestService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $location,
    $routeParams,
    service
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.request.columns = [
      "id",
      "displayName",
      "systemName",
      "primaryDomain",
      "createdDateTime",
      "createdBy",
    ];
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
  },
]);

"use strict";
app.factory("TenantRestService", [
  "BaseRestService",
  function (baseService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init("mix-tenant");
    return serviceFactory;
  },
]);

"use strict";
app.controller("ThemeController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "ThemeService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    commonService
  ) {
    BaseRestCtrl.call(
      this,
      $scope,
      $rootScope,
      $location,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.exportData = null;
    $scope.exportThemeDto = {
      isIncludeAssets: true,
      isIncludeTemplates: true,
      isIncludeConfigurations: true,
      isIncludePermissions: true,
      cultureIds: [],
      content: {
        pageIds: [],
        pageContentIds: [],
        postIds: [],
        postContentIds: [],
        moduleIds: [],
        moduleContentIds: [],
        mixDatabaseIds: [],
        mixDatabaseContextIds: [],
      },
      associations: {
        pageIds: [],
        pageContentIds: [],
        postIds: [],
        postContentIds: [],
        moduleIds: [],
        moduleContentIds: [],
        mixDatabaseIds: [],
        mixDatabaseContextIds: [],
      },
    };

    $scope.getSingleSuccessCallback = function () {
      $scope.assets = null;
      $scope.theme = null;
    };

    $scope.syncTemplates = async function (id) {
      $rootScope.isBusy = true;
      var response = await service.syncTemplates(id);
      if (response.success) {
        $scope.viewmodel = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.extract = async function () {
      $rootScope.isBusy = true;
      var frm = new FormData();
      var url = "/rest/mix-tenancy/setup/extract-theme";
      $scope.data.isCreateDefault = $scope.themeType === "materialkit";
      $rootScope.isBusy = true;
      // Looping over all files and add it to FormData object
      frm.append("theme", theme);
      // Adding one more key to FormData object
      frm.append("model", angular.toJson($scope.data));
      var response = await service.ajaxSubmitForm(frm, url);
      $rootScope.isBusy = false;
      if (response.success) {
        $rootScope.goToPath("/init/step4");
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.export = async function () {
      $scope.exportThemeDto.themeId = $routeParams.id;
      $rootScope.isBusy = true;
      var response = await service.export($scope.exportThemeDto);

      if (response.success) {
        $rootScope.isBusy = false;
        window.open(response.data, "_blank");
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.saveSuccessCallback = function () {
      apiService.getAllSettings().then(function () {
        // $location.path("/admin/theme/list");
        $rootScope.isBusy = false;
        $scope.$apply();
      });
    };
    $scope.removeCallback = function () {
      apiService.getAllSettings().then(function () {
        $location.path("/admin/theme/list");
      });
    };

    $scope.getExportData = async function () {
      var id = $routeParams.id;
      var resp = await service.getExportData(id);
      if (resp && resp.success) {
        $scope.exportData = resp.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.generateSEO = function () {
      $scope.viewmodel.name = $rootScope.generateKeyword(
        $scope.viewmodel.title,
        "-"
      );
    };
  },
]);

"use strict";
app.controller("ThemeImportController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "ApiService",
  "ThemeService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    apiService,
    themeService
  ) {
    $scope.importData = null;
    $scope.init = function () {};
    $scope.getSingleSuccessCallback = function () {
      $scope.assets = null;
      $scope.theme = null;
    };
    $scope.submit = async function () {
      $scope.form = document.getElementById("form-portal");
      let theme = $scope.form["theme"].files[0];
      if (theme) {
        await $scope.extract(theme);
        document.getElementById("form-portal")["theme"].value = "";
      } else {
        $scope.import();
      }
    };
    $scope.extract = async function (theme) {
      $rootScope.isBusy = true;
      var frm = new FormData();
      var url = "/rest/mix-tenancy/setup/extract-theme";
      $rootScope.isBusy = true;
      // Looping over all files and add it to FormData object
      frm.append("theme", theme);
      // Adding one more key to FormData object
      frm.append("model", angular.toJson($scope.data));
      var response = await apiService.ajaxSubmitForm(frm, url);
      $rootScope.isBusy = false;
      if (response.success) {
        var getData = await $scope.loadTheme();
        if (getData.success) {
          $scope.importThemeDto = getData.data;
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.loadTheme = async function () {
      var req = {
        method: "GET",
        url: "/rest/mix-tenancy/setup/load-theme",
      };
      return await apiService.sendRequest(req);
    };

    $scope.import = async function () {
      $scope.importThemeDto.themeId = $routeParams.id;
      $rootScope.isBusy = true;
      var response = await themeService.import($scope.importThemeDto);

      if (response.success) {
        $rootScope.isBusy = false;
        window.open("/", "_blank");
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.controller("UrlAliasController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "$location",
  "UrlAliasService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    $location,
    service,
    apiService,
    commonService
  ) {
    BaseCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );
    $scope.cates = ["Site", "System"];
    $scope.others = [];
    $scope.mixConfigurations = $rootScope.globalSettings;
    $scope.pageId = $routeParams.id;
    $scope.canDrag =
      $scope.request.orderBy !== "Priority" || $scope.request.direction !== "0";
    $scope.getList = async function () {
      $rootScope.isBusy = true;
      var id = $routeParams.id;
      $scope.request.query = "&page_id=" + id;
      var response = await service.getList($scope.request);
      $scope.canDrag =
        $scope.request.orderBy !== "Priority" ||
        $scope.request.direction !== "0";
      if (response.success) {
        $scope.data = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.remove = function (id) {
      $rootScope.showConfirm(
        $scope,
        "removeConfirmed",
        [id],
        null,
        "Remove",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeConfirmed = async function (id) {
      $rootScope.isBusy = true;
      var result = await service.delete(id);
      if (result.success) {
        if ($scope.removeCallback) {
          $rootScope.executeFunctionByName(
            "removeCallback",
            $scope.removeCallbackArgs,
            $scope
          );
        }
        $scope.getList();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.updateInfos = async function (index) {
      $scope.data.items.splice(index, 1);
      $rootScope.isBusy = true;
      var startIndex = $scope.data.items[0].priority - 1;
      for (var i = 0; i < $scope.data.items.length; i++) {
        $scope.data.items[i].priority = startIndex + i + 1;
      }
      var resp = await service.updateInfos($scope.data.items);
      if (resp && resp.success) {
        $scope.activedPage = resp.data;
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("UrlAliasService", [
    "$rootScope",
    "ApiService",
    "CommonService",
    "BaseRestService",
    function ($rootScope, apiService, commonService, baseService) {
        var serviceFactory = Object.create(baseService);
        serviceFactory.initService("/rest/mix-portal", "mix-url-alias");

        var _updateInfos = async function (pages) {
            var req = {
                method: "POST",
                url: this.prefixUrl + "/update-infos",
                data: JSON.stringify(pages),
            };
            return await apiService.sendRequest(req);
        };
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;
    },
]);

"use strict";
app.controller("UserController", [
  "$scope",
  "$rootScope",
  "$location",
  "ngAppSettings",
  "$routeParams",
  "AuthService",
  "UserServices",
  "RestMixDatabaseDataPortalService",
  "MixDbService",
  function (
    $scope,
    $rootScope,
    $location,
    ngAppSettings,
    $routeParams,
    authService,
    userServices,
    dataService,
    mixDbService
  ) {
    $scope.request = {
      pageSize: "10",
      pageIndex: 0,
      status: "Published",
      orderBy: "CreatedDateTime",
      direction: "Desc",
      fromDate: null,
      toDate: null,
      keyword: "",
    };

    $scope.mediaFile = {
      file: null,
      fullPath: "",
      folder: "User",
      title: "",
      description: "",
    };
    $scope.activedUser = null;
    $scope.relatedUsers = [];
    $rootScope.isBusy = false;
    $scope.data = {
      pageIndex: 0,
      pageSize: 1,
      totalItems: 0,
    };
    $scope.errors = [];

    $scope.range = function (max) {
      var input = [];
      for (var i = 1; i <= max; i += 1) input.push(i);
      return input;
    };

    $scope.loadUser = async function () {
      var id = $routeParams.id;
      if (id) {
        $rootScope.isBusy = true;
        var response = await userServices.getUser(id, "portal");
        if (response.success) {
          $scope.activedUser = response.data;
          $scope.loadAdditionalData();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };
    $scope.loadAdditionalData = async function () {
      mixDbService.initDbName("sysUserData");
      const getData = await mixDbService.getSingleByGuidParent(
        "User",
        $scope.activedUser.id
      );
      if (getData.success) {
        $scope.additionalData = getData.data;
        if (!$rootScope.isInRole("Owner")) {
          $scope.activedUser.roles = $scope.activedUser.roles.filter(
            (role) => role.description != "Owner"
          );
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $scope.additionalData = {};
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.loadMyProfile = async function () {
      $rootScope.isBusy = true;
      var response = await userServices.getMyProfile();
      if (response.success) {
        $scope.activedUser = response.data;
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        $rootScope.showErrors(response.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.loadUsers = async function (pageIndex) {
      authService.fillAuthData().then(() => {
        if ($rootScope.isInRoles(["Owner", "Admin"])) {
          $scope.createUrl = "/admin/user/create";
        }
      });

      if (pageIndex !== undefined) {
        $scope.request.pageIndex = pageIndex;
      }
      $rootScope.isBusy = true;
      var resp = await userServices.getUsers($scope.request);
      if (resp && resp.success) {
        $scope.data = resp.data;
        if (!$rootScope.isInRole("Owner")) {
          $scope.data.items = $scope.data.items.filter(
            (user) =>
              user.roles.length == 0 || user.roles[0].role.name != "Owner"
          );
        }
        $.each($scope.data.items, function (i, user) {
          $.each($scope.data, function (i, e) {
            if (e.userId === user.id) {
              user.isHidden = true;
            }
          });
        });
        $rootScope.isBusy = false;
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.removeUser = function (id) {
      $rootScope.showConfirm(
        $scope,
        "removeUserConfirmed",
        [id],
        null,
        "Remove User",
        "Deleted data will not able to recover, are you sure you want to delete this item?"
      );
    };

    $scope.removeUserConfirmed = async function (id) {
      $rootScope.isBusy = true;
      var result = await userServices.removeUser(id);
      if (result.success) {
        $scope.loadUsers();
      } else {
        $rootScope.showErrors(result.errors);
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.save = async function () {
      //if (user.avatar !== user.avatarUrl) {
      //    user.avatar = user.avatarUrl;
      //}
      $rootScope.isBusy = true;
      var resp = await userServices.saveUser($scope.activedUser);
      if (resp && resp.success) {
        mixDbService.initDbName("sysUserData");
        if ($scope.additionalData) {
          $scope.additionalData.parentType = "User";
          $scope.additionalData.parentId = $scope.activedUser.id;
          var saveResult = await mixDbService.save($scope.additionalData);
          if (saveResult.success) {
            $rootScope.showMessage("Additional Data Saved", "success");
            $scope.additionalData = saveResult.data;
          } else {
            $rootScope.showErrors(result.errors);
          }
        }
        $rootScope.isBusy = false;

        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.saveUserData = async function () {
      if ($scope.activedUser.userData) {
        $scope.activedUser.userData.parentId = $scope.activedUser.id;
        $scope.activedUser.userData.parentType = "User";
        await dataService.save($scope.activedUser.userData);
      }
    };

    $scope.resendConfirmEmail = async function (id) {
      if (id) {
        $rootScope.isBusy = true;
        var resp = await userServices.resendConfirmEmail(id);
        if (resp && resp.success) {
          $rootScope.showMessage("Sent mail successfully!", "success");
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      }
    };

    $scope.register = async function (user) {
      $rootScope.isBusy = true;
      var resp = await userServices.register(user);
      if (resp && resp.success) {
        $scope.activedUser = resp.data;
        $rootScope.showMessage("Update successfully!", "success");
        $rootScope.isBusy = false;
        $location.url("/admin/user/list");
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };

    $scope.updateRoleStatus = async function (role) {
      var userRole = {
        userId: $scope.activedUser.id,
        roleId: role.id,
        roleName: role.name,
        isUserInRole: role.isActived,
      };
      $rootScope.isBusy = true;
      var resp = await userServices.updateRoleStatus(userRole);
      if (resp && resp.success) {
        $rootScope.showMessage("Update successfully!", "success");
        $rootScope.isBusy = false;
        $location.url("/admin/user/list");
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
  },
]);

"use strict";
app.factory("UserServices", [
  "ApiService",
  "ngAppSettings",
  function (apiService, ngAuthSettings) {
    var usersServiceFactory = {};
    var apiUrl = "/rest/auth/user";

    var serviceBase = ngAuthSettings.serviceBase;

    var _resendConfirmEmail = function (id) {
      var url = `${apiUrl}/resend-confirm-email/${id}`;
      var req = {
        method: "GET",
        url: serviceBase + url,
      };

      return apiService.sendRequest(req);
    };
    var _getUserDemographicInfo = function () {
      var url = "/GetUserDemographicInfo";
      var req = {
        method: "GET",
        url: serviceBase + url,
      };

      return apiService.sendRequest(req);
    };

    var _importUsers = function (strBase64) {
      var url = "import-users";
      var req = {
        method: "POST",
        url: apiUrl + url,
        data: JSON.stringify({ strBase64: strBase64 }),
      };

      return apiService.sendRequest(req);
    };

    var _getUsers = function (request) {
      var data = _parseQuery(request);
      var url = `${apiUrl}/list`;

      if (data) {
        url += "?";
        url = url.concat(data);
      }
      var req = {
        method: "GET",
        url: url,
        data: request,
      };

      return apiService.sendRequest(req);
    };

    var _getUser = async function (id, viewType) {
      var url = "/rest/auth/user/details";
      if (id) {
        url += "/" + id;
      }
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    var _getMyProfile = async function () {
      var url = "/rest/auth/user/my-profile";
      var req = {
        method: "GET",
        url: url,
      };
      return await apiService.sendRequest(req);
    };

    var _updateRoleStatus = function (userInRole) {
      var req = {
        method: "POST",
        url: serviceBase + "/rest/auth/user/user-in-role",
        data: JSON.stringify(userInRole),
      };

      return apiService.sendRequest(req);
    };

    var _saveUser = async function (user) {
      var apiUrl = "/rest/auth/user/save";
      var req = {
        method: "POST",
        url: apiUrl,
        data: JSON.stringify(user),
      };
      return await apiService.sendRequest(req);
    };

    var _register = async function (user) {
      var apiUrl = "/rest/auth/user/";
      var req = {
        method: "POST",
        url: apiUrl + "register",
        data: JSON.stringify(user),
      };
      return await apiService.sendRequest(req);
    };

    var _removeUser = function (userId) {
      var req = {
        method: "DELETE",
        url: apiUrl + "/remove-user/" + userId,
      };

      return apiService.sendRequest(req);
    };

    var _parseQuery = function (req) {
      var result = "";
      if (req) {
        for (var key in req) {
          if (angular.isObject(req.query)) {
            req.query = JSON.stringify(req.query);
          }
          if (req.hasOwnProperty(key) && req[key]) {
            if (result != "") {
              result += "&";
            }
            result += `${key}=${req[key]}`;
          }
        }
        return result;
      } else {
        return result;
      }
    };

    usersServiceFactory.importUsers = _importUsers;
    usersServiceFactory.getUsers = _getUsers;
    usersServiceFactory.getUser = _getUser;
    usersServiceFactory.resendConfirmEmail = _resendConfirmEmail;
    usersServiceFactory.getMyProfile = _getMyProfile;
    usersServiceFactory.saveUser = _saveUser;
    usersServiceFactory.register = _register;
    usersServiceFactory.removeUser = _removeUser;
    usersServiceFactory.updateRoleStatus = _updateRoleStatus;
    usersServiceFactory.getUserDemographicInfo = _getUserDemographicInfo;
    return usersServiceFactory;
  },
]);

"use strict";
function PageDetailsController($scope, $element, $attrs) {
  var ctrl = this;
  ctrl.activedPage = null;
  ctrl.relatedPages = [];
  ctrl.data = [];
  ctrl.errors = [];
  ctrl.range = function (max) {
    var input = [];
    for (var i = 1; i <= max; i += 1) input.push(i);
    return input;
  };
  ctrl.loadPage = function (pageId) {
    ctrl.isBusy = true;
    var url = "/" + ctrl.currentLanguage + "/page/details/be/" + pageId; //byPage/' + pageId;
    ctrl.mixConfigurations.method = "GET";
    ctrl.mixConfigurations.url = url; // + '/true';
    ctrl.mixConfigurations.data = ctrl.request;
    $.ajax(ctrl.mixConfigurations).done(function (response) {
      if (response.success) {
        ctrl.activedPage = response.data;
        ctrl.initEditor();
      }
      ctrl.isBusy = false;
      ctrl.$apply();
    });
  };
  ctrl.loadPages = function (pageIndex) {
    ctrl.isBusy = true;
    if (pageIndex !== undefined) {
      ctrl.request.pageIndex = pageIndex;
    }
    if (ctrl.request.fromDate !== null) {
      ctrl.request.fromDate = ctrl.request.fromDate.toISOString();
    }
    if (ctrl.request.toDate !== null) {
      ctrl.request.toDate = ctrl.request.toDate.toISOString();
    }
    var url = "/" + ctrl.currentLanguage + "/page/list"; //byPage/' + pageId;
    ctrl.mixConfigurations.method = "POST";
    ctrl.mixConfigurations.url = url; // + '/true';
    ctrl.mixConfigurations.data = ctrl.request;
    $.ajax(ctrl.mixConfigurations).done(function (response) {
      ctrl.data = response.data;

      $.each(ctrl.data.items, function (i, page) {
        $.each(ctrl.activedPages, function (i, e) {
          if (e.pageId === page.id) {
            page.isHidden = true;
          }
        });
      });
      ctrl.isBusy = false;
      setTimeout(function () {
        $('[data-bs-toggle="popover"]').popover({
          html: true,
          content: function () {
            var content = $(this).next(".popover-body");
            return $(content).html();
          },
          title: function () {
            var title = $(this).attr("data-popover-content");
            return $(title).children(".popover-heading").html();
          },
        });
      }, 200);
      ctrl.$apply();
    });
  };

  ctrl.removePage = function (pageId) {
    if (confirm("Are you sure!")) {
      var url = "/" + ctrl.currentLanguage + "/page/delete/" + pageId;
      $.ajax({
        method: "GET",
        url: url,
        success: function (data) {
          ctrl.loadPages();
          ctrl.$apply();
        },
        error: function (a, b, c) {},
      });
    }
  };
  ctrl.savePage = function (page) {
    var url = "/" + ctrl.currentLanguage + "/page/save";
    $.ajax({
      method: "POST",
      url: url,
      data: page,
      success: function (data) {
        //ctrl.loadPages();
        if (data.success) {
          alert("success");
        } else {
          alert("failed! " + data.errors);
        }
      },
      error: function (a, b, c) {},
    });
  };

  ctrl.changeMedia = function (media) {
    var currentItem = null;
    if (ctrl.activedPage.mediaNavs === undefined) {
      ctrl.activedPage.mediaNavs = [];
    }
    $.each(ctrl.activedPage.mediaNavs, function (i, e) {
      if (e.mediaId === media.id) {
        e.isActived = media.isActived;
        currentItem = e;
        return false;
      }
    });
    if (currentItem === null) {
      currentItem = {
        description: media.description !== "undefined" ? media.description : "",
        image: media.fullPath,
        mediaId: media.id,
        page: ctrl.activedPage.id,
        specificulture: media.specificulture,
        position: 0,
        priority: ctrl.activedMedias.length + 1,
        isActived: true,
      };
      media.isHidden = true;
      ctrl.activedPage.mediaNavs.push(currentItem);
    }
  };

  ctrl.changePage = function (page) {
    var currentItem = null;
    $.each(ctrl.activedPage.pageNavs, function (i, e) {
      if (e.relatedPageId === page.id) {
        e.isActived = page.isActived;
        currentItem = e;
        return false;
      }
    });
    if (currentItem === null) {
      currentItem = {
        relatedPageId: page.id,
        sourcePageId: $("#page-id").val(),
        specificulture: page.specificulture,
        priority: ctrl.activedPage.pageNavs.length + 1,
        page: page,
        isActived: true,
      };
      page.isHidden = true;
      ctrl.activedPage.pageNavs.push(currentItem);
    }
  };

  ctrl.addProperty = function (type) {
    var i = $(".property").length;
    $.ajax({
      method: "GET",
      url:
        "/" +
        ctrl.currentLanguage +
        "/admin/" +
        type +
        "/AddEmptyProperty/" +
        i,
      success: function (data) {
        $("#tbl-properties > tbody").append(data);
        $(data).find(".prop-data-type").trigger("change");
      },
      error: function (a, b, c) {},
    });
    ctrl.updateHero = function (hero, prop, value) {
      hero[prop] = value;
    };

    ctrl.deleteHero = function (hero) {
      var idx = ctrl.list.indexOf(hero);
      if (idx >= 0) {
        ctrl.list.splice(idx, 1);
      }
    };
  };

  angular.module(appName).component("pageDetails", {
    templateUrl: "pageDetails.html",
    controller: PageDetailsController,
  });
}

modules.component("roleAssociations", {
  templateUrl:
    "/mix-app/views/app-portal/pages/user/role-associations/view.html",
  bindings: {
    userRoles: "=",
    callback: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "$location",
    "RoleService",
    function ($rootScope, $scope, ngAppSettings, $location, roleService) {
      var ctrl = this;
      ctrl.selected = null;
      ctrl.activedIndex = null;
      ctrl.$onInit = async () => {
        var getRoles = await roleService.getList();
        if (getRoles.success) {
          ctrl.roles = getRoles.data.items;
        }
        if (!ctrl.userRoles) {
          ctrl.userRoles = [];
        }
        angular.forEach(ctrl.roles, (e) => {
          e.isActived = ctrl.userRoles.find((u) => u.roleId == e.id) != null;
        });
      };

      ctrl.select = async (obj) => {
        if (ctrl.callback) {
          ctrl.callback({ role: obj });
        }
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.data[0].priority;
      };
      ctrl.goToDetails = async function (nav) {
        $location.url(ctrl.detailUrl + nav[ctrl.key]);
      };
    },
  ],
});

app.component("appSettingsAuth", {
  templateUrl:
    "/mix-app/views/app-portal/pages/app-settings/components/auth/view.html",
  controller: [
    "ngAppSettings",
    function (ngAppSettings) {
      var ctrl = this;
    },
  ],
  bindings: {
    appSettings: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("appSettingsHeart", {
  templateUrl:
    "/mix-app/views/app-portal/pages/app-settings/components/heart/view.html",
  bindings: {},
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "AppSettingsServices",
    "CommonService",
    function (
      $rootScope,
      $scope,
      ngAppSettings,
      settingService,
      commonService
    ) {
      var ctrl = this;
      ctrl.$onInit = function () {
        ctrl.databaseProviders = ngAppSettings.enums.database_providers;
        ctrl.cacheModes = ngAppSettings.enums.cache_modes;
        settingService.getAppSettings("mix_heart").then((resp) => {
          ctrl.appSettings = resp.data;
          $scope.$apply;
        });
      };
      ctrl.clearCache = async function () {
        $rootScope.isBusy = true;
        await commonService.clearCache();
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      };
    },
  ],
});

app.component("appSettingsDefault", {
  templateUrl:
    "/mix-app/views/app-portal/pages/app-settings/components/default/view.html",
  controller: [
    "$rootScope",
    "ngAppSettings",
    function ($rootScope, ngAppSettings) {
      var ctrl = this;
      ctrl.$onInit = function () {
        ctrl.properties = $.parseJSON(
          ctrl.appSettings.AppSettings.DefaultPostAttr
        );
        ctrl.trackedProperties = $.parseJSON(
          ctrl.appSettings.AppSettings.DefaultPostAttr
        );
        ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
      };
      ctrl.addPostProperty = function () {
        ctrl.properties.push({
          priority: 0,
          name: "",
          value: null,
          dataType: "7",
        });
      };
      ctrl.$doCheck = function () {
        if (ctrl.trackedProperties != ctrl.properties) {
          ctrl.trackedProperties = angular.copy(ctrl.properties);
          ctrl.appSettings.AppSettings.DefaultPostAttr = JSON.stringify(
            ctrl.properties
          );
        }
      }.bind(ctrl);
    },
  ],
  bindings: {
    appSettings: "=",
    cultures: "=",
    statuses: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("appSettingsGeneral", {
  templateUrl:
    "/mix-app/views/app-portal/pages/app-settings/components/general/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "CryptoService",
    "CommonService",
    function ($rootScope, $scope, cryptoService, commonService) {
      var ctrl = this;
      ctrl.$onInit = () => {
        var key = cryptoService.parseKeys(ctrl.appSettings.apiEncryptKey);
        ctrl.apiKey = key.key;
        ctrl.iv = key.iv;
      };
      ctrl.stopApplication = async function () {
        $rootScope.isBusy = true;
        await commonService.stopApplication();
        $rootScope.showMessage("success", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
      };
    },
  ],
  bindings: {
    appSettings: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("appSettingsSmtp", {
  templateUrl:
    "/mix-app/views/app-portal/pages/app-settings/components/smtp/view.html",
  controller: [
    "ngAppSettings",
    function (ngAppSettings) {
      var ctrl = this;
    },
  ],
  bindings: {
    appSettings: "=",
  },
});

modules.component("portalMenus", {
  templateUrl:
    "/mix-app/views/app-portal/pages/app-settings/components/portal-menus/view.html",
  bindings: {
    data: "=",
    allowedTypes: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "ApiService",
    "CommonService",
    "ngAppSettings",
    function (
      $rootScope,
      $scope,
      $location,
      apiService,
      commonService,
      ngAppSettings
    ) {
      var ctrl = this;
      // ctrl.icons = [];
      ctrl.translate = $rootScope.translate;
      ctrl.init = function () {
        ctrl.icons = ngAppSettings.icons;
      };
    },
  ],
});

app.component("customerMain", {
  templateUrl:
    "/mix-app/views/app-portal/pages/customer/components/main/customer-main.html",
  bindings: {
    customer: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("customerOrders", {
  templateUrl:
    "/mix-app/views/app-portal/pages/customer/components/orders/customer-orders.html",
  controller: [
    "$rootScope",
    "OrderServices",
    function ($rootScope, orderServices) {
      var ctrl = this;
      ctrl.removeOrder = function (id) {
        $rootScope.showConfirm(
          ctrl,
          "removeOrderConfirmed",
          [id],
          null,
          "Remove Order",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };

      ctrl.removeOrderConfirmed = async function (id) {
        var result = await orderServices.removeOrder(id);
        if (result.success) {
          $rootScope.showMessage("success", "success");
          window.top.location = window.top.location.href;
        } else {
          $rootScope.showMessage("failed");
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
  bindings: {
    customer: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("mixDatabaseEdm", {
  templateUrl:
    "/mix-app/views/app-portal/pages/mix-database/components/edm/view.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.mixConfigurations = $rootScope.globalSettings;
    },
  ],
  bindings: {
    model: "=",
  },
});

app.component("mixDatabaseMain", {
  templateUrl:
    "/mix-app/views/app-portal/pages/mix-database/components/main/view.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;

      ctrl.$onInit = () => {
        ctrl.globalSettings = $rootScope.globalSettings;
        ctrl.isInRole = $rootScope.isInRole;
      };
      ctrl.gennerateName = function () {
        if (
          !ctrl.model.id ||
          ctrl.model.systemName === null ||
          ctrl.model.systemName === ""
        ) {
          let prefix = ctrl.model.type == "System" ? "sys" : "";
          ctrl.model.systemName = $rootScope.generateKeyword(
            `${prefix} ${ctrl.model.displayName}`,
            ctrl.model.namingConvention == "TitleCase" ? "" : "_",
            ctrl.model.namingConvention == "TitleCase",
            true
          );
          if (ctrl.schema) {
            ctrl.model.systemName = `${ctrl.schema}_${ctrl.model.systemName}`;
          }
        }
      };
    },
  ],
  bindings: {
    model: "=",
    schema: "=?",
  },
});

app.component("moduleMain", {
  templateUrl:
    "/mix-app/views/app-portal/pages/module/components/main/main.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.localizeSettings = $rootScope.globalSettings;
      ctrl.isInRole = $rootScope.isInRole;
      ctrl.gennerateName = function () {
        if (
          !ctrl.module.id ||
          ctrl.module.systemName === null ||
          ctrl.module.systemName === ""
        ) {
          ctrl.module.systemName = $rootScope.generateKeyword(
            ctrl.module.title,
            "_",
            true,
            true
          );
        }
      };
    },
  ],
  bindings: {
    module: "=",
  },
});

app.component("moduleAdvanced", {
  templateUrl:
    "/mix-app/views/app-portal/pages/module/components/module-advanced/view.html",
  bindings: {
    model: "=",
    additionalData: "=",
  },
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = function () {
        ctrl.isAdmin = $rootScope.isAdmin;
      };
    },
  ],
});

app.component("moduleContent", {
  templateUrl:
    "/mix-app/views/app-portal/pages/module/components/module-content/view.html",
  bindings: {
    model: "=",
    additionalData: "=",
  },
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.$onInit = function () {
        ctrl.backUrl = `/admin/module/details`;
      };
      ctrl.mixConfigurations = $rootScope.globalSettings;
    },
  ],
});

app.component("moduleType", {
  templateUrl:
    "/mix-app/views/app-portal/pages/module/components/module-type/view.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.mixConfigurations = $rootScope.globalSettings;
    },
  ],
  bindings: {
    model: "=",
  },
});

app.component("mixdbContextDatabases", {
    bindings: {
        model: "=",
    },
    templateUrl:
        "/mix-app/views/app-portal/pages/mixdb-context/components/mix-databases/view.html",
    controller: [
        "$rootScope",
        "$scope",
        "RestMixDatabasePortalService",
        function ($rootScope, $scope, databaseService) {
            var ctrl = this;
            ctrl.request = $rootScope.getRequest();
            ctrl.$onInit = () => {
                ctrl.globalSettings = $rootScope.globalSettings;
                ctrl.isInRole = $rootScope.isInRole;
                ctrl.request.mixDatabaseContextId = ctrl.model.id;
                ctrl.loadDatabases();
            };
            ctrl.loadDatabases = async function (pageIndex) {
                if (pageIndex !== undefined) {
                    ctrl.request.pageIndex = pageIndex;
                }
                if (ctrl.model.id) {
                    var resp = await databaseService.getList(ctrl.request);
                    if (resp && resp.success) {
                        ctrl.data = resp.data;
                        $scope.$apply();
                    }
                }
            };
            ctrl.remove = async function (dbId) {
                if (dbId) {
                    if (
                        confirm(
                            "Deleted data will not able to recover, are you sure you want to delete this item?"
                        )
                    ) {
                        ctrl.removeConfirmed(dbId);
                    }
                }
            };
            ctrl.removeConfirmed = async function (id) {
                $rootScope.isBusy = true;
                var result = await databaseService.delete([id]);
                if (result.success) {
                    $rootScope.isBusy = true;
                    ctrl.loadDatabases();
                    $scope.$apply();
                } else {
                    $rootScope.showErrors(result.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
        },
    ],
});

app.component("pageGeneral", {
  templateUrl:
    "/mix-app/views/app-portal/pages/page/components/general/general.html",
  controller: function ($rootScope) {
    var ctrl = this;
    ctrl.isInRole = $rootScope.isInRole;
    ctrl.dataTypes = [
      {
        title: "String",
        value: "text",
      },
      {
        title: "Int",
        value: "int",
      },
      {
        title: "Image",
        value: "image",
      },
      {
        title: "Boolean",
        value: "boolean",
      },
    ];
    ctrl.configurations = {
      core: {},
      plugins: {
        btnsDef: {
          // Customizables dropdowns
          image: {
            dropdown: ["insertImage", "upload", "base64", "noembed"],
            ico: "insertImage",
          },
        },
        btns: [
          ["viewHTML"],
          ["undo", "redo"],
          ["formatting"],
          ["strong", "em", "del", "underline"],
          ["link"],
          ["image"],
          ["justifyLeft", "justifyCenter", "justifyRight", "justifyFull"],
          ["unorderedList", "orderedList"],
          ["foreColor", "backColor"],
          ["preformatted"],
          ["horizontalRule"],
          ["fullscreen"],
        ],
        plugins: {
          // Add imagur parameters to upload plugin
          upload: {
            serverPath: "https://api.imgur.com/3/image",
            fileFieldName: "image",
            headers: {
              Authorization: "Client-ID 9e57cb1c4791cea",
            },
            urlPropertyName: "data.link",
          },
        },
      },
    };
    ctrl.addProperty = function (type) {
      var i = $(".property").length;
      ctrl.page.properties.push({
        priority: 0,
        name: "",
        value: null,
        dataType: 0,
      });
    };
    ctrl.initEditor = function () {
      setTimeout(function () {
        // Init Code editor
        $.each($(".code-editor"), function (i, e) {
          var container = $(this);
          var editor = ace.edit(e);
          if (container.hasClass("json")) {
            editor.session.setMode("ace/mode/json");
          } else {
            editor.session.setMode("ace/mode/razor");
          }
          editor.setTheme("ace/theme/chrome");
          //editor.setReadOnly(true);

          editor.session.setUseWrapMode(true);
          editor.setOptions({
            maxLines: Infinity,
          });
          editor.getSession().on("change", function (e) {
            // e.type, etc
            $(container).parent().find(".code-content").val(editor.getValue());
          });
        });
        $.each($(".editor-content"), function (i, e) {
          var $demoTextarea = $(e);
          $demoTextarea.quill(ctrl.configurations.plugins);
        });
      }, 200);
    };
  },
  bindings: {
    page: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("pageModules", {
  templateUrl:
    "/mix-app/views/app-portal/pages/page/components/modules/modules.html",
  bindings: {
    page: "=",
    onDelete: "&?",
    onUpdate: "&?",
  },
  controller: [
    "$scope",
    "ngAppSettings",
    "ModuleRestService",
    function ($scope, ngAppSettings, moduleService) {
      var ctrl = this;
      ctrl.modules = [];
      ctrl.request = angular.copy(ngAppSettings.request);

      ctrl.$onInit = async () => {
        ctrl.request.columns = [
          "id",
          "title",
          "systemName",
          "createdDateTime",
          "type",
        ];
        ctrl.request.culture = ctrl.page.specificulture;
        ctrl.loadModules();
      };
      ctrl.loadModules = async () => {
        let getModules = await moduleService.getList(ctrl.request);
        if (getModules.success) {
          ctrl.modules = getModules.data.items;
          $scope.$apply();
        }
      };
      ctrl.select = async (associations) => {
        ctrl.associations = associations;
        if (ctrl.onUpdate) {
          ctrl.onUpdate({ associations: associations });
        }
      };
    },
  ],
});

app.component("pageMain", {
  templateUrl: "/mix-app/views/app-portal/pages/page/components/main/main.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope) {
      var ctrl = this;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      // ctrl.setPageType = function (type) {
      //     ctrl.page.type = $index;
      // }
      ctrl.generateSeo = function () {
        if (ctrl.page) {
          if (ctrl.page.seoName === null || ctrl.page.seoName === "") {
            ctrl.page.seoName = $rootScope.generateKeyword(
              ctrl.page.title,
              "-"
            );
          }
          if (ctrl.page.seoTitle === null || ctrl.page.seoTitle === "") {
            ctrl.page.seoTitle = ctrl.page.title;
          }
          if (
            ctrl.page.seoDescription === null ||
            ctrl.page.seoDescription === ""
          ) {
            ctrl.page.seoDescription = ctrl.page.excerpt;
          }
          if (ctrl.page.seoKeywords === null || ctrl.page.seoKeywords === "") {
            ctrl.page.seoKeywords = ctrl.page.title;
          }
        }
      };
    },
  ],
  bindings: {
    page: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("pageAdvanced", {
  templateUrl:
    "/mix-app/views/app-portal/pages/page/components/page-advanced/view.html",
  bindings: {
    model: "=",
    additionalData: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    function ($rootScope, $scope) {
      var ctrl = this;

      ctrl.translate = $rootScope.translate;
      ctrl.$onInit = function () {
        ctrl.isAdmin = $rootScope.isAdmin;
      };
    },
  ],
});

app.component("pageContent", {
  templateUrl:
    "/mix-app/views/app-portal/pages/page/components/page-content/view.html",
  bindings: {
    additionalData: "=",
    model: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    function ($rootScope, $scope) {
      var ctrl = this;
      ctrl.translate = $rootScope.translate;
      ctrl.$onInit = function () {
        ctrl.backUrl = `/admin/page/details`;
      };
      ctrl.generateSeo = function () {
        if ($scope.viewmodel) {
          if (ctrl.model.seoName === null || ctrl.model.seoName === "") {
            ctrl.model.seoName = $rootScope.generateKeyword(
              ctrl.model.title,
              "-"
            );
          }
          if (ctrl.model.seoTitle === null || ctrl.model.seoTitle === "") {
            ctrl.model.seoTitle = ctrl.model.title;
          }
          if (
            ctrl.model.seoDescription === null ||
            ctrl.model.seoDescription === ""
          ) {
            ctrl.model.seoDescription = ctrl.model.excerpt;
          }
          if (
            ctrl.model.seoKeywords === null ||
            ctrl.model.seoKeywords === ""
          ) {
            ctrl.model.seoKeywords = ctrl.model.title;
          }
        }
      };
    },
  ],
});

app.component("pageType", {
  templateUrl:
    "/mix-app/views/app-portal/pages/page/components/page-type/view.html",
  bindings: {
    model: "=",
  },
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.localizeSettings = $rootScope.globalSettings;
    },
  ],
});

app.component("pageParents", {
  templateUrl:
    "/mix-app/views/app-portal/pages/page/components/parents/parents.html",
  bindings: {
    page: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("pagePlugPlay", {
  templateUrl:
    "/mix-app/views/app-portal/pages/page/components/plug-play/plug-play.html",
  bindings: {
    page: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("productRelated", {
  templateUrl:
    "/mix-app/views/app-portal/pages/product/components/related/productRelated.html",
  controller: function () {
    var ctrl = this;
    ctrl.activeProduct = function (pr) {
      var currentItem = null;
      $.each(ctrl.product.productNavs, function (i, e) {
        if (e.relatedProductId === pr.id) {
          e.isActived = pr.isActived;
          currentItem = e;
          return false;
        }
      });
      if (currentItem === null) {
        currentItem = {
          relatedProductId: pr.id,
          sourceProductId: ctrl.product.id,
          specificulture: ctrl.product.specificulture,
          priority: ctrl.product.productNavs.length + 1,
          relatedProduct: pr,
          isActived: true,
        };
        pr.isHidden = true;
        ctrl.product.productNavs.push(currentItem);
      }
    };
  },
  bindings: {
    product: "=",
    list: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("pageSeo", {
  templateUrl: "/mix-app/views/app-portal/pages/page/components/seo/seo.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.translate = function (keyword) {
        return $rootScope.translate(keyword);
      };
    },
  ],
  bindings: {
    page: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("permissionParents", {
  templateUrl:
    "/mix-app/views/app-portal/pages/permission/components/parents/parents.html",
  bindings: {
    page: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("permissionMain", {
  templateUrl:
    "/mix-app/views/app-portal/pages/permission/components/main/main.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "$routeParams",
    function ($rootScope, $scope, ngAppSettings, $routeParams) {
      var ctrl = this;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.icons = ngAppSettings.icons;
      ctrl.setPageType = function (type) {
        ctrl.page.type = $index;
      };
      ctrl.generateKeyword = function (text) {
        if (!$routeParams.id && text) {
          ctrl.page.textKeyword =
            "portal_" +
            text
              .replace(/[^a-zA-Z0-9]+/g, "_")
              .replace(/([A-Z]+)([A-Z][a-z])/g, "$1-$2")
              .replace(/([a-z])([A-Z])/g, "$1-$2")
              .replace(/([0-9])([^0-9])/g, "$1-$2")
              .replace(/([^0-9])([0-9])/g, "$1-$2")
              .replace(/-+/g, "_")
              .toLowerCase();
        }
      };
    },
  ],
  bindings: {
    page: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("permissionPlugPlay", {
  templateUrl:
    "/mix-app/views/app-portal/pages/permission/components/plug-play/plug-play.html",
  bindings: {
    page: "=",
    prefixParent: "=",
    prefixChild: "=",
    searchText: "=",
    onDelete: "&",
    onUpdate: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "$element",
    "PermissionService",
    function ($rootScope, $scope, $location, $element, service) {
      var ctrl = this;
      ctrl.type = "Children";
      ctrl.goToPath = $rootScope.goToPath;
      ctrl.request = {
        pageSize: "5",
        pageIndex: 0,
        status: "Published",
        orderBy: "CreatedDateTime",
        direction: "Desc",
        fromDate: null,
        toDate: null,
      };
      ctrl.pages = [];
      ctrl.init = function () {
        if (ctrl.page) {
          ctrl.request.exceptIds = ctrl.page.parentNavs
            .map((p) => p.pageId)
            .concat(ctrl.page.childNavs.map((p) => p.pageId));
          if (ctrl.request.exceptIds.indexOf(ctrl.page.id) === -1) {
            ctrl.request.exceptIds.push(ctrl.page.id);
          }
          ctrl.getList();
        }
      };
      ctrl.selectPane = function (pane) {
        if (ctrl.page) {
          ctrl.type = pane.header;
          ctrl.request.keyword = "";
          ctrl.init();
        }
      };

      ctrl.selectItem = (nav) => {
        if (ctrl.type == "Parents") {
          if (
            !$rootScope.findObjectByKey(ctrl.page.parentNavs, "pageId", nav.id)
          ) {
            ctrl.page.parentNavs.push({
              isActived: true,
              pageId: ctrl.page.id,
              parentId: nav.id,
              description: nav.textDefault,
              status: "Published",
              parent: nav,
            });
          }
        } else {
          if (
            !$rootScope.findObjectByKey(ctrl.page.childNavs, "pageId", nav.id)
          ) {
            ctrl.page.childNavs.push({
              isActived: true,
              pageId: nav.id,
              parentId: ctrl.page.id,
              description: nav.textDefault,
              status: "Published",
              page: nav,
            });
          }
        }
      };

      ctrl.getList = async function () {
        $rootScope.isBusy = true;
        var resp = await service.getList(ctrl.request);
        if (resp && resp.success) {
          ctrl.pages = resp.data;
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors || ["Failed"]);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
});

modules.component("postFilterList", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/filter-list/filter-list.html",
  bindings: {
    request: "=",
    key: "=?",
    orders: "=?",
    createUrl: "=",
    createText: "=",
    categories: "=",
    postTypes: "=",
    callback: "&",
  },
  controller: [
    "$scope",
    "$rootScope",
    "ngAppSettings",
    "RestMixDatabaseDataPortalService",
    "CultureService",
    function ($scope, $rootScope, ngAppSettings, dataService, cultureService) {
      var ctrl = this;
      ctrl.dateRange = {
        fromDate: null,
        toDate: null,
      };
      ctrl.request = angular.copy(ngAppSettings.request);

      ctrl.init = function () {
        if (!ctrl.orders) {
          ctrl.orders = ngAppSettings.orders;
        }
        ctrl.directions = ngAppSettings.directions;
        ctrl.pageSizes = ngAppSettings.pageSizes;
        ctrl.statuses = [];
        var statuses = ngAppSettings.contentStatuses;
        if (ctrl.request && ctrl.request.contentStatuses) {
          statuses = ctrl.request.contentStatuses;
        }
        angular.forEach(statuses, function (val, i) {
          ctrl.statuses.push({
            value: val,
            title: val,
          });
        });
      };
      ctrl.addMetadataQuery = () => {
        ctrl.request.metadataQueries.push({
          fieldName: "",
          value: "",
          isRequired: false,
        });
      };
      ctrl.clearMetadataQuery = () => {
        ctrl.request.metadataQueries = [];
        ctrl.apply();
      };
      ctrl.changeLang = function (culture) {
        if (culture) {
          ctrl.selectedCulture = culture;
          ctrl.request.culture = culture.specificulture;
        } else {
          ctrl.selectedCulture = null;
          ctrl.request.culture = null;
        }
        ctrl.apply(0);
      };
      ctrl.apply = function (pageIndex) {
        $rootScope.setRequest(ctrl.request, ctrl.key);
        ctrl.callback({ pageIndex: pageIndex });
      };
      ctrl.updateDate = function () {
        if (Date.parse(ctrl.dateRange.fromDate)) {
          ctrl.request.fromDate = new Date(
            ctrl.dateRange.fromDate
          ).toISOString();
        } else {
          $scope.request.fromDate = null;
        }
        if (Date.parse(ctrl.dateRange.toDate)) {
          ctrl.request.toDate = new Date(ctrl.dateRange.toDate).toISOString();
        } else {
          ctrl.request.toDate = null;
        }
        $rootScope.setRequest(ctrl.request, ctrl.key);
        ctrl.callback({ pageIndex: 0 });
      };
    },
  ],
});

app.component("postGeneral", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/general/view.html",
  controller: [
    "$rootScope",
    "ngAppSettings",
    function ($rootScope, ngAppSettings) {
      var ctrl = this;
      ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
      ctrl.$onInit = function () {};
      ctrl.addProperty = function (type) {
        var i = $(".property").length;
        ctrl.post.properties.push({
          title: "",
          name: "",
          value: null,
          dataType: "text",
        });
      };
    },
  ],
  bindings: {
    post: "=",
    isAdmin: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("postMain", {
  templateUrl: "/mix-app/views/app-portal/pages/post/components/main/view.html",
  bindings: {
    post: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    function ($rootScope, $scope) {
      var ctrl = this;
      ctrl.translate = $rootScope.translate;
      ctrl.generateSeo = function () {
        if (ctrl.post) {
          if (!ctrl.post.seoName) {
            ctrl.post.seoName = $rootScope.generateKeyword(
              ctrl.post.title,
              "-"
            );
          }
          if (!ctrl.post.seoTitle) {
            ctrl.post.seoTitle = ctrl.post.title;
          }
          if (!ctrl.post.seoDescription === null) {
            ctrl.post.seoDescription = ctrl.post.excerpt;
          }
          if (!ctrl.post.seoKeywords) {
            ctrl.post.seoKeywords = ctrl.post.title;
          }
        }
      };
    },
  ],
});

app.component("postMedias", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/medias/view.html",
  controller: function () {
    var ctrl = this;
    ctrl.activeMedia = function (media) {
      var currentItem = null;
      if (ctrl.post.mediaNavs === null) {
        ctrl.post.mediaNavs = [];
      }
      $.each(ctrl.post.mediaNavs, function (i, e) {
        if (e.mediaId === media.id) {
          e.isActived = media.isActived;
          currentItem = e;
          return false;
        }
      });
      if (currentItem === null) {
        currentItem = {
          description:
            media.description !== "undefined" ? media.description : "",
          image: media.filePath,
          mediaId: media.id,
          post: ctrl.post.id,
          specificulture: media.specificulture,
          position: 0,
          priority: ctrl.post.mediaNavs.length + 1,
          isActived: true,
        };
        media.isHidden = true;
        ctrl.post.mediaNavs.push(currentItem);
      }
    };
  },
  bindings: {
    post: "=",
    medias: "=",
    loadMedia: "&",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("postModules", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/modules/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "SharedModuleDataService",
    function ($rootScope, $scope, ngAppSettings, moduleDataService) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.translate = function (keyword, wrap, defaultValue) {
        return $rootScope.translate(keyword, wrap, defaultValue);
      };

      ctrl.removeData = function (id, moduleContentId) {
        $rootScope.showConfirm(
          ctrl,
          "removeDataConfirmed",
          [id, moduleContentId],
          null,
          "Remove Data",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };
      ctrl.removeDataConfirmed = async function (id, moduleContentId) {
        $rootScope.isBusy = true;
        var result = await moduleDataService.removeModuleData(id);
        if (result.success) {
          ctrl.loadModuleDatas(moduleContentId);
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.saveDataCallback = function (data) {
        if (data) {
          ctrl.loadModuleDatas(data.moduleContentId);
        }
      };
      ctrl.loadModuleDatas = async function (id, pageIndex) {
        $rootScope.isBusy = true;
        $scope.dataColumns = [];
        var request = angular.copy(ngAppSettings.request);
        request.query = "?moduleContentId=" + id + "&post_id=" + ctrl.post.id;
        if (pageIndex) {
          request.pageIndex = pageIndex;
        }
        var response = await moduleDataService.getModuleDatas(request);
        if (response.success) {
          var nav = $rootScope.findObjectByKey(
            ctrl.post.moduleNavs,
            "moduleContentId",
            id
          );
          if (nav) {
            nav.module.data = response.data;
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.updateDataInfos = async function (items) {
        $rootScope.isBusy = true;
        var resp = await moduleDataService.updateInfos(items);
        if (resp && resp.success) {
          $scope.activedPage = resp.data;
          $rootScope.showMessage("success", "success");
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
  bindings: {
    post: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("postParents", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/parents/view.html",
  bindings: {
    post: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("postAdvanced", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/post-advanced/view.html",
  bindings: {
    model: "=",
    additionalData: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$routeParams",
    function ($rootScope, $scope, $routeParams) {
      var ctrl = this;
      ctrl.translate = $rootScope.translate;
      ctrl.$onInit = function () {
        ctrl.isAdmin = $rootScope.isAdmin;
        if ($routeParams.template) {
          ctrl.defaultTemplate = $routeParams.template;
        }
        if ($routeParams.layout) {
          ctrl.defaultLayout = $routeParams.layout;
        }
      };
    },
  ],
});

app.component("postContent", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/post-content/view.html",
  bindings: {
    model: "=",
    additionalData: "=",
    loadingData: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "PostRestService",
    function ($rootScope, $scope, ngAppSettings, service) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.translate = $rootScope.translate;
      ctrl.relatedData = {};
      ctrl.$onInit = function () {
        ctrl.backUrl = `/admin/post/details`;
      };
      ctrl.generateSeo = function () {
        if (ctrl.model) {
          if (ctrl.model.seoName === null || ctrl.model.seoName === "") {
            ctrl.model.seoName = $rootScope.generateKeyword(
              ctrl.model.title,
              "-"
            );
          }
          if (ctrl.model.seoTitle === null || ctrl.model.seoTitle === "") {
            ctrl.model.seoTitle = ctrl.model.title;
          }
          if (
            ctrl.model.seoDescription === null ||
            ctrl.model.seoDescription === ""
          ) {
            ctrl.model.seoDescription = ctrl.model.excerpt;
          }
          if (
            ctrl.model.seoKeywords === null ||
            ctrl.model.seoKeywords === ""
          ) {
            ctrl.model.seoKeywords = ctrl.model.title;
          }
        }
      };
      ctrl.getListRelated = async function (pageIndex) {
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        var resp = await service.getList(ctrl.request);
        if (resp && resp.success) {
          ctrl.relatedData = angular.copy(resp.data);
          ctrl.relatedData.items = [];
          angular.forEach(resp.data.items, (element) => {
            var existed = $rootScope.findObjectByKey(
              ctrl.model.postNavs,
              ["sourceId", "destinationId"],
              [ctrl.model.id, element.id]
            );

            var obj = {
              description: element.title,
              destinationId: element.id,
              image: element.image,
              isActived: existed !== null,
              sourceId: ctrl.model.id,
              specificulture: ctrl.model.specificulture,
              status: "Published",
            };

            ctrl.relatedData.items.push(obj);
          });
          console.log(ctrl.relatedData);
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(getData.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
});

modules.component("relatedPosts", {
  templateUrl:
    "/mix-app/views/app-portal/pages/post/components/related-navigations/view.html",
  bindings: {
    title: "=",
    parentId: "=",
    parentType: "=",
    description: "=?",
    postTypes: "=?",
    mixDatabaseName: "=?",
    image: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "PostPostRestService",
    "PostRestService",
    function ($rootScope, $scope, ngAppSettings, service, postService) {
      var ctrl = this;
      ctrl.selected = null;
      ctrl.posts = {
        items: [],
      };
      ctrl.data = {
        items: [],
      };
      ctrl.$onInit = async () => {
        ctrl.request = angular.copy(ngAppSettings.request);
        ctrl.postRequest = angular.copy(ngAppSettings.request);
        ctrl.postRequest.searchColumns = "title,excerpt";
        if (ctrl.mixDatabaseName) {
          ctrl.postRequest.mixDatabaseName = ctrl.mixDatabaseName;
        }
        ctrl.postRequest.pageSize = 5;
        await ctrl.loadRelatedPosts();
        await ctrl.loadPosts();
      };
      ctrl.addRelatedPost = async (post) => {
        var tmp = ctrl.data.items.find(
          (m) => m.child.id == post.id || m.parentId == post.id
        );
        if (!tmp) {
          if (post) {
            let dto = {
              parentId: ctrl.parentId,
              childId: post.id,
            };
            var resp = await service.create(dto);
            if (resp.success) {
              $rootScope.showMessage("Success", "success");
              await ctrl.loadRelatedPosts();
              $rootScope.isBusy = false;
              $scope.$apply();
            } else {
              $rootScope.showErrors(resp.errors);
              $rootScope.isBusy = false;
              $scope.$apply();
            }
          }
        } else {
          $rootScope.showMessage(`${post.title} is existed`, "warning");
        }
      };

      ctrl.remove = function (id) {
        if (
          confirm(
            "Deleted data will not able to recover, are you sure you want to delete this item?"
          )
        ) {
          ctrl.removeConfirmed(id);
        }
      };

      ctrl.removeConfirmed = async function (id) {
        $rootScope.isBusy = true;
        var result = await service.delete([id]);
        if (result.success) {
          ctrl.loadRelatedPosts();
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.loadPosts = async (pageIndex) => {
        $rootScope.isBusy = true;
        if (pageIndex !== undefined) {
          ctrl.postRequest.pageIndex = pageIndex;
        }
        if (ctrl.postRequest.fromDate !== null) {
          var d = new Date(ctrl.postRequest.fromDate);
          ctrl.postRequest.fromDate = d.toISOString();
        }
        if (ctrl.postRequest.toDate !== null) {
          var dt = new Date(ctrl.postRequest.toDate);
          ctrl.postRequest.toDate = dt.toISOString();
        }
        let getData = await postService.filter(ctrl.postRequest);
        if (getData.success) {
          ctrl.posts = getData.data;
          $rootScope.isBusy = false;
        } else {
          $rootScope.isBusy = false;
          $rootScope.showErrors(getData.errors);
        }
        $scope.$apply();
      };

      ctrl.loadRelatedPosts = async (pageIndex) => {
        if (ctrl.parentId) {
          $rootScope.isBusy = true;
          if (pageIndex !== undefined) {
            ctrl.request.pageIndex = pageIndex;
          }
          if (ctrl.request.fromDate !== null) {
            var d = new Date(ctrl.postRequest.fromDate);
            ctrl.request.fromDate = d.toISOString();
          }
          if (ctrl.request.toDate !== null) {
            var dt = new Date(ctrl.postRequest.toDate);
            ctrl.postRequest.toDate = dt.toISOString();
          }
          ctrl.request.parentId = ctrl.parentId;
          let getData = await service.search(ctrl.request);
          if (getData.success) {
            ctrl.data = getData.data;
            $rootScope.isBusy = false;
          } else {
            $rootScope.isBusy = false;
            $rootScope.showErrors(getData.errors);
          }
          $scope.$apply();
        }
      };
    },
  ],
});

app.component("postSeo", {
  templateUrl: "/mix-app/views/app-portal/pages/post/components/seo/view.html",
  bindings: {
    post: "=",
    onDelete: "&",
    onUpdate: "&",
  },
});

app.component("serviceMain", {
  templateUrl:
    "/mix-app/views/app-portal/pages/service/components/main/view.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.gennerateName = function () {
        if (
          !ctrl.model.id ||
          ctrl.model.name === null ||
          ctrl.model.name === ""
        ) {
          ctrl.model.name = $rootScope.generateKeyword(ctrl.model.title, "_");
        }
      };
    },
  ],
  bindings: {
    model: "=",
  },
});

app.component("themeExportCultures", {
    templateUrl:
        "/mix-app/views/app-portal/pages/theme/components/theme-export-cultures/view.html",
    controller: [
        "$rootScope",
        "$scope",
        "ngAppSettings",
        function ($rootScope, $scope, ngAppSettings) {
            var ctrl = this;
            var service = $rootScope.getRestService("culture");
            ctrl.selectAllContent = false;
            ctrl.request = angular.copy(ngAppSettings.request);
            ctrl.$onInit = async () => {
                ctrl.getList();
            };
            ctrl.getList = async (cultureIndex) => {
                if (cultureIndex !== undefined) {
                    ctrl.request.cultureIndex = cultureIndex;
                }
                if (ctrl.request.fromDate !== null) {
                    var d = new Date(ctrl.request.fromDate);
                    ctrl.request.fromDate = d.toISOString();
                }
                if (ctrl.request.toDate !== null) {
                    var d = new Date(ctrl.request.toDate);
                    ctrl.request.toDate = d.toISOString();
                }
                let getData = await service.getList(ctrl.request);
                if (getData.success) {
                    ctrl.data = getData.data;
                }
            };
            ctrl.selectContent = (culture, selected) => {
                ctrl.selectAllContent = ctrl.selectAllContent && selected;
                ctrl.selectAllData = ctrl.selectAllData && selected;
                culture.isExportData = selected && culture.isExportData;
                ctrl.updateContent([culture.id], selected);
            };
            ctrl.updateContent = function (arr, selected) {
                if (selected) {
                    ctrl.exportThemeDto.cultureIds = ctrl.unionArray(
                        ctrl.exportThemeDto.cultureIds,
                        arr
                    );
                } else {
                    ctrl.exportThemeDto.cultureIds =
                        ctrl.exportThemeDto.cultureIds.filter((m) => arr.indexOf(m) < 0);
                    ctrl.updateData(arr, false);
                }
            };
            ctrl.selectAll = function (arr) {
                // ctrl.selectedList.data = [];
                var ids = arr.map(function (obj) {
                    return obj.id;
                });
                ctrl.updateContent(ids, ctrl.selectAllContent);
                angular.forEach(arr, function (e) {
                    e.isActived = ctrl.selectAllContent;
                });
            };
            ctrl.unionArray = (a, b) => {
                return [...new Set([...a, ...b])];
            };
        },
    ],
    bindings: {
        exportThemeDto: "=",
    },
});

modules.component("rolePageNav", {
  templateUrl:
    "/mix-app/views/app-portal/pages/role/components/role-page-navigation/role-page-navigations.html",
  bindings: {
    prefix: "=",
    page: "=",
    callback: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "RoleService",
    function ($rootScope, $scope, ngAppSettings, roleServices) {
      var ctrl = this;
      ctrl.selected = null;
      ctrl.updateOrders = function (index) {
        ctrl.data.splice(index, 1);
        for (var i = 0; i < ctrl.data.length; i++) {
          ctrl.data[i].priority = i + 1;
        }
      };
      //ctrl.change = async function () {
      //    //var permission = ctrl.page.navPermission;
      //    //$rootScope.isBusy = true;
      //    //var resp = await roleServices.updatePermission(permission);
      //    //if (resp && resp.success) {
      //    //    $rootScope.showMessage('Update successfully!', 'success');
      //    //    $rootScope.isBusy = false;
      //    //    $scope.$apply();
      //    //}
      //    //else {
      //    //    if (resp) { $rootScope.showErrors(resp.errors); }
      //    //    $rootScope.isBusy = false;
      //    //    $scope.$apply();
      //    //}
      //};
    },
  ],
});

app.component("themeExportMixDatabaseContexts", {
    templateUrl:
        "/mix-app/views/app-portal/pages/theme/components/theme-export-mix-databases/view.html",
    controller: [
        "$rootScope",
        "$scope",
        "ngAppSettings",
        "RestMixDatabaseContextService",
        function ($rootScope, $scope, ngAppSettings, dbContextService) {
            var ctrl = this;
            var service = $rootScope.getRestService("mix-database");
            ctrl.selectAllContent = false;
            ctrl.selectAllData = false;
            ctrl.dbContextrequest = angular.copy(ngAppSettings.request);
            ctrl.request = angular.copy(ngAppSettings.request);
            ctrl.$onInit = async () => {
                ctrl.request.pageSize = null;
                ctrl.loadDbContexts();
            };
            ctrl.loadDbContexts = async function (pageIndex) {
                if (pageIndex !== undefined) {
                    ctrl.dbContextrequest.pageIndex = pageIndex;
                }

                var resp = await dbContextService.getList(ctrl.dbContextrequest);
                if (resp && resp.success) {
                    ctrl.data = resp.data;
                    ctrl.data.items.prepend({
                        displayName: 'Master Database'
                    });
                    $scope.$apply();
                }
            };
            
            ctrl.selectContent = (mixDatabaseContext, selected) => {
                ctrl.selectAllContent = ctrl.selectAllContent && selected;
                ctrl.exportThemeDto.content.mixDatabaseContextIds = ctrl.updateArray(
                    ctrl.exportThemeDto.content.mixDatabaseContextIds,
                    [mixDatabaseContext.id],
                    selected
                );
            };
            ctrl.selectDbContent = (mixDatabase, selected) => {
                ctrl.selectAllContent = ctrl.selectAllContent && selected;
                ctrl.selectAllData = ctrl.selectAllData && selected;
                mixDatabase.isExportData = selected && mixDatabase.isExportData;
                ctrl.exportThemeDto.content.mixDatabaseIds = ctrl.updateArray(
                    ctrl.exportThemeDto.content.mixDatabaseIds,
                    [mixDatabase.id],
                    selected
                );
                if (!selected) {
                    ctrl.selectData(mixDatabase, false);
                }
            };
            ctrl.selectData = (mixDatabase, selected) => {
                ctrl.selectAllData = ctrl.selectAllData && selected;
                ctrl.exportThemeDto.associations.mixDatabaseIds = ctrl.updateArray(
                    ctrl.exportThemeDto.associations.mixDatabaseIds,
                    [mixDatabase.id],
                    selected
                );
            };
            ctrl.updateArray = function (src, arr, selected) {
                if (selected) {
                    src = ctrl.unionArray(src, arr);
                } else {
                    src = src.filter((m) => arr.indexOf(m) < 0);
                }
                return src;
            };

            ctrl.selectAll = function (arr) {
                angular.forEach(arr, function (e) {
                    ctrl.selectContent(e, ctrl.selectAllContent);
                    e.isActived = ctrl.selectAllContent;
                    e.isExportData = ctrl.selectAllData;
                });
            };
            ctrl.unionArray = (a, b) => {
                return [...new Set([...a, ...b])];
            };
        },
    ],
    bindings: {
        exportThemeDto: "=",
    },
});

app.component("themeExportModules", {
  templateUrl:
    "/mix-app/views/app-portal/pages/theme/components/theme-export-modules/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope, ngAppSettings) {
      var ctrl = this;
      var service = $rootScope.getRestService("mix-module");
      ctrl.selectAllContent = false;
      ctrl.selectAllData = false;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.$onInit = async () => {
        ctrl.request.pageSize = null;
        ctrl.getList();
      };
      ctrl.getList = async (moduleIndex) => {
        if (moduleIndex !== undefined) {
          ctrl.request.moduleIndex = moduleIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        let getData = await service.getList(ctrl.request);
        if (getData.success) {
          ctrl.data = getData.data;
        }
      };
      ctrl.selectContent = (module, selected) => {
        ctrl.selectAllContent = ctrl.selectAllContent && selected;
        ctrl.selectAllData = ctrl.selectAllData && selected;
        module.isExportData = selected && module.isExportData;
        let contentIds = module.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.exportThemeDto.content.moduleIds = ctrl.updateArray(
          ctrl.exportThemeDto.content.moduleIds,
          [module.id],
          selected
        );
        ctrl.exportThemeDto.content.moduleContentIds = ctrl.updateArray(
          ctrl.exportThemeDto.content.moduleContentIds,
          contentIds,
          selected
        );
        if (!selected) {
          ctrl.selectData(module, false);
        }
      };
      ctrl.selectData = (module, selected) => {
        ctrl.selectAllData = ctrl.selectAllData && selected;
        let contentIds = module.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.exportThemeDto.associations.moduleIds = ctrl.updateArray(
          ctrl.exportThemeDto.associations.moduleIds,
          [module.id],
          selected
        );
        ctrl.exportThemeDto.associations.moduleContentIds = ctrl.updateArray(
          ctrl.exportThemeDto.associations.moduleContentIds,
          contentIds,
          selected
        );
      };
      ctrl.updateArray = function (src, arr, selected) {
        if (selected) {
          src = ctrl.unionArray(src, arr);
        } else {
          src = src.filter((m) => arr.indexOf(m) < 0);
        }
        return src;
      };
      ctrl.selectAll = function (arr) {
        angular.forEach(arr, function (e) {
          ctrl.selectContent(e, ctrl.selectAllContent);
          ctrl.selectData(e, ctrl.selectAllData);
          e.isActived = ctrl.selectAllContent;
          e.isExportData = ctrl.selectAllData;
        });
      };
      ctrl.unionArray = (a, b) => {
        return [...new Set([...a, ...b])];
      };
    },
  ],
  bindings: {
    exportThemeDto: "=",
  },
});

app.component("themeExportPages", {
  templateUrl:
    "/mix-app/views/app-portal/pages/theme/components/theme-export-pages/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope, ngAppSettings) {
      var ctrl = this;
      var service = $rootScope.getRestService("mix-page");
      ctrl.selectAllContent = false;
      ctrl.selectAllData = false;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.$onInit = async () => {
        ctrl.request.pageSize = null;
        ctrl.getList();
      };
      ctrl.getList = async (pageIndex) => {
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        let getData = await service.getList(ctrl.request);
        if (getData.success) {
          ctrl.data = getData.data;
        }
      };
      ctrl.selectContent = (page, selected) => {
        ctrl.selectAllContent = ctrl.selectAllContent && selected;
        ctrl.selectAllData = ctrl.selectAllData && selected;
        page.isExportData = selected && page.isExportData;
        let contentIds = page.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.exportThemeDto.content.pageIds = ctrl.updateArray(
          ctrl.exportThemeDto.content.pageIds,
          [page.id],
          selected
        );
        ctrl.exportThemeDto.content.pageContentIds = ctrl.updateArray(
          ctrl.exportThemeDto.content.pageContentIds,
          contentIds,
          selected
        );
        if (!selected) {
          ctrl.selectData(page, false);
        }
      };
      ctrl.selectData = (page, selected) => {
        ctrl.selectAllData = ctrl.selectAllData && selected;
        let contentIds = page.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.exportThemeDto.associations.pageIds = ctrl.updateArray(
          ctrl.exportThemeDto.associations.pageIds,
          [page.id],
          selected
        );
        ctrl.exportThemeDto.associations.pageContentIds = ctrl.updateArray(
          ctrl.exportThemeDto.associations.pageContentIds,
          contentIds,
          selected
        );
      };
      ctrl.updateArray = function (src, arr, selected) {
        if (selected) {
          src = ctrl.unionArray(src, arr);
        } else {
          src = src.filter((m) => arr.indexOf(m) < 0);
        }
        return src;
      };
      ctrl.selectAll = function (arr) {
        angular.forEach(arr, function (e) {
          ctrl.selectContent(e, ctrl.selectAllContent);
          ctrl.selectData(e, ctrl.selectAllData);
          e.isActived = ctrl.selectAllContent;
          e.isExportData = ctrl.selectAllData;
        });
      };
      ctrl.unionArray = (a, b) => {
        return [...new Set([...a, ...b])];
      };
    },
  ],
  bindings: {
    exportThemeDto: "=",
  },
});

app.component("themeExportPosts", {
    templateUrl:
        "/mix-app/views/app-portal/pages/theme/components/theme-export-posts/view.html",
    controller: [
        "$rootScope",
        "$scope",
        "ngAppSettings",
        "BaseRestService",
        function ($rootScope, $scope, ngAppSettings, baseRestService) {
            var ctrl = this;
            var service = angular.copy(baseRestService);
            service.initService("/rest/mix-portal", "mix-post");
            ctrl.selectAllContent = false;
            ctrl.selectAllData = false;
            ctrl.request = angular.copy(ngAppSettings.request);
            ctrl.$onInit = async () => {
                ctrl.request.pageSize = 1000;
                ctrl.getList();
            };
            ctrl.getList = async (postIndex) => {
                if (postIndex !== undefined) {
                    ctrl.request.postIndex = postIndex;
                }
                if (ctrl.request.fromDate !== null) {
                    var d = new Date(ctrl.request.fromDate);
                    ctrl.request.fromDate = d.toISOString();
                }
                if (ctrl.request.toDate !== null) {
                    var d = new Date(ctrl.request.toDate);
                    ctrl.request.toDate = d.toISOString();
                }
                let getData = await service.getList(ctrl.request);
                if (getData.success) {
                    ctrl.data = getData.data;
                }
            };
            ctrl.selectContent = (post, selected) => {
                ctrl.selectAllContent = ctrl.selectAllContent && selected;
                ctrl.selectAllData = ctrl.selectAllData && selected;
                post.isExportData = selected && post.isExportData;
                let contentIds = post.contents.map(function (obj) {
                    return obj.id;
                });
                ctrl.exportThemeDto.content.postIds = ctrl.updateArray(
                    ctrl.exportThemeDto.content.postIds,
                    [post.id],
                    selected
                );
                ctrl.exportThemeDto.content.postContentIds = ctrl.updateArray(
                    ctrl.exportThemeDto.content.postContentIds,
                    contentIds,
                    selected
                );
                if (!selected) {
                    ctrl.selectData(post, false);
                }
            };
            ctrl.selectData = (post, selected) => {
                ctrl.selectAllData = ctrl.selectAllData && selected;
                let contentIds = post.contents.map(function (obj) {
                    return obj.id;
                });
                ctrl.exportThemeDto.associations.postIds = ctrl.updateArray(
                    ctrl.exportThemeDto.associations.postIds,
                    [post.id],
                    selected
                );
                ctrl.exportThemeDto.associations.postContentIds = ctrl.updateArray(
                    ctrl.exportThemeDto.associations.postContentIds,
                    contentIds,
                    selected
                );
            };
            ctrl.updateArray = function (src, arr, selected) {
                if (selected) {
                    src = ctrl.unionArray(src, arr);
                } else {
                    src = src.filter((m) => arr.indexOf(m) < 0);
                }
                return src;
            };
            ctrl.selectAll = function (arr) {
                angular.forEach(arr, function (e) {
                    ctrl.selectContent(e, ctrl.selectAllContent);
                    ctrl.selectData(e, ctrl.selectAllData);
                    e.isActived = ctrl.selectAllContent;
                    e.isExportData = ctrl.selectAllData;
                });
            };
            ctrl.unionArray = (a, b) => {
                return [...new Set([...a, ...b])];
            };
        },
    ],
    bindings: {
        exportThemeDto: "=",
    },
});

app.component("themeImportCultures", {
    templateUrl:
        "/mix-app/views/app-portal/pages/theme-import/components/theme-import-cultures/view.html",
    controller: [
        "$rootScope",
        "$scope",
        "ngAppSettings",
        function ($rootScope, $scope, ngAppSettings) {
            var ctrl = this;
            var service = $rootScope.getRestService("culture");
            ctrl.selectAllContent = false;
            ctrl.request = angular.copy(ngAppSettings.request);
            ctrl.$onInit = async () => {
                ctrl.getList();
            };
            ctrl.getList = async (cultureIndex) => {
                if (cultureIndex !== undefined) {
                    ctrl.request.cultureIndex = cultureIndex;
                }
                if (ctrl.request.fromDate !== null) {
                    var d = new Date(ctrl.request.fromDate);
                    ctrl.request.fromDate = d.toISOString();
                }
                if (ctrl.request.toDate !== null) {
                    var d = new Date(ctrl.request.toDate);
                    ctrl.request.toDate = d.toISOString();
                }
                let getData = await service.getList(ctrl.request);
                if (getData.success) {
                    ctrl.data = getData.data;
                }
            };
            ctrl.selectContent = (culture, selected) => {
                ctrl.selectAllContent = ctrl.selectAllContent && selected;
                ctrl.selectAllData = ctrl.selectAllData && selected;
                culture.isImportData = selected && culture.isImportData;
                ctrl.updateContent([culture.id], selected);
            };
            ctrl.updateContent = function (arr, selected) {
                if (selected) {
                    ctrl.importThemeDto.cultureIds = ctrl.unionArray(
                        ctrl.importThemeDto.cultureIds,
                        arr
                    );
                } else {
                    ctrl.importThemeDto.cultureIds =
                        ctrl.importThemeDto.cultureIds.filter((m) => arr.indexOf(m) < 0);
                    ctrl.updateData(arr, false);
                }
            };
            ctrl.selectAll = function (arr) {
                // ctrl.selectedList.data = [];
                var ids = arr.map(function (obj) {
                    return obj.id;
                });
                ctrl.updateContent(ids, ctrl.selectAllContent);
                angular.forEach(arr, function (e) {
                    e.isActived = ctrl.selectAllContent;
                });
            };
            ctrl.unionArray = (a, b) => {
                return [...new Set([...a, ...b])];
            };
        },
    ],
    bindings: {
        importThemeDto: "=",
    },
});

app.component("themeImportModules", {
  templateUrl:
    "/mix-app/views/app-portal/pages/theme-import/components/theme-import-modules/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope, ngAppSettings) {
      var ctrl = this;
      var service = $rootScope.getRestService("mix-module");
      ctrl.selectAllContent = false;
      ctrl.selectAllData = false;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.$onInit = async () => {
        ctrl.getList();
      };
      ctrl.getList = async (moduleIndex) => {
        if (moduleIndex !== undefined) {
          ctrl.request.moduleIndex = moduleIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        let getData = await service.getList(ctrl.request);
        if (getData.success) {
          ctrl.data = getData.data;
        }
      };
      ctrl.selectContent = (module, selected) => {
        ctrl.selectAllContent = ctrl.selectAllContent && selected;
        ctrl.selectAllData = ctrl.selectAllData && selected;
        module.isImportData = selected && module.isImportData;
        let contentIds = module.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.importThemeDto.content.moduleIds = ctrl.updateArray(
          ctrl.importThemeDto.content.moduleIds,
          [module.id],
          selected
        );
        ctrl.importThemeDto.content.moduleContentIds = ctrl.updateArray(
          ctrl.importThemeDto.content.moduleContentIds,
          contentIds,
          selected
        );
        if (!selected) {
          ctrl.selectData(module, false);
        }
      };
      ctrl.selectData = (module, selected) => {
        ctrl.selectAllData = ctrl.selectAllData && selected;
        let contentIds = module.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.importThemeDto.associations.moduleIds = ctrl.updateArray(
          ctrl.importThemeDto.associations.moduleIds,
          [module.id],
          selected
        );
        ctrl.importThemeDto.associations.moduleContentIds = ctrl.updateArray(
          ctrl.importThemeDto.associations.moduleContentIds,
          contentIds,
          selected
        );
      };
      ctrl.updateArray = function (src, arr, selected) {
        if (selected) {
          src = ctrl.unionArray(src, arr);
        } else {
          src = src.filter((m) => arr.indexOf(m) < 0);
        }
        return src;
      };
      ctrl.selectAll = function (arr) {
        angular.forEach(arr, function (e) {
          ctrl.selectContent(e, ctrl.selectAllContent);
          ctrl.selectData(e, ctrl.selectAllData);
          e.isActived = ctrl.selectAllContent;
          e.isImportData = ctrl.selectAllData;
        });
      };
      ctrl.unionArray = (a, b) => {
        return [...new Set([...a, ...b])];
      };
    },
  ],
  bindings: {
    importThemeDto: "=",
  },
});

app.component("themeImportMixDatabases", {
  templateUrl:
    "/mix-app/views/app-portal/pages/theme-import/components/theme-import-mix-databases/view.html",
  bindings: {
    importThemeDto: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope, ngAppSettings) {
      var ctrl = this;
      var service = $rootScope.getRestService("mix-database");
      ctrl.selectAllContent = false;
      ctrl.selectAllData = false;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.$onInit = async () => {
        ctrl.data = ctrl.importThemeDto.mixDatabases;
      };

      ctrl.selectContent = (mixDatabase, selected) => {
        ctrl.selectAllContent = ctrl.selectAllContent && selected;
        ctrl.selectAllData = ctrl.selectAllData && selected;
        mixDatabase.isImportData = selected && mixDatabase.isImportData;
        ctrl.importThemeDto.content.mixDatabaseIds = ctrl.updateArray(
          ctrl.importThemeDto.content.mixDatabaseIds,
          [mixDatabase.id],
          selected
        );
        if (!selected) {
          ctrl.selectData(mixDatabase, false);
        }
      };
      ctrl.selectData = (mixDatabase, selected) => {
        ctrl.selectAllData = ctrl.selectAllData && selected;
        ctrl.importThemeDto.associations.mixDatabaseIds = ctrl.updateArray(
          ctrl.importThemeDto.associations.mixDatabaseIds,
          [mixDatabase.id],
          selected
        );
      };
      ctrl.updateArray = function (src, arr, selected) {
        if (selected) {
          src = ctrl.unionArray(src, arr);
        } else {
          src = src.filter((m) => arr.indexOf(m) < 0);
        }
        return src;
      };
      ctrl.selectAll = function (arr) {
        angular.forEach(arr, function (e) {
          ctrl.selectContent(e, ctrl.selectAllContent);
          ctrl.selectData(e, ctrl.selectAllData);
          e.isActived = ctrl.selectAllContent;
          e.isImportData = ctrl.selectAllData;
        });
      };
      ctrl.validate = (mixDatabase) => {
        if (
          ctrl.importThemeDto.invalidDatabaseNames.indexOf(
            mixDatabase.systemName
          ) >= 0
        ) {
          return `${mixDatabase.systemName} is invalid`;
        }
      };
      ctrl.unionArray = (a, b) => {
        return [...new Set([...a, ...b])];
      };
    },
  ],
});

app.component("themeImportPages", {
  templateUrl:
    "/mix-app/views/app-portal/pages/theme-import/components/theme-import-pages/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope, ngAppSettings) {
      var ctrl = this;
      var service = $rootScope.getRestService("mix-page");
      ctrl.selectAllContent = false;
      ctrl.selectAllData = false;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.$onInit = async () => {
        ctrl.getList();
      };
      ctrl.getList = async (pageIndex) => {
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        let getData = await service.getList(ctrl.request);
        if (getData.success) {
          ctrl.data = getData.data;
        }
      };
      ctrl.selectContent = (page, selected) => {
        ctrl.selectAllContent = ctrl.selectAllContent && selected;
        ctrl.selectAllData = ctrl.selectAllData && selected;
        page.isImportData = selected && page.isImportData;
        let contentIds = page.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.importThemeDto.content.pageIds = ctrl.updateArray(
          ctrl.importThemeDto.content.pageIds,
          [page.id],
          selected
        );
        ctrl.importThemeDto.content.pageContentIds = ctrl.updateArray(
          ctrl.importThemeDto.content.pageContentIds,
          contentIds,
          selected
        );
        if (!selected) {
          ctrl.selectData(page, false);
        }
      };
      ctrl.selectData = (page, selected) => {
        ctrl.selectAllData = ctrl.selectAllData && selected;
        let contentIds = page.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.importThemeDto.associations.pageIds = ctrl.updateArray(
          ctrl.importThemeDto.associations.pageIds,
          [page.id],
          selected
        );
        ctrl.importThemeDto.associations.pageContentIds = ctrl.updateArray(
          ctrl.importThemeDto.associations.pageContentIds,
          contentIds,
          selected
        );
      };
      ctrl.updateArray = function (src, arr, selected) {
        if (selected) {
          src = ctrl.unionArray(src, arr);
        } else {
          src = src.filter((m) => arr.indexOf(m) < 0);
        }
        return src;
      };
      ctrl.selectAll = function (arr) {
        angular.forEach(arr, function (e) {
          ctrl.selectContent(e, ctrl.selectAllContent);
          ctrl.selectData(e, ctrl.selectAllData);
          e.isActived = ctrl.selectAllContent;
          e.isImportData = ctrl.selectAllData;
        });
      };
      ctrl.unionArray = (a, b) => {
        return [...new Set([...a, ...b])];
      };
    },
  ],
  bindings: {
    importThemeDto: "=",
  },
});

app.component("themeImportPosts", {
  templateUrl:
    "/mix-app/views/app-portal/pages/theme-import/components/theme-import-posts/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope, ngAppSettings) {
      var ctrl = this;
      var service = $rootScope.getRestService("mix-post");
      ctrl.selectAllContent = false;
      ctrl.selectAllData = false;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.$onInit = async () => {
        ctrl.getList();
      };
      ctrl.getList = async (postIndex) => {
        if (postIndex !== undefined) {
          ctrl.request.postIndex = postIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        let getData = await service.getList(ctrl.request);
        if (getData.success) {
          ctrl.data = getData.data;
        }
      };
      ctrl.selectContent = (post, selected) => {
        ctrl.selectAllContent = ctrl.selectAllContent && selected;
        ctrl.selectAllData = ctrl.selectAllData && selected;
        post.isImportData = selected && post.isImportData;
        let contentIds = post.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.importThemeDto.content.postIds = ctrl.updateArray(
          ctrl.importThemeDto.content.postIds,
          [post.id],
          selected
        );
        ctrl.importThemeDto.content.postContentIds = ctrl.updateArray(
          ctrl.importThemeDto.content.postContentIds,
          contentIds,
          selected
        );
        if (!selected) {
          ctrl.selectData(post, false);
        }
      };
      ctrl.selectData = (post, selected) => {
        ctrl.selectAllData = ctrl.selectAllData && selected;
        let contentIds = post.contents.map(function (obj) {
          return obj.id;
        });
        ctrl.importThemeDto.associations.postIds = ctrl.updateArray(
          ctrl.importThemeDto.associations.postIds,
          [post.id],
          selected
        );
        ctrl.importThemeDto.associations.postContentIds = ctrl.updateArray(
          ctrl.importThemeDto.associations.postContentIds,
          contentIds,
          selected
        );
      };
      ctrl.updateArray = function (src, arr, selected) {
        if (selected) {
          src = ctrl.unionArray(src, arr);
        } else {
          src = src.filter((m) => arr.indexOf(m) < 0);
        }
        return src;
      };
      ctrl.selectAll = function (arr) {
        angular.forEach(arr, function (e) {
          ctrl.selectContent(e, ctrl.selectAllContent);
          ctrl.selectData(e, ctrl.selectAllData);
          e.isActived = ctrl.selectAllContent;
          e.isImportData = ctrl.selectAllData;
        });
      };
      ctrl.unionArray = (a, b) => {
        return [...new Set([...a, ...b])];
      };
    },
  ],
  bindings: {
    importThemeDto: "=",
  },
});

var demo = {
  initDashboardPageCharts: function (incomes, services) {
    incomes = incomes || [
      50,
      150,
      100,
      190,
      130,
      90,
      150,
      160,
      120,
      140,
      190,
      95,
    ];
    chartColor = "#eeeeee";
    // General configuration for the charts with Line gradientStroke
    gradientChartOptionsConfiguration = {
      maintainAspectRatio: false,
      legend: {
        display: false,
      },
      tooltips: {
        bodySpacing: 4,
        mode: "nearest",
        intersect: 0,
        position: "nearest",
        xPadding: 10,
        yPadding: 10,
        caretPadding: 10,
      },
      responsive: 1,
      scales: {
        yAxes: [
          {
            display: 0,

            ticks: {
              display: false,
            },
            gridLines: {
              zeroLineColor: "transparent",
              drawTicks: false,
              display: false,
              drawBorder: false,
            },
          },
        ],
        xAxes: [
          {
            display: 0,

            ticks: {
              display: false,
            },
            gridLines: {
              zeroLineColor: "transparent",
              drawTicks: false,
              display: false,
              drawBorder: false,
            },
          },
        ],
      },
      layout: {
        padding: { left: 0, right: 0, top: 15, bottom: 15 },
      },
    };

    gradientChartOptionsConfigurationWithNumbersAndGrid = {
      maintainAspectRatio: false,
      legend: {
        display: false,
      },
      tooltips: {
        bodySpacing: 4,
        mode: "nearest",
        intersect: 0,
        position: "nearest",
        xPadding: 10,
        yPadding: 10,
        caretPadding: 10,
      },
      responsive: true,
      scales: {
        yAxes: [
          {
            gridLines: {
              zeroLineColor: "transparent",
              drawBorder: false,
            },
          },
        ],
        xAxes: [
          {
            display: 0,

            ticks: {
              display: false,
            },
            gridLines: {
              zeroLineColor: "transparent",
              drawTicks: false,
              display: false,
              drawBorder: false,
            },
          },
        ],
      },
      layout: {
        padding: { left: 0, right: 0, top: 15, bottom: 15 },
      },
    };

    var ctx = document.getElementById("bigDashboardChart").getContext("2d");

    var gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);
    gradientStroke.addColorStop(0, "#80b6f4");
    gradientStroke.addColorStop(1, chartColor);

    var gradientFill = ctx.createLinearGradient(0, 200, 0, 50);
    gradientFill.addColorStop(0, "rgba(128, 182, 244, 0)");
    gradientFill.addColorStop(1, "rgba(255, 255, 255, 0.24)");

    var myChart = new Chart(ctx, {
      type: "bar",
      data: {
        labels: [
          "JAN",
          "FEB",
          "MAR",
          "APR",
          "MAY",
          "JUN",
          "JUL",
          "AUG",
          "SEP",
          "OCT",
          "NOV",
          "DEC",
        ],
        datasets: [
          {
            type: "line",
            label: "Incomes",
            borderColor: chartColor,
            pointBorderColor: chartColor,
            pointBackgroundColor: "red",
            pointHoverBackgroundColor: "#1e3d60",
            pointHoverBorderColor: chartColor,
            pointBorderWidth: 1,
            pointHoverRadius: 7,
            pointHoverBorderWidth: 2,
            pointRadius: 5,
            fill: true,
            backgroundColor: gradientFill,
            borderWidth: 2,
            data: incomes,
          },
          {
            label: "Services",
            //borderColor: chartColor,
            //pointBorderColor: chartColor,
            //pointBackgroundColor: "#1e3d60",
            //pointHoverBackgroundColor: "#1e3d60",
            //pointHoverBorderColor: chartColor,
            //pointBorderWidth: 1,
            //pointHoverRadius: 7,
            //pointHoverBorderWidth: 2,
            //pointRadius: 5,
            //fill: true,
            backgroundColor: "yellow",
            //borderWidth: 2,
            data: services,
          },
        ],
      },
      options: {
        layout: {
          padding: {
            left: 20,
            right: 20,
            top: 0,
            bottom: 0,
          },
        },
        maintainAspectRatio: false,
        tooltips: {
          backgroundColor: "#fff",
          titleFontColor: "#333",
          bodyFontColor: "#666",
          bodySpacing: 4,
          xPadding: 12,
          mode: "nearest",
          intersect: 0,
          position: "nearest",
        },
        legend: {
          position: "bottom",
          fillStyle: "#FFF",
          display: false,
        },
        scales: {
          yAxes: [
            {
              ticks: {
                fontColor: "rgba(255,255,255,0.4)",
                fontStyle: "bold",
                beginAtZero: true,
                maxTicksLimit: 5,
                padding: 10,
              },
              gridLines: {
                drawTicks: true,
                drawBorder: false,
                display: true,
                color: "rgba(255,255,255,0.1)",
                zeroLineColor: "transparent",
              },
            },
          ],
          xAxes: [
            {
              gridLines: {
                zeroLineColor: "transparent",
                display: false,
              },
              ticks: {
                padding: 10,
                fontColor: "rgba(255,255,255,0.4)",
                fontStyle: "bold",
              },
            },
          ],
        },
      },
    });
  },
};

modules.component("layoutPortalHeader", {
  templateUrl:
    "/mix-app/views/app-portal/components/_layout-portal-header/view.html",
  controller: [
    function () {
      var ctrl = this;
    },
  ],
  bindings: {},
});

modules.component("layoutPortalModals", {
  templateUrl:
    "/mix-app/views/app-portal/components/_layout-portal-modals/view.html",
  controller: [
    function () {
      var ctrl = this;
    },
  ],
  bindings: {},
});

modules.component("layoutPortalSidebar", {
  templateUrl:
    "/mix-app/views/app-portal/components/_layout-portal-sidebar/view.html",
  controller: [
    function () {
      var ctrl = this;
    },
  ],
  bindings: {},
});

modules.component("aceEditor", {
  templateUrl:
    "/mix-app/views/app-portal/components/ace-editor/ace-editor.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope, ngAppSettings) {
      var ctrl = this;
      ctrl.previousId = null;
      ctrl.editor = null;
      ctrl.id = Math.floor(Math.random() * 100) + 1;
      ctrl.$onChanges = (changes) => {
        if (changes.content) {
          ctrl.updateEditors();
        }
      };

      this.$doCheck = function () {
        if (ctrl.previousId != null && ctrl.previousId !== ctrl.contentId) {
          ctrl.previousId = ctrl.contentId;
          ctrl.updateEditors();
        }
      }.bind(this);
      ctrl.initAce = function () {
        setTimeout(() => {
          ctrl.previousId = ctrl.contentId;
          ctrl.updateEditors();
          $scope.$apply();
        }, 200);
      };
      ctrl.updateContent = function (content) {
        ctrl.editor.setValue(content);
      };
      ctrl.updateEditors = function () {
        $.each($("#code-editor-" + ctrl.id), function (i, e) {
          //var container = $(this);
          ace.require("ace/ext/language_tools");
          if (e) {
            var editor = ace.edit(e);
            switch (ctrl.ext) {
              case ".json":
                editor.session.setMode("ace/mode/json");
                break;
              case ".js":
                editor.session.setMode("ace/mode/javascript");
                break;
              case ".css":
                editor.session.setMode("ace/mode/css");
                break;
              case ".cshtml":
                editor.session.setMode("ace/mode/razor");
                break;
              case ".cs":
                editor.session.setMode("ace/mode/csharp");
                break;
              default:
                editor.session.setMode("ace/mode/razor");
                break;
            }
            editor.setTheme("ace/theme/chrome");
            //editor.setReadOnly(true);
            if (ctrl.content) {
              editor.setValue(ctrl.content);
            }
            editor.$blockScrolling = Infinity;
            editor.session.setUseWrapMode(true);
            editor.setOptions({
              enableBasicAutocompletion: true,
              enableSnippets: true,
              enableLiveAutocompletion: false,
              maxLines: 50,
              fontSize: 11,
            });
            editor.getSession().on("change", function (e) {
              // e.type, etc
              ctrl.content = editor.getValue();
            });
            editor.getSession().on("paste", function (e) {
              // e.type, etc
              ctrl.content = editor.getValue();
            });
            editor.commands.addCommand({
              name: "saveFile",
              bindKey: {
                win: "Ctrl-S",
                mac: "Command-S",
                sender: "editor|cli",
              },
              exec: function (env, args, request) {
                var btn = document.getElementById("btnToSubmit");
                btn.click();
              },
            });
            ctrl.editor = editor;
          }
        });
      };
    },
  ],
  bindings: {
    content: "=",
    contentId: "=",
    ext: "=",
  },
});

modules.component("actions", {
  templateUrl: "/mix-app/views/app-portal/components/actions/actions.html",
  bindings: {
    primaryUrl: "=",
    primaryTitle: "=",
    primaryIcon: "=",
    previewUrl: "=",
    backUrl: "=",
    contentUrl: "=",
    onClearCache: "&?",
    onSubmit: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    function ($rootScope, $scope, $location) {
      var ctrl = this;
      ctrl.visible = $rootScope.visible;
      ctrl.back = function () {
        if (ctrl.backUrl) {
          $location.url(ctrl.backUrl);
        } else {
          window.history.back();
        }
      };
      ctrl.$onInit = function () {
        ctrl.isAdmin = $rootScope.isAdmin;
      };
      ctrl.submit = function ($event) {
        if (ctrl.onSubmit) {
          $event.preventDefault();
          ctrl.onSubmit();
          return;
        }
      };
      ctrl.clearCache = function () {
        ctrl.onClearCache();
      };
    },
  ],
});

modules.component("additionalValue", {
  templateUrl:
    "/mix-app/views/app-portal/components/additional-value/view.html",
  bindings: {
    additionalData: "=?",
    additionalDataId: "=?",
    parentType: "=?",
    parentId: "=?",
    mixDatabaseName: "=?",
    backUrl: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "RestMixDatabaseDataPortalService",
    function ($rootScope, $scope, dataService) {
      var ctrl = this;
      ctrl.value = {};
      ctrl.column = { dataType: "Text" };
      ctrl.selectedCol = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = async function () {
        if (!ctrl.additionalData) {
          if (!ctrl.additionalDataId) {
            const obj = {
              parentType: ctrl.parentType,
              parentId: ctrl.parentId,
              databaseName: ctrl.mixDatabaseName,
            };
            const getData = await dataService.getAdditionalData(obj);
            if (getData.success) {
              ctrl.additionalData = getData.data;
              ctrl.additionalData.mixDatabaseName = ctrl.mixDatabaseName;
              ctrl.additionalData.parentType = ctrl.parentType;
              $scope.$apply();
            } else {
              $rootScope.showErrors(getData.errors);
            }
          } else {
            var getData = await dataService.getSingle([ctrl.additionalDataId]);
            ctrl.additionalData = getData.data;
            $scope.$apply();
          }
        }
        if (ctrl.additionalData.id == "00000000-0000-0000-0000-000000000000") {
          ctrl.additionalData.id = null;
        }
      };
    },
  ],
});

modules.component("additionalColumn", {
  templateUrl:
    "/mix-app/views/app-portal/components/additional-column/view.html",
  bindings: {
    model: "=",
    additionalData: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "RestMixDatabaseColumnPortalService",
    "RestMixDatabaseDataPortalService",
    function ($rootScope, $scope, columnService, dataService) {
      var ctrl = this;
      ctrl.value = {};
      ctrl.column = {
        dataType: "Text",
        mixDatabaseName: "sysAdditionalColumn",
        mixDatabaseId: 6,
        status: "Published",
      };
      ctrl.selectedCol = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = async function () {};
      ctrl.addAttr = async function () {
        if (ctrl.column.name) {
          var current = $rootScope.findObjectByKey(
            ctrl.additionalData.columns,
            "name",
            ctrl.column.name
          );
          if (current) {
            $rootScope.showErrors(["Field " + ctrl.column.name + " existed!"]);
          } else {
            ctrl.column.priority = ctrl.additionalData.columns.length + 1;
            $rootScope.isBusy = true;
            var saveField = await columnService.create(ctrl.column);
            $rootScope.isBusy = false;
            if (saveField.success) {
              ctrl.additionalData.columns.push(saveField.data);
              if (ctrl.additionalData.parentId) {
                await dataService.save(ctrl.additionalData);
              }
              //reset column option
              ctrl.column.title = "";
              ctrl.column.name = "";
              ctrl.column.dataType = "Text";
            } else {
              $rootScope.showErrors(saveField.errors);
            }
            $scope.$apply();
          }
        } else {
          $rootScope.showErrors(["Please add column Name"]);
        }
      };

      ctrl.generateName = function (col) {
        col.name = $rootScope.generateKeyword(col.title, "_", true, true);
      };
      ctrl.showReferences = function (col) {
        ctrl.colRef = col;
        $("#modal-navs").modal("show");
      };
      ctrl.referenceCallback = async function (selected) {
        if (selected && selected.length) {
          ctrl.colRef.reference = selected;
          ctrl.colRef.referenceId = selected[0].id;
          await columnService.save(ctrl.colRef);
        }
        $("#modal-navs").modal("hide");
      };
      ctrl.updateOrders = function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.additionalData.columns.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.additionalData.columns.splice(ctrl.dragStartIndex + 1, 1);
        }
        angular.forEach(ctrl.additionalData.columns, function (e, i) {
          e.priority = i;
        });
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
      };

      ctrl.removeAttribute = function (val, index) {
        $rootScope.showConfirm(
          ctrl,
          "removeAttributeConfirmed",
          [val, index],
          null,
          "Remove Field",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };
      ctrl.removeAttributeConfirmed = async function (val, index) {
        if (val.id) {
          $rootScope.isBusy = true;
          var result = await columnService.delete([val.id]);
          if (result.success) {
            ctrl.additionalData.columns.splice(index, 1);
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            $rootScope.showErrors(result.errors);
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        } else {
          ctrl.additionalData.columns.splice(index, 1);
        }
      };
    },
  ],
});

modules.component("confirm", {
  templateUrl: "/mix-app/views/app-portal/components/confirm/confirm.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    function ($rootScope, $scope) {
      var ctrl = this;
      ctrl.executeFunctionByName = async function (
        functionName,
        args,
        context
      ) {
        var result = await $rootScope.executeFunctionByName(
          functionName,
          args,
          context
        );
        if (result) {
          $scope.$apply();
        }
      };
    },
  ],
  bindings: {
    message: "=",
  },
});

modules.component("customImage", {
  templateUrl:
    "/mix-app/views/app-portal/components/custom-image/custom-image.html",
  bindings: {
    header: "=?",
    description: "=?",
    src: "=",
    srcUrl: "=",
    w: "=?",
    h: "=?",
    rto: "=?",
    postedFile: "=?",
    type: "=?",
    folder: "=?",
    auto: "=",
    onDelete: "&?",
    onUpdate: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$uibModal",
    "ngAppSettings",
    "MediaService",
    function ($rootScope, $scope, $uibModal, ngAppSettings, mediaService) {
      var ctrl = this;
      ctrl.isAdmin = $rootScope.isAdmin;
      var image_placeholder = "/mix-app/assets/img/image_placeholder.jpg";
      ctrl.isImage = false;
      ctrl.croppedStream = null;
      ctrl.mediaNavs = [];
      ctrl.options = {};
      ctrl.$onInit = function () {
        if (ctrl.src) {
          ctrl.srcUrl = angular.copy(ctrl.src);
        }
        if (!ctrl.srcUrl) {
          ctrl.srcUrl = image_placeholder;
        }
        ctrl.isImage = ctrl.srcUrl
          .toLowerCase()
          .match(/([/|.|\w|\s|-])*\.(?:jpg|jpeg|gif|png|svg|webp)/g);
        ctrl.id = Math.floor(Math.random() * 100);
      };
      ctrl.calImageSize = function () {
        if (ctrl.w) {
          ctrl.h = ctrl.h || ctrl.w / ctrl.rto;
          ctrl.rto = ctrl.rto || ctrl.w / ctrl.h;
        }
        if (ctrl.h) {
          ctrl.w = ctrl.w || ctrl.h * ctrl.rto;
          ctrl.rto = ctrl.rto || ctrl.w / ctrl.h;
        }

        ctrl.maxHeight = ctrl.maxHeight || "200px";
        ctrl.options = {
          boundary: { width: 150 * ctrl.rto, height: 150 },
          render: { width: 1000 * ctrl.rto, height: 1000 },
          output: { width: ctrl.w, height: ctrl.h },
        };
      };

      ctrl.mediaFile = {
        file: null,
        fullPath: "",
        folder: ctrl.folder,
        title: ctrl.title,
        description: ctrl.description,
      };

      ctrl.croppieCallback = function (result) {
        if (result) {
          ctrl.srcUrl = result;
        } else if (ctrl.file) {
          ctrl.uploadFile(ctrl.file);
        }
      };

      ctrl.media = {};
      ctrl.$doCheck = function () {
        if (ctrl.src !== ctrl.srcUrl && ctrl.srcUrl != image_placeholder) {
          ctrl.src = ctrl.srcUrl;
          ctrl.isImage = ctrl.srcUrl
            .toLowerCase()
            .match(/([/|.|\w|\s|-])*\.(?:jpg|jpeg|gif|png|svg)/g);
        }
      }.bind(ctrl);

      ctrl.selectFile = function (files) {
        if (files !== undefined && files !== null && files.length > 0) {
          ctrl.file = files[0];
          ctrl.mediaFile.fileFolder = ctrl.folder || "Media";
          ctrl.mediaFile.title = ctrl.title || "";
          ctrl.mediaFile.description = ctrl.description || "";
          ctrl.mediaFile.file = ctrl.file;
          mediaService.openCroppie(ctrl.file, ctrl, true);
        }
      };

      ctrl.uploadFile = async function (file) {
        if (file !== null) {
          $rootScope.isBusy = true;
          var resp = await mediaService.uploadMedia(file);
          if (resp && resp.success) {
            ctrl.src = resp.data;
            ctrl.srcUrl = resp.data;
            ctrl.isImage = ctrl.srcUrl
              .toLowerCase()
              .match(/([/|.|\w|\s|-])*\.(?:jpg|jpeg|gif|png|svg)/g);
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        } else {
          return null;
        }
      };

      ctrl.getBase64 = function (file) {
        if (file !== null) {
          $rootScope.isBusy = true;
          var reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = function () {
            var index = reader.result.indexOf(",") + 1;
            var base64 = reader.result.substring(index);
            if (ctrl.postedFile) {
              ctrl.postedFile.fileName = file.name.substring(
                0,
                file.name.lastIndexOf(".")
              );
              ctrl.postedFile.extension = file.name.substring(
                file.name.lastIndexOf(".")
              );
              ctrl.postedFile.fileStream = reader.result;
            }
            ctrl.srcUrl = reader.result;
            ctrl.isImage =
              ctrl.srcUrl.indexOf("data:image/") >= 0 ||
              ctrl.srcUrl
                .toLowerCase()
                .match(/([/|.|\w|\s|-])*\.(?:jpg|jpeg|gif|png|svg)/g);
            ctrl.src = reader.result;
            $rootScope.isBusy = false;
            $scope.$apply();
          };
          reader.onerror = function (error) {
            $rootScope.isBusy = false;
            $rootScope.showErrors([error]);
          };
        } else {
          return null;
        }
      };

      ctrl.onUploadFileProgress = function (progress) {
        ctrl.progress = progress;
      };
    },
  ],
});

modules.component("filterList", {
  templateUrl:
    "/mix-app/views/app-portal/components/filter-list/filter-list.html",
  controller: [
    "$scope",
    "$rootScope",
    "ngAppSettings",
    "CultureService",
    function ($scope, $rootScope, ngAppSettings, cultureService) {
      var ctrl = this;
      ctrl.dateRange = {
        fromDate: null,
        toDate: null,
      };
      ctrl.searchMethods = ["Equal", "Like"];
      ctrl.init = async function () {
        if (!ctrl.arrOrderBy) {
          ctrl.arrOrderBy = [
            "Title",
            "Priority",
            "CreatedDateTime",
            "LastModified",
            "Status",
          ];
        }
        ctrl.request.orderBy = ctrl.request.orderBy || ctrl.arrOrderBy[0];
        ctrl.directions = ["Asc", "Desc"];
        ctrl.pageSizes = [5, 10, 15, 20];
        ctrl.statuses = $rootScope.globalSettings.statuses;
      };
      ctrl.changeLang = function (culture) {
        if (culture) {
          ctrl.selectedCulture = culture;
          ctrl.request.culture = culture.specificulture;
        } else {
          ctrl.selectedCulture = null;
          ctrl.request.culture = null;
        }
        ctrl.apply(0);
      };
      ctrl.apply = function (pageIndex) {
        $rootScope.setRequest(ctrl.request, ctrl.key);
        ctrl.callback({ pageIndex: pageIndex });
      };
      ctrl.updateDate = function () {
        ctrl.request.pageIndex = 0;
        if (Date.parse(ctrl.dateRange.fromDate)) {
          ctrl.request.fromDate = new Date(
            ctrl.dateRange.fromDate
          ).toISOString();
        } else {
          $scope.request.fromDate = null;
        }
        if (Date.parse(ctrl.dateRange.toDate)) {
          ctrl.request.toDate = new Date(ctrl.dateRange.toDate).toISOString();
        } else {
          ctrl.request.toDate = null;
        }
        $rootScope.setRequest(ctrl.request, ctrl.key);
        ctrl.callback({ pageIndex: 0 });
      };
    },
  ],
  bindings: {
    request: "=",
    key: "=?",
    arrOrderBy: "=?",
    createUrl: "=",
    createText: "=",
    callback: "&",
  },
});

modules.component("funding", {
  templateUrl: "/mix-app/views/app-portal/components/funding/view.html",
  controller: [
    "$rootScope",
    "$http",
    function ($rootScope, $http) {
      var ctrl = this;
      ctrl.items = [
        {
          title: "opencollective.com/mixcore",
          href: "https://opencollective.com/mixcore",
          logo:
            "https://github.githubassets.com/images/modules/site/icons/funding_platforms/open_collective.svg",
        },
        {
          title: "funding.communitybridge.org/projects/mixcore",
          href: "https://crowdfunding.lfx.linuxfoundation.org/projects/mixcore",
          logo:
            "https://github.githubassets.com/images/modules/site/icons/funding_platforms/community_bridge.svg",
        },
        {
          title: "patreon.com/mixcore",
          href: "https://www.patreon.com/mixcore/creators",
          logo:
            "https://github.githubassets.com/images/modules/site/icons/funding_platforms/patreon.svg",
        },
        {
          title: "paypalme/mixcore",
          href: "https://www.paypal.me/mixcore",
          logo: "/mix-app/assets/img/svg/heart.svg",
        },
        {
          title: "buymeacoffee.com/mixcore",
          href: "https://www.buymeacoffee.com/mixcore",
          logo: "/mix-app/assets/img/svg/heart.svg",
        },
      ];
      ctrl.init = function () {};
    },
  ],
  bindings: {},
});

modules.component("githubContributers", {
  templateUrl:
    "/mix-app/views/app-portal/components/github-contributers/view.html",
  controller: [
    "$rootScope",
    "$http",
    function ($rootScope, $http) {
      var ctrl = this;
      ctrl.items = [];
      ctrl.init = function () {
        var req = {
          method: "GET",
          url: "https://api.github.com/repos/mixcore/mix.core/contributors",
        };
        ctrl.getGithubApiResult(req);
      };

      ctrl.getGithubApiResult = async function (req) {
        return $http(req).then(
          function (resp) {
            if (resp.status == "200") {
              ctrl.items = resp.data;
            } else {
            }
          },
          function (error) {
            return {
              success: false,
              errors: [error.statusText || error.status],
            };
          }
        );
      };
    },
  ],
  bindings: {},
});

modules.component("googleAnalytic", {
  templateUrl: "/mix-app/views/app-portal/components/google-analytic/view.html",
  bindings: {
    Google_Client_Id: "=?",
    Google_Client_Ids: "=?",
    Google_Analytic_Ids: "=?",
  },
  controller: [
    "$rootScope",
    "ApiService",
    "CommonService",
    function ($rootScope, apiService, commonService) {
      var ctrl = this;
      ctrl.init = function () {
        if (gapi) {
          gapi.analytics.ready(function () {
            if (ctrl.Google_Client_Id) {
              /**
               * Authorize the user immediately if the user has already granted access.
               * If no access has been created, render an authorize button inside the
               * element with the ID "embed-api-auth-container".
               */
              gapi.analytics.auth.authorize({
                container: "embed-api-auth-container",
                //REPLACE WITH YOUR CLIENT ID
                clientid: ctrl.Google_Client_Id,
              });

              /**
               * Create a ViewSelector for the first view to be rendered inside of an
               * element with the id "view-selector-1-container".
               */
              var viewSelector1 = new gapi.analytics.ViewSelector({
                container: "view-selector-1-container",
              });

              /**
               * Create a ViewSelector for the second view to be rendered inside of an
               * element with the id "view-selector-2-container".
               */
              var viewSelector2 = new gapi.analytics.ViewSelector({
                container: "view-selector-2-container",
              });

              /**
               * Create a new ActiveUsers instance to be rendered inside of an
               * element with the id "active-users-container" and poll for changes every
               * five seconds.
               */
              var activeUsers = new gapi.analytics.ext.ActiveUsers({
                container: "active-users-container",
                pollingInterval: 5,
              });
              /**
               * Add CSS animation to visually show the when users come and go.
               */
              activeUsers.once("success", function () {
                var element = this.container.firstChild;
                var timeout;

                this.on("change", function (data) {
                  var element = this.container.firstChild;
                  var animationClass =
                    data.delta > 0 ? "is-increasing" : "is-decreasing";
                  element.className += " " + animationClass;

                  clearTimeout(timeout);
                  timeout = setTimeout(function () {
                    element.className = element.className.replace(
                      / is-(increasing|decreasing)/g,
                      ""
                    );
                  }, 3000);
                });
              });

              /**
               * Create a ViewSelector for the second view to be rendered inside of an
               * element with the id "view-selector-2-container".
               */
              var viewSelector2 = new gapi.analytics.ViewSelector({
                container: "view-selector-2-container",
              });

              // Render both view selectors to the page.
              // viewSelector1.execute();
              // viewSelector2.execute();

              /**
               * Create the first DataChart for top countries over the past 30 days.
               * It will be rendered inside an element with the id "chart-1-container".
               */
              var dataChart1 = new gapi.analytics.googleCharts.DataChart({
                query: {
                  // ids: ctrl.Google_Client_Ids,
                  metrics: "ga:sessions",
                  dimensions: "ga:date",
                  "start-date": "30daysAgo",
                  "end-date": "yesterday",
                },
                chart: {
                  container: "chart-1-container",
                  type: "LINE",
                  options: {
                    width: "95%",
                    legendTextStyle: { color: "#333" },
                    titleTextStyle: { color: "#333" },
                    backgroundColor: { fill: "transparent" },
                    hAxis: {
                      textStyle: { color: "#333" },
                    },
                    vAxis: {
                      textStyle: { color: "#333" },
                    },
                    series: {
                      0: {
                        color:
                          $rootScope.globalSettings.portalThemeSettings
                            .primaryColor,
                      },
                      1: { color: "#e7711b" },
                      2: { color: "#f1ca3a" },
                      3: { color: "#6f9654" },
                      4: { color: "#1c91c0" },
                      5: { color: "#43459d" },
                    },
                  },
                },
              });

              /**
               * Create the second DataChart for top countries over the past 30 days.
               * It will be rendered inside an element with the id "chart-2-container".
               */
              var dataChart2 = new gapi.analytics.googleCharts.DataChart({
                query: {
                  // ids: ctrl.Google_Analytic_Ids,
                  metrics: "ga:sessions",
                  dimensions: "ga:country",
                  "start-date": "90daysAgo",
                  "end-date": "yesterday",
                  "max-results": 6,
                  sort: "-ga:sessions",
                },
                chart: {
                  container: "chart-2-container",
                  type: "GEO",
                  options: {
                    width: "95%",
                    pieHole: 4 / 9,
                  },
                },
              });

              dataChart1
                .set({
                  query: {
                    ids: ctrl.Google_Analytic_Ids,
                  },
                })
                .execute();
              dataChart2
                .set({
                  query: {
                    ids: ctrl.Google_Analytic_Ids,
                  },
                })
                .execute();
              activeUsers
                .set({
                  ids: ctrl.Google_Analytic_Ids,
                })
                .execute();

              // /**
              //  * Update the first dataChart when the first view selecter is changed.
              //  */
              // viewSelector1.on('change', function (ids) {
              //   dataChart1.set({ query: { ids: ids } }).execute();
              //   // Start tracking active users for this view.
              //   activeUsers.set({ ids: ids }).execute();
              // });

              // /**
              //  * Update the first dataChart when the first view selecter is changed.
              //  */
              // viewSelector2.on('change', function (ids) {
              //   dataChart2.set({ query: { ids: ids } }).execute();
              //   // Start tracking active users for this view.
              //   activeUsers.set({ ids: ids }).execute();
              // });

              // /**
              //  * Update the second dataChart when the second view selecter is changed.
              //  */
              // viewSelector2.on('change', function (ids) {
              //   dataChart2.set({ query: { ids: ids } }).execute();
              // });
            }
          });
        }
      };
    },
  ],
});

modules.component("githubReleases", {
  templateUrl: "/mix-app/views/app-portal/components/github-releases/view.html",
  controller: [
    "$rootScope",
    "$http",
    function ($rootScope, $http) {
      var ctrl = this;
      ctrl.items = [];
      ctrl.init = function () {
        var req = {
          method: "GET",
          url: "https://api.github.com/repos/mixcore/mix.core/releases",
        };
        ctrl.getGithubApiResult(req);
      };

      ctrl.getGithubApiResult = async function (req) {
        return $http(req).then(
          function (resp) {
            if (resp.status == "200") {
              ctrl.items = resp.data;
            } else {
            }
          },
          function (error) {
            return {
              success: false,
              errors: [error.statusText || error.status],
            };
          }
        );
      };
    },
  ],
  bindings: {},
});

(function (angular) {
  app.component("headerNav", {
    templateUrl:
      "/mix-app/views/app-portal/components/header-nav/headerNav.html",
    controller: [
      "$rootScope",
      "$scope",
      "ngAppSettings",
      "localStorageService",
      "CommonService",
      "ApiService",
      "AuthService",
      "CultureService",
      function (
        $rootScope,
        $scope,
        ngAppSettings,
        localStorageService,
        commonService,
        apiService,
        authService,
        cultureService
      ) {
        var ctrl = this;
        ctrl.appSettings = $rootScope.globalSettings;
        ctrl.isInRole = $rootScope.isInRole;
        this.$onInit = function () {
          ctrl.isAdmin = $rootScope.isAdmin;
          ctrl.mixConfigurations = $rootScope.mixConfigurations;
          cultureService.getList(ngAppSettings.request).then((resp) => {
            ctrl.cultures = resp.data.items;
            ctrl.selectedCulture = ctrl.cultures.find(
              (m) =>
                m.specificulture == $rootScope.globalSettings.defaultCulture
            );
            $scope.$apply();
          });
          authService.fillAuthData().then(() => {
            if (
              authService.authentication &&
              authService.authentication.info.userData
            ) {
              ctrl.avatar = authService.authentication.info.userData.avatar;
            }
          });
        };
        ctrl.translate = $rootScope.translate;
        ctrl.getConfiguration = function (keyword, isWrap, defaultText) {
          return $rootScope.getConfiguration(keyword, isWrap, defaultText);
        };
        ctrl.changeLang = function (culture) {
          $rootScope.globalSettings.defaultCulture = culture.specificulture;
          localStorageService.set("globalSettings", $rootScope.globalSettings);
          window.top.location = location.href;
        };
        ctrl.logOut = function () {
          $rootScope.logOut();
        };
        ctrl.addPermission = function () {
          $("#dlg-permission").modal("show");
        };
        ctrl.addBookmark = function () {
          $("#dlg-bookmark").modal("show");
        };
        ctrl.toggleSidebar = function () {
          $(".main-sidebar").toggle();
          $(".sub-sidebar").toggle();
          // $('.navbar-brand').toggle();
        };
        ctrl.clearCache = async function () {
          $rootScope.isBusy = true;
          await commonService.clearCache();
          $rootScope.showMessage("success", "success");
          $rootScope.isBusy = false;
          $scope.$apply();
        };
        ctrl.showHelper = function (url) {
          $rootScope.helperUrl = url;
          $("#dev-helper-modal").modal("show");
        };
        ctrl.generateSitemap = async function () {
          $rootScope.isBusy = true;
          var resp = await commonService.genrateSitemap();
          if (resp) {
            window.top.location.href =
              "/admin/file/details?folder=" +
              resp.fileFolder +
              "&filename=" +
              resp.filename +
              resp.extension;
          } else {
            $rootScope.isBusy = false;
            $rootScope.showErrors(["Server error"]);
          }
        };
      },
    ],
    bindings: {
      breadCrumbs: "=",
      settings: "=",
    },
  });
})(window.angular);

modules.component("highFrequencyMessages", {
  templateUrl:
    "/mix-app/views/app-portal/components/high-frequency-messages/view.html",
  controller: "HighFrequencyMessagesController",
  bindings: {},
});
app.controller("HighFrequencyMessagesController", [
  "$scope",
  "$rootScope",
  "AuthService",
  function ($scope, $rootScope, authService) {
    BaseHub.call(this, $scope);
    authService.fillAuthData();
    $scope.newMsgCount = 0;
    $scope.messages = [];
    $scope.mouses = [];
    $scope.init = function () {
      //   $scope.connectHightFrequencyHub();
    };
    $scope.connectHightFrequencyHub = () => {
      $scope.startConnection(
        "highFrequencyHub",
        authService.authentication.accessToken,
        (err) => {
          if (
            authService.authentication.refreshToken &&
            err.message.indexOf("401") >= 0
          ) {
            authService.refreshToken().then(async () => {
              $scope.startConnection(
                "highFrequencyHub",
                authService.authentication.accessToken
              );
            });
          }
        }
      );
    };
    $scope.onConnected = () => {
      $scope.joinRoom("mouseMove_portal");
      $scope.streamMouseMove();
    };
    $scope.onLeave = () => {
      clearInterval($scope.intervalHandle);
      $scope.subject.complete();
    };
    $scope.streamMouseMove = () => {
      document.onmousemove = $scope.handleMouseMove;
      $scope.subject = new signalR.Subject();
      // Send a maximum of 10 messages per second
      // (mouse movements trigger a lot of messages)
      var messageFrequency = 60,
        // Determine how often to send messages in
        // time to abide by the messageFrequency
        updateRate = 1000 / messageFrequency;
      // Start the client side server update interval
      $scope.hubRequest.title = "MouseMove";
      $scope.connection.invoke("UploadStream", $scope.subject, $scope.room);
      $scope.intervalHandle = setInterval($scope.updateMouse, updateRate);
    };
    $scope.receiveMessage = function (data) {
      var msg = JSON.parse(data);
      switch (msg.title) {
        case "MouseMove":
          let mouse = $scope.mouses.find(
            (m) => m.from.username == msg.from.username
          );
          if (!mouse) {
            $scope.mouses.push(msg);
          } else {
            mouse.data.x = msg.data.x;
            mouse.data.y = msg.data.y;
          }
          $scope.$apply();
          break;
        default:
          break;
      }
    };
    $scope.updateMouse = () => {
      if ($scope.room && $scope.mousePos && $scope.moved) {
        let msg = angular.copy($scope.hubRequest);
        msg.data = $scope.mousePos;
        $scope.subject.next(JSON.stringify(msg));
        $scope.moved = false;
      } else {
        // Use pos.x and pos.y
      }
      // if (iteration === 10) {
      //     clearInterval(intervalHandle);
      //     subject.complete();
      // }
    };
    $scope.handleMouseMove = (event) => {
      var dot, eventDoc, doc, body, pageX, pageY;

      event = event || window.event; // IE-ism

      // If pageX/Y aren't available and clientX/Y are,
      // calculate pageX/Y - logic taken from jQuery.
      // (This is to support old IE)
      if (event.pageX == null && event.clientX != null) {
        eventDoc = (event.target && event.target.ownerDocument) || document;
        doc = eventDoc.documentElement;
        body = eventDoc.body;

        event.pageX =
          event.clientX +
          ((doc && doc.scrollLeft) || (body && body.scrollLeft) || 0) -
          ((doc && doc.clientLeft) || (body && body.clientLeft) || 0);
        event.pageY =
          event.clientY +
          ((doc && doc.scrollTop) || (body && body.scrollTop) || 0) -
          ((doc && doc.clientTop) || (body && body.clientTop) || 0);
      }
      let x = (event.pageX / screen.width) * 100;
      let y = (event.pageY / screen.height) * 100;
      if (
        !$scope.mousePos ||
        ($scope.mousePos.x != x && $scope.mousePos.y != y)
      ) {
        $scope.moved = true;
        $scope.mousePos = {
          x: x,
          y: y,
        };
      }
    };

    $scope.newMessage = function (msg) {
      msg.style = $scope.getMessageType(msg.type);
      $scope.messages.push(msg);
      if (
        msg.from ||
        msg.from.connectionId != $scope.hubRequest.from.connectionId
      ) {
        $scope.newMsgCount += 1;
        $rootScope.showMessage(msg.title, msg.style);
      }
      $scope.$apply();
    };
    $scope.removeMember = function (member) {
      var index = $scope.members.findIndex(
        (x) => x.username === member.username
      );
      if (index >= 0) {
        $scope.members.splice(index, 1);
      }
      $scope.$apply();
    };

    $scope.newMember = function (member) {
      var index = $scope.members.findIndex(
        (x) => x.username === member.username
      );
      if (index < 0) {
        $scope.members.splice(0, 0, member);
      }
      $scope.$apply();
    };
    $scope.getMessageType = function (type) {
      switch (type) {
        case "Success":
          return "success";
        case "Error":
          return "danger";
        case "Warning":
          return "warning";
        case "Info":
          return "info";
        default:
          return "default";
      }
    };
  },
]);

modules.component("jsonBuilder", {
  templateUrl: "/mix-app/views/app-portal/components/json-builder/view.html",
  bindings: {
    data: "=?", // json obj (ex: { column1: 'some val' })
    strData: "=?", // json obj (ex: { column1: 'some val' })
    folder: "=?", // filepath (ex: 'data/jsonfile.json')
    filename: "=?", // filepath (ex: 'data/jsonfile.json')
    allowedTypes: "=?", // string array ( ex: [ 'type1', 'type2' ] )
    backUrl: "=?", // string array ( ex: [ 'type1', 'type2' ] )
    showPreview: "=?",
    type: "=?", // array / obj
    editMode: "=?", // array / obj
    save: "&",
    onUpdate: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "FileServices",
    "ngAppSettings",
    function ($rootScope, $scope, $location, fileService, ngAppSettings) {
      var ctrl = this;

      ctrl.file = null;
      ctrl.translate = $rootScope.translate;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.timestamp = Math.random();
      ctrl.templates = [
        {
          type: "item",
          name: "",
          dataType: "Text",
          value: "",
          columns: [{ allowedTypes: ["item"], items: [] }],
        },
        {
          type: "string",
          dataType: "Text",
          value: "",
          columns: [{ allowedTypes: ["item"], items: [] }],
        },
        {
          type: "object",
          name: "o1",
          columns: [{ allowedTypes: ["array", "object", "item"], items: [] }],
        },
        {
          type: "array",
          name: "a1",
          columns: [{ allowedTypes: ["object"], items: [] }],
        },
      ];
      ctrl.draft = [];
      ctrl.model = {};
      ctrl.dropzones = {
        root: [],
      };
      ctrl.selected = null;
      ctrl.selectedModel = {};
      ctrl.strModel = null;
      ctrl.init = async function () {
        var arr = [];
        if (!ctrl.editMode) {
          ctrl.editMode = "json";
        }
        if (!ctrl.data && ctrl.filename) {
          await ctrl.loadFile();
          ctrl.parseObjToList(ctrl.data, arr);
          ctrl.dropzones.root = arr;
        } else {
          if (!ctrl.data) {
            if (ctrl.strData) {
              ctrl.data = JSON.parse(ctrl.strData);
            }
            if (!ctrl.data && ctrl.type) {
              ctrl.data = ctrl.type == "array" ? [] : {};
            }
          }
          ctrl.rootType = Array.isArray(ctrl.data) ? "array" : "object";
          ctrl.parseObjToList(ctrl.data, arr);
          ctrl.strData = JSON.stringify(ctrl.data);
          ctrl.dropzones.root = arr;
          ctrl.preview = angular.copy(ctrl.data);
        }
      };
      ctrl.loadFile = async function () {
        $rootScope.isBusy = true;
        $scope.listUrl = "/admin/json-data/list?folder=" + ctrl.folder;

        var response = await fileService.getFile(ctrl.folder, ctrl.filename);
        if (response.success) {
          ctrl.file = response.data;
          ctrl.data = JSON.parse(response.data.content);
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.saveFile = async function () {
        $rootScope.isBusy = true;
        ctrl.model = {};
        ctrl.update();
        if (ctrl.save) {
          ctrl.save({ data: ctrl.model });
        } else {
          // ctrl.parseObj(ctrl.dropzones.root, ctrl.model);
          ctrl.file.content = JSON.stringify(ctrl.model);
          var resp = await fileService.saveFile(ctrl.file);
          if (resp && resp.success) {
            $scope.activedFile = resp.data;
            $rootScope.showMessage("Update successfully!", "success");
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        }
        ctrl.select(ctrl.selected);
      };
      ctrl.update = function () {
        ctrl.model = {};
        var obj = {
          type: "object",
          name: "data",
          columns: [
            {
              items: ctrl.dropzones.root,
            },
          ],
        };
        ctrl.parseObj(obj, ctrl.model);
        ctrl.strData = JSON.stringify(ctrl.model);
        ctrl.onUpdate({ data: ctrl.model });
      };
      ctrl.updateJsonContent = function (strData) {
        if (strData) {
          ctrl.model = JSON.parse(strData);
          ctrl.strData = strData;
          ctrl.onUpdate({ data: ctrl.model });
        }
      };
      ctrl.parseObjToList = function (item, items) {
        // key: the name of the object key
        // index: the ordinal position of the key within the object
        if (Array.isArray(item)) {
          angular.forEach(item, (e) => {
            var obj = angular.copy(ctrl.templates[1]);
            obj.value = e;
            // ctrl.parseObjToList(e, obj.columns[0].items);
            items.push(obj);
          });
        } else {
          Object.keys(item).forEach(function (key) {
            var obj = {};
            if (item[key]) {
              var objType = typeof item[key];
              switch (objType) {
                case "object":
                  if (Array.isArray(item[key])) {
                    obj = angular.copy(ctrl.templates[2]);
                    obj.name = key;
                    ctrl.parseObjToList(item[key], obj.columns[0].items);
                    items.push(obj);
                  } else {
                    obj = angular.copy(ctrl.templates[1]);
                    obj.name = key;
                    ctrl.parseObjToList(item[key], obj.columns[0].items);
                    items.push(obj);
                  }
                  break;
                default:
                  obj = angular.copy(ctrl.templates[0]);
                  obj.name = key;
                  obj.value = item[key];
                  items.push(obj);
                  break;
              }
            }
          });
        }
      };
      ctrl.parseObj = function (item, obj, name) {
        switch (item.type) {
          case "array":
            obj[item.name] = [];
            angular.forEach(item.columns[0].items, (sub) => {
              var o = {};
              ctrl.parseObj(sub, o);
              obj[item.name].push(o);
            });
            break;
          case "object":
            angular.forEach(item.columns[0].items, (sub) => {
              if (sub.type == "object") {
                var o = {};
                ctrl.parseObj(sub, o);
                obj[item.name] = o;
              } else {
                ctrl.parseObj(sub, obj, item.name);
              }
            });
            break;
          case "item":
            obj[item.name] = item.value;
            break;
        }
      };
      ctrl.parseJsonObject = function () {
        if (ctrl.rootType == "object") {
          ctrl.data = {};
          angular.forEach(ctrl.dropzones.root, (sub) => {
            if (sub.type == "object") {
              var o = {};
              ctrl.parseObj(sub, o);
              ctrl.data[sub.name] = o;
            } else {
              ctrl.data[sub.name] = sub.value;
            }
          });
        } else {
          ctrl.data = [];
          if (ctrl.rootType == "array") {
            angular.forEach(ctrl.dropzones.root, (sub) => {
              ctrl.data.push(sub.value);
            });
          }
        }
        ctrl.strData = JSON.stringify(ctrl.data);
        ctrl.onUpdate({ data: JSON.stringify(ctrl.data) });
      };
      ctrl.select = function (item) {
        if (ctrl.selected == item) {
          ctrl.parseObj(item, ctrl.selectedModel);
        } else {
          ctrl.selected = item;
          ctrl.selectedModel = {};
          ctrl.parseObj(item, ctrl.selectedModel);
        }
        ctrl.timestamp = Math.random();
      };
      ctrl.addField = function () {
        var column = angular.copy(ctrl.templates[0]);
        ctrl.dropzones.root.push(column);
        ctrl.parseJsonObject();
      };
      ctrl.addString = function () {
        var column = angular.copy(ctrl.templates[1]);
        ctrl.dropzones.root.push(column);
        ctrl.parseJsonObject();
      };
      ctrl.addObj = function (item) {
        var obj = angular.copy(ctrl.templates[1]);
        obj.name = "o" + (item.columns[0].items.length + 1);
        item.columns[0].items.push(obj);
        item.showMenu = false;
        ctrl.parseJsonObject();
      };
      ctrl.addArray = function (item) {
        var obj = angular.copy(ctrl.templates[2]);
        obj.name = "a" + (item.columns[0].items.length + 1);
        item.columns[0].items.push(obj);
        item.showMenu = false;
        ctrl.parseJsonObject();
      };
      ctrl.clone = function (item, list) {
        var obj = angular.copy(item);
        obj.name = item.name + "_copy";
        item.showMenu = false;
        obj.showMenu = false;
        list.items.push(obj);
        ctrl.parseJsonObject();
      };

      ctrl.remove = function (index, list) {
        if (confirm("Remove this")) {
          list.splice(index, 1);
          ctrl.parseJsonObject();
        }
      };
    },
  ],
});

modules.component("hubMessages", {
  templateUrl:
    "/mix-app/views/app-portal/components/hub-messages/hub-messages.html",
  controller: "HubMessagesController",
  bindings: {},
});
app.controller("HubMessagesController", [
  "$scope",
  "$rootScope",
  "AuthService",
  function ($scope, $rootScope, authService) {
    var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
    BaseHub.call(this, $scope, endpoints.Messenger);
    authService.fillAuthData();
    $scope.newMsgCount = 0;
    $scope.messages = [];
    $scope.onConnected = () => {
      //   $scope.joinRoom("portal");
    };
    $scope.init = function () {
      $scope.startConnection(
        "portalHub",
        authService.authentication.accessToken,
        (err) => {
          if (
            authService.authentication.refreshToken &&
            err.message.indexOf("401") >= 0
          ) {
            authService.refreshToken().then(async () => {
              $scope.startConnection(
                "portalHub",
                authService.authentication.accessToken
              );
            });
          }
        }
      );
    };
    $scope.readMessages = function () {
      $scope.newMsgCount = 0;
      $("#modal-hub-messages").modal("show");
    };
    $scope.receiveMessage = function (msg) {
      switch (msg.action) {
        case "MyConnection":
          $scope.hubRequest.from = msg.data;
          $scope.$apply();
          break;
        case "MemberList":
          // filter unique member by username
          $scope.members = msg.data.filter(
            (value, index, array) =>
              array.indexOf(array.find((u) => u.username == value.username)) ===
              index
          );
          $scope.$apply();
          break;
        case "NewMember":
          $scope.newMember(msg.data);
          break;
        case "MemberOffline":
          $scope.removeMember(msg.data);
        case "NewMessage":
          $scope.newMessage(msg);
          break;
      }
    };
    $scope.newMessage = function (msg) {
      msg.style = $scope.getMessageType(msg.type);
      if (
        msg.data &&
        !angular.isObject(msg.data) &&
        msg.data.indexOf("{") == 0
      ) {
        msg.data = JSON.parse(msg.data);
      }
      $scope.messages.push(msg);
      if (
        msg.from ||
        msg.from.connectionId != $scope.hubRequest.from.connectionId
      ) {
        $scope.newMsgCount += 1;
        $rootScope.showMessage(msg.title, msg.style);
      }
      $scope.$apply();
    };
    $scope.removeMember = function (member) {
      var index = $scope.members.findIndex(
        (x) => x.username === member.username
      );
      if (index >= 0) {
        $scope.members.splice(index, 1);
      }
      $scope.$apply();
    };

    $scope.newMember = function (member) {
      var index = $scope.members.findIndex(
        (x) => x.username === member.username
      );
      if (index < 0) {
        $scope.members.splice(0, 0, member);
      }
      $scope.$apply();
    };
    $scope.getMessageType = function (type) {
      switch (type) {
        case "Success":
          return "success";
        case "Error":
          return "danger";
        case "Warning":
          return "warning";
        case "Info":
          return "info";
        default:
          return "default";
      }
    };
  },
]);

modules.component("jumbotrons", {
  templateUrl:
    "/mix-app/views/app-portal/components/jumbotrons/jumbotrons.html",
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    function ($rootScope, $scope, $location) {
      var ctrl = this;
      ctrl.translate = function (keyword) {
        return $rootScope.translate(keyword);
      };
      // ctrl.back = function () {
      //     ctrl.backUrl = ctrl.backUrl || '/admin';
      //     $location.path(ctrl.backUrl);
      // };
    },
  ],
  bindings: {
    tagName: "=",
    tagType: "=",
  },
});

// const { data } = require("jquery");

modules.component("listMixColumn", {
  templateUrl: "/mix-app/views/app-portal/components/list-mix-column/view.html",
  bindings: {
    header: "=",
    columns: "=",
    relationships: "=",
    removeAttributes: "=",
    namingConvention: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$routeParams",
    "ngAppSettings",
    "RestMixRelationshipPortalService",
    "RestMixDatabasePortalService",
    "RestMixDatabaseColumnPortalService",
    function (
      $rootScope,
      $scope,
      $routeParams,
      ngAppSettings,
      relationshipService,
      databaseService,
      service
    ) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.selectedCol = null;
      ctrl.relationshipTypes = ["OneToMany", "ManyToMany"];
      ctrl.defaultRelationship = {
        parentId: null,
        type: "OneToMany",
        childId: null,
        displayName: null,
      };
      ctrl.$onInit = async function () {
        ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
        ctrl.request.mixDatabaseContextId = $routeParams.mixDatabaseContextId;
        ctrl.databases = await databaseService.getList(ctrl.request);
        var getDefaultAttr = await service.getDefault();
        if (getDefaultAttr.success) {
          ctrl.defaultAttr = getDefaultAttr.data;
          ctrl.defaultAttr.options = [];
        }
        angular.forEach(ctrl.relationships, (e, i) => {
          e.database = ctrl.databases.data.items.find((m) => m.id == e.childId);
        });
        $rootScope.sortArray(ctrl.columns, "priority");
        $scope.$apply();
      };
      ctrl.addAttr = function () {
        if (ctrl.columns) {
          var t = angular.copy(ctrl.defaultAttr);
          t.priority = ctrl.columns.length + 1;
          ctrl.columns.push(t);
        }
      };
      ctrl.showModal = (id) => {
        $(`#advance-${id}`).modal("toggle");
      };
      ctrl.selectReferenceDb = function (relationship) {
        relationship.childId = relationship.database.id;
        relationship.destinateDatabaseName = relationship.database.systemName;
      };
      ctrl.addRelationship = function () {
        if (ctrl.relationships) {
          var t = angular.copy(ctrl.defaultRelationship);
          t.priority = ctrl.relationships.length + 1;
          ctrl.relationships.push(t);
        }
      };
      ctrl.alterColumn = async function (col) {
        if (confirm("Alter this column ?")) {
          if (col) {
            col.isDrop = true;
            $rootScope.isBusy = true;
            var result = await service.alterColumn(col);
            if (result.success) {
              $rootScope.showMessage("success", "success");
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        }
      };
      ctrl.removeAttribute = async function (attr, index) {
        if (confirm("Remove this column ?")) {
          if (attr.id) {
            $rootScope.isBusy = true;
            var remove = await service.delete([attr.id]);
            if (remove.success) {
              ctrl.columns.splice(index, 1);
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            ctrl.columns.splice(index, 1);
          }
        }
      };
      ctrl.removeRelationship = async function (rel, index) {
        if (confirm("Remove this relationship ?")) {
          if (rel.id) {
            $rootScope.isBusy = true;
            var remove = await relationshipService.delete([rel.id]);
            if (remove.success) {
              ctrl.relationships.splice(index, 1);
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            ctrl.relationships.splice(index, 1);
          }
        }
      };
      ctrl.addOption = function (col, index) {
        var val = $("#option_" + index).val();
        col.columnConfigurations.allowedValues =
          col.columnConfigurations.allowedValues || [];
        col.columnConfigurations.allowedValues.push(val);
        $("#option_" + index).val("");
      };
      ctrl.generateForm = function () {
        var formHtml = document.createElement("module-form");
        formHtml.setAttribute("class", "row");
        angular.forEach(ctrl.viewmodel.attributes, function (e, i) {
          var el;
          var label = document.createElement("label");
          label.setAttribute("class", "form-label");
          label.setAttribute("ng-bind", "{{data.title}}");

          switch (e.dataType) {
            case "datetime":
              el = document.createElement("input");
              el.setAttribute("type", "datetime-local");
              break;

            case "date":
              el = document.createElement("input");
              el.setAttribute("type", "date");
              break;

            case "time":
              el = document.createElement("input");
              el.setAttribute("type", "time");
              break;

            case "phonenumber":
              el = document.createElement("input");
              el.setAttribute("type", "tel");
              break;

            case "number":
              el = document.createElement("input");
              el.setAttribute("type", "number");
              break;

            case "html":
              el = document.createElement("trumbowyg");
              el.setAttribute("options", "{}");
              el.setAttribute("type", "number");
              break;

            case "textarea":
              el = document.createElement("textarea");
              break;

            default:
              el = document.createElement("input");
              el.setAttribute("type", "text");
              formHtml.appendChild(el);
              break;
          }
          el.setAttribute("ng-model", "data.jItem[" + e.name + "].value");
          el.setAttribute("placeholder", "{{$ctrl.title}}");
          formHtml.appendChild(label);
          formHtml.appendChild(el);
        });
        ctrl.viewmodel.formView.content = formHtml.innerHTML;
      };

      ctrl.generateName = function (col, isForce = false) {
        if (isForce || !col.systemName) {
          col.systemName = $rootScope.generateKeyword(
            col.displayName,
            ctrl.namingConvention == "TitleCase" ? "" : "_",
            ctrl.namingConvention == "TitleCase",
            false
          );
        }
      };
      ctrl.removeAttr = function (index) {
        if (ctrl.columns) {
          ctrl.columns.splice(index, 1);
        }
      };
      ctrl.updateOrders = function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.columns.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.columns.splice(ctrl.dragStartIndex + 1, 1);
        }
        angular.forEach(ctrl.columns, function (e, i) {
          e.priority = i;
        });
        $scope.$apply();
      };
      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
      };
      ctrl.showReferences = function (col) {
        ctrl.colRef = col;
        $("#modal-navs").modal("show");
      };
      ctrl.showRelationships = function () {
        $("#modal-relationships").modal("show");
      };

      ctrl.referenceCallback = function (selected) {
        if (selected && selected.length) {
          ctrl.colRef.reference = selected;
          ctrl.colRef.referenceId = selected[0].id;
        }
        $("#modal-navs").modal("hide");
      };
    },
  ],
});

modules.component("logStream", {
  templateUrl: "/mix-app/views/app-portal/components/log-stream/view.html",
  controller: "LogStreamController",
  bindings: {},
});
app.controller("LogStreamController", [
  "$scope",
  "$rootScope",
  "AuthService",
  function ($scope, $rootScope, authService) {
    var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
    BaseHub.call(this, $scope, endpoints.Messenger);

    authService.fillAuthData();
    $scope.keyword = "";
    $scope.newMsgCount = 0;
    $scope.messages = [];
    $scope.onConnected = () => {
      //   $scope.joinRoom("portal");
    };
    $scope.init = function () {
      $scope.startConnection(
        "log-stream-hub",
        authService.authentication.accessToken,
        (err) => {
          if (
            authService.authentication.refreshToken &&
            err.message.indexOf("401") >= 0
          ) {
            authService.refreshToken().then(async () => {
              $scope.startConnection(
                "log-stream-hub",
                authService.authentication.accessToken
              );
            });
          }
        }
      );
    };
    $scope.readMessages = function () {
      $scope.newMsgCount = 0;
      $("#modal-log-stream").modal("show");
      $scope.scrollToBot();
    };
    $scope.receiveMessage = function (msg) {
      switch (msg.action) {
        case "NewMessage":
          $scope.newMessage(msg);
          break;
      }
    };
    $scope.newMessage = function (msg) {
      msg.style = $scope.getMessageType(msg.type);
      if (
        msg.data &&
        !angular.isObject(msg.data) &&
        msg.data.indexOf("{") == 0
      ) {
        msg.data = JSON.parse(msg.data);
      }
      $scope.messages.push(msg);
      $scope.$apply();
      $scope.scrollToBot();
    };
    $scope.scrollToBot = () => {
      let container = $("#modal-log-stream").find(".modal-body")[0];
      setTimeout(() => {
        let h = $("#modal-log-stream").find(".table").height();
        $(container).animate(
          {
            scrollTop: h, // Scroll to top of body
          },
          500
        );
      }, 200);
    };
    $scope.getMessageType = function (type) {
      switch (type) {
        case "Success":
          return "success";
        case "Error":
          $scope.newMsgCount += 1;
          return "danger";
        case "Warning":
          return "warning";
        case "Info":
          return "info";
        default:
          return "default";
      }
    };
  },
]);

modules.component("mainSideBar", {
  templateUrl:
    "/mix-app/views/app-portal/components/main-side-bar/main-side-bar.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "TranslatorService",
    "ApiService",
    "CommonService",
    function (
      $rootScope,
      $scope,
      ngAppSettings,
      translatorService,
      apiService,
      commonService
    ) {
      var ctrl = this;
      ctrl.items = [];
      ctrl.init = async function () {
        var resp = await apiService.getPortalMenus();
        if (resp.success && resp.data && resp.data.length) {
          ctrl.items = resp.data;
        } else {
          ctrl.items = JSON.parse($("#portal-menus").val()).items;
        }
      };
    },
  ],
  bindings: {
    items: "=?",
  },
});

modules.component("mainSideBarDynamic", {
  templateUrl:
    "/mix-app/views/app-portal/components/main-side-bar-dynamic/main-side-bar-dynamic.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "CommonService",
    "TranslatorService",
    "AuthService",
    function (
      $rootScope,
      $scope,
      ngAppSettings,
      commonService,
      translatorService,
      authService
    ) {
      var ctrl = this;
      ctrl.init = function () {
        // commonService.getPermissions().then(function (response) {
        //   if (response && response.success) {
        //     ctrl.isInit = true;
        //     ctrl.roles = response.data;
        //     if (ctrl.roles.data) {
        //       ctrl.role = ctrl.roles.data[0];
        //     }
        //     $rootScope.isBusy = false;
        //     $scope.$apply();
        //   }
        // });
      };
    },
  ],
  bindings: {
    roles: "=",
    activedRole: "=",
    translate: "&",
  },
});

modules.component("mainSideBarItem", {
  templateUrl:
    "/mix-app/views/app-portal/components/main-side-bar-item/main-side-bar-item.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.translate = $rootScope.translate;
      ctrl.addClass = function (obj) {
        obj.currentTarget.classList.add("btn-group-lg");
        //alert(obj);
      };
      ctrl.removeClass = function (obj) {
        obj.currentTarget.classList.remove("btn-group-lg");
        //alert(obj);
      };
    },
  ],
  bindings: {
    item: "=",
  },
});

modules.component("mainSideBarItemDynamic", {
  templateUrl:
    "/mix-app/views/app-portal/components/main-side-bar-item-dynamic/main-side-bar-item-dynamic.html",
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.translate = $rootScope.translate;
    },
  ],
  bindings: {
    iconSize: "=",
    linkStyle: "=",
    itemStyle: "=",
    item: "=",
  },
});

modules.component("mediaFileUpload", {
  templateUrl:
    "/mix-app/views/app-portal/components/media-file-upload/view.html",
  bindings: {
    header: "=?",
    accept: "=?",
    src: "=",
    srcUrl: "=?",
    fileModel: "=?",
    type: "=?",
    auto: "=?",
    uploadOptions: "=?",
    onDelete: "&?",
    onUpdate: "&?",
    onInsert: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "MediaService",
    function ($rootScope, $scope, ngAppSettings, mediaService) {
      var ctrl = this;
      ctrl.isAdmin = $rootScope.isAdmin;
      var image_placeholder = "/mix-app/assets/img/image_placeholder.jpg";
      ctrl.isImage = false;
      ctrl.mediaNavs = [];
      ctrl.$onInit = function () {
        ctrl.autoSave = ctrl.auto === "true";
        if (ctrl.src) {
          ctrl.srcUrl = angular.copy(ctrl.src);
        }
        // if (!ctrl.srcUrl) {
        //   ctrl.srcUrl = image_placeholder;
        // }
        ctrl.isImage =
          ctrl.srcUrl != undefined &&
          ctrl.srcUrl
            .toLowerCase()
            .match(/([/|.|\w|\s|-])*\.(?:jpg|jpeg|gif|png|svg|webp)/g);
        ctrl.maxHeight = ctrl.maxHeight || "200px";
        ctrl.id = Math.floor(Math.random() * 100);
        if (ctrl.uploadOptions) {
          ctrl.w = ctrl.uploadOptions.width;
          ctrl.h = ctrl.uploadOptions.height;
        }
      };
      ctrl.$doCheck = function () {
        if (ctrl.src !== ctrl.srcUrl && ctrl.srcUrl != image_placeholder) {
          ctrl.src = ctrl.srcUrl;
          ctrl.isImage = ctrl.srcUrl
            .toLowerCase()
            .match(/([/|.|\w|\s|-])*\.(?:jpg|jpeg|gif|png|svg)/g);
        }
      }.bind(ctrl);

      ctrl.selectFile = function (files) {
        if (files !== undefined && files !== null && files.length > 0) {
          ctrl.formFile = files[0];
          if (
            ctrl.uploadOptions &&
            ctrl.uploadOptions.isCrop &&
            $rootScope.isImage(ctrl.formFile)
          ) {
            ctrl.canUpload = false;
            mediaService.openCroppie(files[0], ctrl, ctrl.autoSave);
          } else {
            ctrl.canUpload = true;
            if (ctrl.autoSave) {
              ctrl.uploadFile(ctrl.formFile);
            } else {
              ctrl.getBase64(ctrl.formFile);
            }
          }
        }
      };

      ctrl.croppieCallback = function (result) {
        if (result) {
          ctrl.isImage = true;
          if (!ctrl.autoSave) {
            ctrl.src = result;
            ctrl.fileStream = result;
          } else {
            ctrl.src = result;
            ctrl.srcUrl = result;
          }
        } else if (ctrl.formFile) {
          if (ctrl.autoSave) {
            ctrl.uploadFile(ctrl.formFile);
          } else {
            ctrl.fileModel.file = ctrl.formFile;
            ctrl.getBase64(ctrl.formFile);
          }
          //   ctrl.uploadFile(ctrl.formFile);
        }
      };

      ctrl.uploadFile = async function (file) {
        if (file !== null) {
          $rootScope.isBusy = true;
          if (file) {
            ctrl.srcUrl = null;
            var response = await mediaService.uploadMedia(
              file,
              null,
              ctrl.onUploadFileProgress
            );
            if (response.success) {
              ctrl.media = response.data;
              $rootScope.isBusy = false;
              ctrl.srcUrl = response.data;
              $scope.$apply();
            } else {
              $rootScope.showErrors(response.errors);
              $rootScope.isBusy = false;
              $scope.$apply();
            }
          }
        } else {
          return null;
        }
      };
      ctrl.getBase64 = function (file) {
        if (file !== null) {
          $rootScope.isBusy = true;
          var reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = function () {
            if (ctrl.fileModel) {
              ctrl.fileModel.filename = file.name.substring(
                0,
                file.name.lastIndexOf(".")
              );
              ctrl.fileModel.extension = file.name.substring(
                file.name.lastIndexOf(".")
              );
              ctrl.fileModel.fileBase64 = reader.result;
            }
            ctrl.srcUrl = reader.result;
            ctrl.isImage =
              ctrl.srcUrl.indexOf("data:image/") >= 0 ||
              ctrl.srcUrl
                .toLowerCase()
                .match(/([/|.|\w|\s|-])*\.(?:jpg|jpeg|gif|png|svg)/g);
            ctrl.src = reader.result;
            $rootScope.isBusy = false;
            $scope.$apply();
          };
          reader.onerror = function (error) {
            $rootScope.isBusy = false;
            $rootScope.showErrors([error]);
          };
        } else {
          return null;
        }
      };
      ctrl.onUploadFileProgress = function (progress) {
        ctrl.progress = progress;
      };
    },
  ],
});

modules.component("mediaUpload", {
  templateUrl:
    "/mix-app/views/app-portal/components/media-upload/media-upload.html",
  controller: [
    "$scope",
    "$rootScope",
    "MediaService",
    "ApiService",
    "CommonService",
    function ($scope, $rootScope, service, apiService, commonService) {
      var ctrl = this;
      ctrl.default = {
        title: "",
        description: "",
        status: "Published",
        fileFolder: "Medias",
        mediaFile: {
          file: null,
          fullPath: "",
          folderName: "Media",
          fileFolder: "",
          fileName: "",
          extension: "",
          content: "",
          fileStream: "",
        },
      };
      ctrl.viewmodel = angular.copy(ctrl.default);
      ctrl.onInsert = function (data) {
        if (ctrl.onUpdate) {
          ctrl.onUpdate();
        }
      };
      ctrl.save = async function (data) {
        $rootScope.isBusy = true;
        var resp = await service.save(data);
        if (resp && resp.success) {
          $scope.viewmodel = resp.data;
          $rootScope.showMessage("success", "success");
          $rootScope.isBusy = false;
          ctrl.viewmodel = angular.copy(ctrl.default);
          if (ctrl.onUpdate) {
            ctrl.onUpdate();
          }
          $("#modal-files .modal-body").animate({ scrollTop: "0px" }, 500);
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
  bindings: {
    onUpdate: "&?",
  },
});

modules.component("mediumNews", {
  templateUrl: "/mix-app/views/app-portal/components/medium-news/view.html",
  controller: [
    "$rootScope",
    "$http",
    function ($rootScope, $http) {
      var ctrl = this;
      ctrl.items = [];
      ctrl.init = function () {
        var req = {
          method: "GET",
          url:
            "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/mixcore&api_key=qww481wpgat3g4iqvqss7spzrilkbekpxpjgrbof&t=" +
            Math.floor(Date.now() / 1000),
        };
        ctrl.getMediumApiResult(req);
      };

      ctrl.getMediumApiResult = async function (req) {
        return $http(req).then(
          function (resp) {
            if (resp.status == "200") {
              ctrl.items = resp.data.items;
            }
          },
          function (error) {
            return {
              success: false,
              errors: [error.statusText || error.status],
            };
          }
        );
      };
    },
  ],
  bindings: {},
});

app.component("mixMetadata", {
  templateUrl: "/mix-app/views/app-portal/components/metadata/view.html",
  bindings: {
    title: "=",
    parentId: "=",
    parentType: "=",
    description: "=?",
    image: "=?",
    type: "=",
    metadataType: "=",
    onDelete: "&",
    onUpdate: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "RestMixDatabasePortalService",
    "MetadataService",
    function (
      $rootScope,
      $scope,
      ngAppSettings,
      databaseService,
      metadataService
    ) {
      var ctrl = this;
      ctrl.data = { items: [] };
      ctrl.selectedValues = [];
      ctrl.$onInit = async () => {
        ctrl.request = angular.copy(ngAppSettings.request);
        ctrl.request.searchColumns = "Content,SeoContent";
        ctrl.requestAssociation = angular.copy(ngAppSettings.request);
        ctrl.requestAssociation.contentType = ctrl.parentType;
        ctrl.requestAssociation.contentId = ctrl.parentId;
        ctrl.requestAssociation.metadataType = ctrl.metadataType;
        if (ctrl.parentId) {
          await ctrl.loadSuggestions();
          await ctrl.loadMetadata();
        }
        $scope.$apply();
      };
      ctrl.loadMetadata = async function () {
        let resp = await metadataService.getMetadataByContent(
          ctrl.parentType,
          ctrl.parentId,
          ctrl.requestAssociation
        );
        if (resp && resp.success) {
          ctrl.data = resp.data;
        }
      };

      ctrl.loadDatabase = async function () {
        var getMixDatabase = await databaseService.getByName(["Metadata"]);
        ctrl.columns = getMixDatabase.data.columns;
      };

      ctrl.loadSuggestions = async () => {
        ctrl.request.keyword = "";
        ctrl.request.metadataType = ctrl.metadataType;
        let getSuggestions = await metadataService.getList(ctrl.request);
        if (getSuggestions.success) {
          ctrl.suggestions = getSuggestions.data;
        }
        $scope.$apply();
      };
      ctrl.addLink = async (metadata) => {
        var tmp = ctrl.data.items.find(
          (m) => m.metadata.content == metadata.content
        );
        if (!tmp) {
          if (metadata) {
            let dto = {
              metadataId: metadata.id,
              contentId: ctrl.parentId,
              contentType: ctrl.parentType,
              description: ctrl.description,
              image: ctrl.image,
            };
            var resp = await metadataService.createMetadataContentAssociation(
              dto
            );
            if (resp.success) {
              $rootScope.showMessage("Success", "success");
              await ctrl.loadMetadata();
              ctrl.reset();
              $rootScope.isBusy = false;
              $scope.$apply();
            } else {
              $rootScope.showErrors(resp.errors);
              $rootScope.isBusy = false;
              $scope.$apply();
            }
          }
        } else {
          //   $rootScope.showMessage(`${metadata.content} is existed`, "warning");
          await ctrl.removeConfirmed(tmp.id);
        }
      };
      ctrl.isActive = (metadata) => {
        return (
          ctrl.data.items.find((m) => m.metadata.content == metadata.content) !=
          undefined
        );
      };
      ctrl.addMetadata = async () => {
        if (ctrl.keyword) {
          var tmp = ctrl.data.items.find(
            (m) => m.metadata.content == ctrl.keyword
          );
          if (!tmp) {
            let metadata = await ctrl.getOrCreateMetadata();
            if (metadata) {
              let dto = {
                metadataId: metadata.id,
                contentId: ctrl.parentId,
                contentType: ctrl.parentType,
                description: ctrl.description,
                image: ctrl.image,
              };
              var resp = await metadataService.createMetadataContentAssociation(
                dto
              );
              if (resp.success) {
                $rootScope.showMessage("Success", "success");
                await ctrl.loadMetadata();
                await ctrl.loadSuggestions();
                ctrl.reset();
                $rootScope.isBusy = false;
                $scope.$apply();
              } else {
                $rootScope.showErrors(resp.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
              }
            }
          } else {
            tmp.isActived = true;
            ctrl.select(tmp);
          }
        }
      };

      ctrl.reset = () => {
        ctrl.keyword = "";
        $scope.$apply();
      };

      ctrl.getOrCreateMetadata = async () => {
        $rootScope.isBusy = true;
        let dto = {
          content: ctrl.keyword,
          type: ctrl.metadataType,
        };
        var resp = await metadataService.getOrCreateMetadata(dto);
        if (resp.success) {
          $rootScope.isBusy = false;
          return resp.data;
        } else {
          $rootScope.showErrors(resp.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.remove = function (id) {
        if (
          confirm(
            "Deleted data will not able to recover, are you sure you want to delete this item?"
          )
        ) {
          ctrl.removeConfirmed(id);
        }
      };

      ctrl.removeConfirmed = async function (id) {
        $rootScope.isBusy = true;
        var result = await metadataService.deleteMetadataContentAssociation(id);
        if (result.success) {
          await ctrl.loadMetadata();
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
});

modules.component("mixDatabaseDataFilter", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-data-filter/view.html",
  bindings: {
    query: "=",
    mixDatabaseName: "=?",
    mixDatabaseId: "=?",
    selectedList: "=",
    initData: "=?",
    columns: "=?",
    selected: "=",
    callback: "&?",
    save: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "RestMixDatabaseDataPortalService",
    function ($rootScope, $scope, ngAppSettings, dataService) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.types = ["Page", "Post"];
      ctrl.type = "Page";
      ctrl.navs = [];
      ctrl.data = { items: [] };
      ctrl.goToPath = $rootScope.goToPath;
      ctrl.fieldNames = {
        id: ctrl.database.namingConvention == "TitleCase" ? "Id" : "id",
        parentId:
          ctrl.database.namingConvention == "TitleCase"
            ? "ParentId"
            : "parent_id",
        parentDatabaseName:
          ctrl.database.namingConvention == "TitleCase"
            ? "ParentDatabaseName"
            : "parent_database_name",
        childId:
          ctrl.database.namingConvention == "TitleCase"
            ? "ChildId"
            : "child_id",
        childDatabaseName:
          ctrl.database.namingConvention == "TitleCase"
            ? "ChildDatabaseName"
            : "child_database_name",
        createdDateTime:
          ctrl.database.namingConvention == "TitleCase"
            ? "CreatedDateTime"
            : "created_date_time",
        lastModified:
          ctrl.database.namingConvention == "TitleCase"
            ? "LastModified"
            : "last_modified",
        tenantId:
          ctrl.database.namingConvention == "TitleCase"
            ? "MixTenantId"
            : "mix_tenant_id",
        createdBy:
          ctrl.database.namingConvention == "TitleCase"
            ? "CreatedBy"
            : "created_by",
        modifiedBy:
          ctrl.database.namingConvention == "TitleCase"
            ? "ModifiedBy"
            : "modified_by",
        priority:
          ctrl.database.namingConvention == "TitleCase"
            ? "Priority"
            : "priority",
        status:
          ctrl.database.namingConvention == "TitleCase" ? "Status" : "status",
        isDeleted:
          ctrl.database.namingConvention == "TitleCase"
            ? "IsDeleted"
            : "is_deleted",
      };
      ctrl.$onInit = function () {
        if (ctrl.initData) {
          ctrl.data = ctrl.initData;
        } else {
          ctrl.loadData();
        }
      };
      ctrl.loadData = async function (pageIndex) {
        ctrl.isBusy = true;

        // ctrl.request.query = ctrl.query + ctrl.srcId;
        ctrl.navs = [];
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var df = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = df.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var dt = new Date(ctrl.request.toDate);
          ctrl.request.toDate = dt.toISOString();
        }
        if (ctrl.mixDatabaseId) {
          ctrl.request.mixDatabaseId = ctrl.mixDatabaseId;
        }
        if (ctrl.mixDatabaseName) {
          ctrl.request.mixDatabaseName = ctrl.mixDatabaseName;
        }
        if (ctrl.filterType) {
          ctrl.request.filterType = ctrl.filterType;
        }

        var response = await dataService.getList(ctrl.request);
        if (response.success) {
          ctrl.data = response.data;
          ctrl.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          ctrl.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.edit = function (nav) {
        switch (ctrl.type) {
          case "Page":
            ctrl.goToPath(`/admin/page/details/${nav.id}`);
            break;
          case "Post":
            ctrl.goToPath(`/admin/post/details/${nav.id}`);
            break;
          case "Module":
            ctrl.goToPath(`/admin/module/details/${nav.id}`);
            break;
        }
      };
      ctrl.onClose = function () {
        ctrl.callback();
      };
      ctrl.select = function (nav) {
        var current = $rootScope.findObjectByKey(ctrl.data.items, "id", nav.id);
        if (!nav.isActive && ctrl.callback) {
          ctrl.callback({ nav: nav });
        }
        if (ctrl.isMultiple) {
          current.isActive = !current.isActive;
        } else {
          if (!nav.isActive) {
            angular.forEach(ctrl.data.items, (element) => {
              element.isActive = false;
            });
          }
          current.isActive = !nav.isActive;
        }
      };
      ctrl.saveSelected = function () {
        ctrl.selected = $rootScope.filterArray(
          ctrl.data,
          ["isActived"],
          [true]
        );
        setTimeout(() => {
          ctrl.save().then(() => {
            ctrl.loadPosts();
          });
        }, 500);
      };
      ctrl.limString = function (str, max) {
        if (str) {
          return str.length > max ? str.substring(0, max) + " ..." : str;
        }
      };
    },
  ],
});

modules.component("mixDatabaseColumn", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-column/view.html",
  bindings: {
    column: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "RestMixDatabaseColumnPortalService",
    function ($rootScope, $scope, columnService) {
      var ctrl = this;
      ctrl.value = {};
      ctrl.column = {
        dataType: "Text",
        mixDatabaseName: "sysAdditionalColumn",
        mixDatabaseId: 6,
      };
      ctrl.selectedCol = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = async function () {};
      ctrl.addAttr = async function () {
        if (ctrl.column.name) {
          var current = $rootScope.findObjectByKey(
            ctrl.additionalData.columns,
            "name",
            ctrl.column.name
          );
          if (current) {
            $rootScope.showErrors(["Field " + ctrl.column.name + " existed!"]);
          } else {
            ctrl.column.priority = ctrl.additionalData.columns.length + 1;
            $rootScope.isBusy = true;
            var saveField = await columnService.create(ctrl.column);
            $rootScope.isBusy = false;
            if (saveField.success) {
              ctrl.additionalData.columns.push(saveField.data);

              //reset column option
              ctrl.column.title = "";
              ctrl.column.name = "";
              ctrl.column.dataType = "Text";
              $scope.$apply();
            }
          }
        } else {
          $rootScope.showErrors(["Please add column Name"]);
        }
      };

      ctrl.generateName = function (col) {
        col.systemName = $rootScope.generateKeyword(col.displayName, "_", true);
      };
      ctrl.showReferences = function (col) {
        ctrl.colRef = col;
        $("#modal-navs").modal("show");
      };
      ctrl.referenceCallback = function (selected) {
        if (selected && selected.length) {
          ctrl.colRef.reference = selected;
          ctrl.colRef.referenceId = selected[0].id;
        }
        $("#modal-navs").modal("hide");
      };
      ctrl.updateOrders = function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.columns.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.columns.splice(ctrl.dragStartIndex + 1, 1);
        }
        angular.forEach(ctrl.columns, function (e, i) {
          e.priority = i;
        });
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
      };

      ctrl.removeAttribute = function (val, index) {
        $rootScope.showConfirm(
          ctrl,
          "removeAttributeConfirmed",
          [val, index],
          null,
          "Remove Field",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };
      ctrl.removeAttributeConfirmed = async function (val, index) {
        if (val.id) {
          $rootScope.isBusy = true;
          var result = await columnService.delete([val.id]);
          if (result.success) {
            ctrl.additionalData.columns.splice(index, 1);
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            $rootScope.showErrors(result.errors);
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        } else {
          ctrl.additionalData.columns.splice(index, 1);
        }
      };
    },
  ],
});

modules.component("mixDatabaseDataValueEditor", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-data-value-editor/view.html",
  bindings: {
    mixDatabaseDataValue: "=?",
    parentType: "=?",
    parentId: "=?",
    isShowTitle: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "$location",
    "RestRelatedMixDatabasePortalService",
    "RestMixDatabaseDataPortalService",
    function (
      $rootScope,
      $scope,
      ngAppSettings,
      $location,
      navService,
      dataService
    ) {
      var ctrl = this;
      ctrl.goToPath = $rootScope.goToPath;
      ctrl.icons = ngAppSettings.icons;
      ctrl.refData = null;
      ctrl.defaultDataModel = null;
      ctrl.refDataModel = {
        id: null,
        data: null,
      };
      ctrl.refRequest = angular.copy(ngAppSettings.request);
      ctrl.refRequest.pageSize = 100;
      ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
      ctrl.previousId = null;
      ctrl.$doCheck = function () {
        if (
          ctrl.mixDatabaseDataValue &&
          ctrl.previousId !== ctrl.mixDatabaseDataValue.id
        ) {
          ctrl.previousId = ctrl.mixDatabaseDataValue.id;
          ctrl.initData();
        }
      }.bind(ctrl);
      ctrl.$onInit = function () {
        ctrl.initData();
      };
      ctrl.initData = async function () {
        setTimeout(() => {
          if (!ctrl.mixDatabaseDataValue.id) {
            ctrl.initDefaultValue();
          }
          switch (ctrl.mixDatabaseDataValue.dataType.toLowerCase()) {
            case "datetime":
            case "date":
            case "time":
              if (ctrl.mixDatabaseDataValue.dateTimeValue) {
                ctrl.mixDatabaseDataValue.dateObj = new Date(
                  ctrl.mixDatabaseDataValue.dateTimeValue
                );
                $scope.$apply();
              }
              break;
            case "reference": // reference
              if (
                ctrl.mixDatabaseDataValue.column.referenceId &&
                ctrl.parentId
              ) {
                ctrl.mixDatabaseDataValue.integerValue =
                  ctrl.mixDatabaseDataValue.column.referenceId;
                // navService.getSingle(["default"]).then((resp) => {
                //   ctrl.defaultDataModel = resp;
                //   ctrl.defaultDataModel.mixDatabaseId =
                //     ctrl.mixDatabaseDataValue.column.referenceId;
                //   ctrl.refDataModel = angular.copy(ctrl.defaultDataModel);
                // });
                // ctrl.loadRefData();
              }
              break;
            default:
              if (
                ctrl.mixDatabaseDataValue.column &&
                ctrl.mixDatabaseDataValue.column.isEncrypt &&
                ctrl.mixDatabaseDataValue.encryptValue
              ) {
                var encryptedData = {
                  key: ctrl.mixDatabaseDataValue.encryptKey,
                  data: ctrl.mixDatabaseDataValue.encryptValue,
                };
                ctrl.mixDatabaseDataValue.stringValue =
                  $rootScope.decrypt(encryptedData);
              }
              if (
                ctrl.mixDatabaseDataValue.column &&
                !ctrl.mixDatabaseDataValue.stringValue
              ) {
                ctrl.mixDatabaseDataValue.stringValue =
                  ctrl.mixDatabaseDataValue.column.defaultValue;
                $scope.$apply();
              }
              break;
          }
        }, 200);
      };
      ctrl.initDefaultValue = async function () {
        switch (ctrl.mixDatabaseDataValue.dataType) {
          case "datetime":
          case "date":
          case "time":
            if (ctrl.mixDatabaseDataValue.column.defaultValue) {
              ctrl.mixDatabaseDataValue.dateObj = new Date(
                ctrl.mixDatabaseDataValue.column.defaultValue
              );
              ctrl.mixDatabaseDataValue.stringValue =
                ctrl.mixDatabaseDataValue.column.defaultValue;
            }
            break;
          case "double":
            if (ctrl.mixDatabaseDataValue.column.defaultValue) {
              ctrl.mixDatabaseDataValue.doubleValue = parseFloat(
                ctrl.mixDatabaseDataValue.column.defaultValue
              );
              ctrl.mixDatabaseDataValue.stringValue =
                ctrl.mixDatabaseDataValue.column.defaultValue;
            }
            break;
          case "boolean":
            if (ctrl.mixDatabaseDataValue.column.defaultValue) {
              ctrl.mixDatabaseDataValue.booleanValue =
                ctrl.mixDatabaseDataValue.column.defaultValue == "true";
              ctrl.mixDatabaseDataValue.stringValue =
                ctrl.mixDatabaseDataValue.column.defaultValue;
            }
            break;

          default:
            if (ctrl.mixDatabaseDataValue.column.defaultValue) {
              ctrl.mixDatabaseDataValue.stringValue =
                ctrl.mixDatabaseDataValue.column.defaultValue;
            }
            break;
        }
      };
      ctrl.updateStringValue = async function (dataType) {
        switch (dataType.toLowerCase()) {
          case "datetime":
          case "date":
          case "time":
            if (ctrl.mixDatabaseDataValue.dateObj) {
              ctrl.mixDatabaseDataValue.dateTimeValue =
                ctrl.mixDatabaseDataValue.dateObj.toISOString();
              ctrl.mixDatabaseDataValue.stringValue =
                ctrl.mixDatabaseDataValue.dateTimeValue;
            }
            break;
          case "double":
            if (ctrl.mixDatabaseDataValue.doubleValue) {
              ctrl.mixDatabaseDataValue.stringValue =
                ctrl.mixDatabaseDataValue.doubleValue.toString();
            }
            break;
          case "boolean":
            if (ctrl.mixDatabaseDataValue.booleanValue != null) {
              ctrl.mixDatabaseDataValue.stringValue =
                ctrl.mixDatabaseDataValue.booleanValue.toString();
            }
            break;

          default:
            break;
        }
      };

      ctrl.updateRefData = function (nav) {
        ctrl.goToPath(`/admin/mix-database-data/details?dataContentId=${nav.data.id}
                &mixDatabaseId=${nav.data.mixDatabaseId}
                &parentId=${ctrl.parentId}
                &parentType=${ctrl.parentType}`);
        // ctrl.refDataModel = nav;
        // var e = $(".pane-form-" + ctrl.mixDatabaseDataValue.column.referenceId)[0];
        // angular.element(e).triggerHandler('click');
        // $location.url('/admin/mix-database-data/details?dataContentId='+ item.id +'&mixDatabaseId=' + item.mixDatabaseId+'&parentType=' + item.parentType+'&parentId=' + item.parentId);
      };

      ctrl.removeRefData = async function (nav) {
        $rootScope.showConfirm(
          ctrl,
          "removeRefDataConfirmed",
          [nav],
          null,
          "Remove",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };
      ctrl.removeRefDataConfirmed = async function (nav) {
        $rootScope.isBusy = true;
        var result = await navService.delete([
          nav.parentId,
          nav.parentType,
          nav.id,
        ]);
        if (result.success) {
          $rootScope.removeObjectByKey(ctrl.refData, "id", nav.id);
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErros(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
});

modules.component("mixDatabaseDataValues", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-data-values/view.html",
  bindings: {
    database: "=?",
    mixDatabaseName: "=?",
    mixDatabaseTitle: "=?",
    mixDatabaseId: "=?",
    relationship: "=?",
    parentName: "=?",
    parentId: "=?",
    guidParentId: "=?",
    header: "=?",
    data: "=?",
    canDrag: "=?",
    queries: "=?",
    filterType: "=?",
    compareType: "=?",
    selectedList: "=?",
    selectSingle: "=?",
    onFilterList: "&?",
    onApplyList: "&?",
    onSendMail: "&?",
    onUpdate: "&?",
    onDuplicate: "&?",
    onDelete: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "$routeParams",
    "ngAppSettings",
    "RestMixDatabasePortalService",
    "MixDbService",
    function (
      $rootScope,
      $scope,
      $location,
      $routeParams,
      ngAppSettings,
      databaseService,
      dataService
    ) {
      var ctrl = this;
      ctrl.intShowColumn = 3;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.actions = ["Delete", "SendMail"];
      ctrl.filterTypes = ["contain", "equal"];
      ctrl.compareTypes = ["or", "and"];
      ctrl.selectedProp = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;

      ctrl.$onInit = async function () {
        dataService.initDbName(ctrl.mixDatabaseName);

        if (!ctrl.selectedList) {
          ctrl.selectedList = {
            action: "Delete",
            data: [],
          };
        }
        if (!ctrl.database) {
          var getDatabase = await databaseService.getByName(
            ctrl.mixDatabaseName
          );
          if (getDatabase.success) {
            ctrl.database = getDatabase.data;
          }
        }

        ctrl.fieldNames = {
          id: ctrl.database.namingConvention == "TitleCase" ? "Id" : "id",
          parentId:
            ctrl.database.namingConvention == "TitleCase"
              ? "ParentId"
              : "parent_id",
          parentDatabaseName:
            ctrl.database.namingConvention == "TitleCase"
              ? "ParentDatabaseName"
              : "parent_database_name",
          childId:
            ctrl.database.namingConvention == "TitleCase"
              ? "ChildId"
              : "child_id",
          childDatabaseName:
            ctrl.database.namingConvention == "TitleCase"
              ? "ChildDatabaseName"
              : "child_database_name",
          createdDateTime:
            ctrl.database.namingConvention == "TitleCase"
              ? "CreatedDateTime"
              : "created_date_time",
          lastModified:
            ctrl.database.namingConvention == "TitleCase"
              ? "LastModified"
              : "last_modified",
          tenantId:
            ctrl.database.namingConvention == "TitleCase"
              ? "MixTenantId"
              : "mix_tenant_id",
          createdBy:
            ctrl.database.namingConvention == "TitleCase"
              ? "CreatedBy"
              : "created_by",
          modifiedBy:
            ctrl.database.namingConvention == "TitleCase"
              ? "ModifiedBy"
              : "modified_by",
          priority:
            ctrl.database.namingConvention == "TitleCase"
              ? "Priority"
              : "priority",
          status:
            ctrl.database.namingConvention == "TitleCase" ? "Status" : "status",
          isDeleted:
            ctrl.database.namingConvention == "TitleCase"
              ? "IsDeleted"
              : "is_deleted",
        };
        ctrl.request.name = ctrl.mixDatabaseName;
        ctrl.request.sortBy = ctrl.fieldNames.createdDateTime;
        ctrl.request.parentName = ctrl.parentName;
        ctrl.request.parentId = ctrl.parentId;
        ctrl.request.relationship = ctrl.relationship;
        ctrl.request.guidParentId = ctrl.guidParentId;
        if (!ctrl.data) {
          await ctrl.loadData();
        }
        ctrl.createUrl = `/admin/mix-database-data/create?mixDatabaseId=${
          ctrl.database.id
        }&mixDatabaseName=${ctrl.database.systemName}&mixDatabaseTitle=${
          ctrl.database.displayName
        }&dataContentId=default&relationship=${
          ctrl.relationship || ""
        }&parentId=${ctrl.parentId || ctrl.guidParentId || ""}&parentName=${
          ctrl.parentName || ""
        }`;
      };
      ctrl.toCamelCase = (txt) => {
        return txt.charAt(0).toLowerCase() + txt.substr(1);
      };
      ctrl.loadData = async function (pageIndex) {
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        dataService.initDbName(ctrl.mixDatabaseName);
        ctrl.request.queries = [];
        if (ctrl.queries) {
          Object.keys(ctrl.queries).forEach((e) => {
            if (ctrl.queries[e]) {
              ctrl.request.queries.push({
                fieldName: e,
                value: ctrl.queries[e],
              });
            }
          });
        }
        var getData = await dataService.filter(ctrl.request);
        ctrl.data = getData.data;
        ctrl.selectedIds = ctrl.data.items.map((m) => m.id);
        $scope.$apply();
      };
      ctrl.select = function (item) {
        if (item.isSelected) {
          if (ctrl.selectSingle == "true") {
            ctrl.selectedList.data.items = [];
            ctrl.selectedList.data.items.push(item);
          } else {
            var current = $rootScope.findObjectByKey(
              ctrl.selectedList,
              "id",
              item.id
            );
            if (!current) {
              ctrl.selectedList.data.items.push(item);
            }
          }
        } else {
          $rootScope.removeObject(ctrl.selectedList, item.id);
        }
      };
      ctrl.selectAll = function (isSelected) {
        ctrl.selectedList.data.items = [];
        angular.forEach(ctrl.data.items, function (e) {
          e.isSelected = isSelected;
          if (isSelected) {
            ctrl.selectedList.data.items.push(e.id);
          }
        });
      };
      ctrl.filter = function () {
        ctrl.data.items = [];
        ctrl.loadData();
      };
      ctrl.sendMail = async function (data) {
        ctrl.onSendMail({ data: data });
      };
      ctrl.apply = async function () {
        ctrl.onApplyList();
      };

      ctrl.duplicate = function (data) {
        ctrl.onDuplicate({ data: data });
      };

      ctrl.update = function (data) {
        let url = `/admin/mix-database-data/details?dataContentId=${
          data.id
        }&mixDatabaseName=${ctrl.mixDatabaseName}&mixDatabaseTitle=${
          ctrl.mixDatabaseTitle
        }&guidParentId=${ctrl.guidParentId || ""}&parentId=${
          ctrl.parentId || ""
        }&parentName=${ctrl.parentName || ""}`;
        $location.url(url);
      };

      ctrl.delete = function (data) {
        $rootScope.showConfirm(
          ctrl,
          "removeConfirmed",
          [data.id],
          null,
          "Remove",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };

      ctrl.removeConfirmed = async function (dataContentId) {
        $rootScope.isBusy = true;
        var result = await dataService.delete([dataContentId]);
        if (result.success) {
          if (ctrl.onDelete) {
            ctrl.onDelete({ data: dataContentId });
          }
          await ctrl.loadData();
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.filterData = function (item, attributeName) {
        return $rootScope.findObjectByKey(
          item.data.items,
          "attributeName",
          attributeName
        );
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.data.items[0].priority;
      };
      ctrl.updateOrders = function (index, items) {
        if (index > ctrl.dragStartIndex) {
          ctrl.data.items.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.data.items.splice(ctrl.dragStartIndex + 1, 1);
        }
        ctrl.updateDataInfos();
      };
      ctrl.updateDataInfos = async function () {
        angular.forEach(ctrl.data.items, async function (e, i) {
          e.priority = ctrl.minPriority + i;
          var resp = await dataService.saveFields(e.id, {
            priority: e.priority,
          });
          if (resp && resp.success) {
            $scope.activedPage = resp.data;
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
          }
        });
      };

      ctrl.view = function (item) {
        var obj = {
          columns: ctrl.database.columns,
          item: item,
        };
        $rootScope.preview("mix-database-data", obj, null, "modal-lg");
      };
    },
  ],
});

modules.component("mixDatabaseForm", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-form/view.html",
  bindings: {
    mixDatabaseId: "=?",
    mixDatabaseName: "=?",
    mixDatabaseTitle: "=?",
    mixDatabaseType: "=?",
    parentId: "=?",
    parentType: "=?", // MixContentType
    parentName: "=?",
    postId: "=?",
    pageId: "=?",
    moduleId: "=?",
    columns: "=?",
    references: "=?",
    mixDataContentId: "=?",
    mixDataContent: "=?",
    intParentId: "=?",
    guidParentId: "=?",
    defaultId: "=",
    backUrl: "=?",
    level: "=?",
    hideAction: "=?",
    onSave: "&?",
    onSaveSuccess: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$routeParams",
    "$location",
    "RestMixAssociationPortalService",
    "RestMixDatabasePortalService",
    "MixDbService",
    "AuthService",
    function (
      $rootScope,
      $scope,
      $routeParams,
      $location,
      associationService,
      databaseService,
      service,
      authService
    ) {
      var ctrl = this;
      var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
      BaseHub.call(this, ctrl, endpoints.Messenger);

      ctrl.isBusy = false;
      ctrl.attributes = [];
      ctrl.isInRole = $rootScope.isInRole;
      ctrl.defaultData = null;
      ctrl.selectedProp = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;

      ctrl.$onInit = async function () {
        ctrl.level = ctrl.level || 0;
        ctrl.canSave = ctrl.onSave != undefined;
        let getDatabase = await databaseService.getByName(ctrl.mixDatabaseName);
        ctrl.database = getDatabase.data;
        ctrl.fieldNames = {
          id: ctrl.database.namingConvention == "TitleCase" ? "Id" : "id",
          parentId:
            ctrl.database.namingConvention == "TitleCase"
              ? "ParentId"
              : "parent_id",
          parentDatabaseName:
            ctrl.database.namingConvention == "TitleCase"
              ? "ParentDatabaseName"
              : "parent_database_name",
          childId:
            ctrl.database.namingConvention == "TitleCase"
              ? "ChildId"
              : "child_id",
          childDatabaseName:
            ctrl.database.namingConvention == "TitleCase"
              ? "ChildDatabaseName"
              : "child_database_name",
          createdDateTime:
            ctrl.database.namingConvention == "TitleCase"
              ? "CreatedDateTime"
              : "created_date_time",
          lastModified:
            ctrl.database.namingConvention == "TitleCase"
              ? "LastModified"
              : "last_modified",
          tenantId:
            ctrl.database.namingConvention == "TitleCase"
              ? "MixTenantId"
              : "mix_tenant_id",
          createdBy:
            ctrl.database.namingConvention == "TitleCase"
              ? "CreatedBy"
              : "created_by",
          modifiedBy:
            ctrl.database.namingConvention == "TitleCase"
              ? "ModifiedBy"
              : "modified_by",
          priority:
            ctrl.database.namingConvention == "TitleCase"
              ? "Priority"
              : "priority",
          status:
            ctrl.database.namingConvention == "TitleCase" ? "Status" : "status",
          isDeleted:
            ctrl.database.namingConvention == "TitleCase"
              ? "IsDeleted"
              : "is_deleted",
        };
        service.initDbName(ctrl.mixDatabaseName);
        await ctrl.loadData();
        ctrl.connectHub();
        ctrl.isBusy = false;
        $scope.$apply();
      };
      ctrl.connectHub = () => {
        ctrl.startConnection(
          "mixDbHub",
          authService.authentication.accessToken,
          (err) => {
            if (
              authService.authentication.refreshToken &&
              err.message.indexOf("401") >= 0
            ) {
              authService.refreshToken().then(async () => {
                $scope.startConnection(
                  "mixDbHub",
                  authService.authentication.accessToken
                );
              });
            }
          }
        );
      };
      ctrl.onConnected = () => {
        ctrl.joinRooms();
      };
      ctrl.joinRooms = function () {
        ctrl.connection.invoke("JoinRooms", [ctrl.mixDatabaseName]);
      };
      ctrl.hubCreateData = function () {
        let msg = {
          connectionId: ctrl.hubRequest.from.connectionId,
          mixDbName: ctrl.mixDatabaseName,
          requestedBy: "",
          body: ctrl.mixDataContent,
        };
        if (!ctrl.mixDataContent.id) {
          ctrl.connection.invoke("CreateData", JSON.stringify(msg));
        } else {
          ctrl.connection.invoke("UpdateData", JSON.stringify(msg));
        }
        $rootScope.showMessage("Request Sent", "success");
      };
      ctrl.receiveMessage = function (msg) {
        switch (msg.action) {
          case "MyConnection":
            ctrl.hubRequest.from = msg.data;
            break;
          case "NewMessage":
            if (msg.type == "Success") {
              $rootScope.showMessage(msg.title, "success");
              ctrl.back();
            }
            if (msg.type == "Error") {
              $rootScope.showErrors([msg.title]);
            }
            break;
        }
      };
      ctrl.back = function () {
        if (ctrl.backUrl) {
          $location.url(ctrl.backUrl);
        } else {
          window.history.back();
        }
      };
      ctrl.translate = (keyword) => {
        return $rootScope.translate(keyword);
      };
      ctrl.loadData = async function () {
        /*
            If input is data id => load ctrl.mixDataContent from service and handle it independently
        */
        ctrl.isBusy = true;
        if (!ctrl.mixDataContent && ctrl.mixDataContentId) {
          service.initDbName(ctrl.mixDatabaseName);
          var getData = await service.getSingle([ctrl.mixDataContentId], {
            loadNestedData: true,
          });
          ctrl.mixDataContent = getData.data;
          if (ctrl.mixDataContent) {
            ctrl.mixDatabaseTitle =
              ctrl.mixDatabaseTitle ||
              $routeParams.mixDatabaseTitle ||
              ctrl.mixDatabaseName;
            ctrl.backUrl =
              ctrl.backUrl ??
              `/admin/mix-database-data/list?mixDatabaseId=${ctrl.mixDataContent.mixDatabaseId}&mixDatabaseName=${ctrl.mixDatabaseName}&mixDatabaseTitle=${ctrl.mixDatabaseTitle}`;
            // await ctrl.loadDefaultModel();
            ctrl.isBusy = false;
            $scope.$apply();
          } else {
            if (getData) {
              $rootScope.showErrors(getData.errors);
            }
            ctrl.isBusy = false;
            $scope.$apply();
          }
        }
        if (
          !ctrl.mixDataContent &&
          (ctrl.mixDatabaseName || ctrl.mixDatabaseId) &&
          !ctrl.defaultData
        ) {
          ctrl.mixDataContent = {};
          if (ctrl.parentId) {
            if (ctrl.database.rela)
              ctrl.mixDataContent[ctrl.fieldNames.parentId] = ctrl.parentId;
          }
          //   await ctrl.loadDefaultModel();
          ctrl.isBusy = false;
        }
        if ($routeParams.parentId) {
          var relationship = $routeParams.relationship || "OneToMany";
          if (relationship == "OneToMany") {
            if (ctrl.database.namingConvention == "SnakeCase") {
              ctrl.mixDataContent[`${$routeParams.parentName}_id`] =
                $routeParams.parentId;
            } else {
              ctrl.mixDataContent[`${$routeParams.parentName}Id`] =
                $routeParams.parentId;
            }
          } else {
            ctrl.mixDataContent[ctrl.fieldNames.parentId] =
              $routeParams.parentId;
            ctrl.mixDataContent[ctrl.fieldNames.parentDatabaseName] =
              $routeParams.parentName;
            ctrl.mixDataContent[ctrl.fieldNames.childDatabaseName] =
              ctrl.mixDatabaseName;
          }
        }
        // TODO: refactor db relationship
        // if ($routeParams.parentId && $routeParams.parentName) {
        //   var getAssociation = await associationService.getAssociation(
        //     $routeParams.parentName,
        //     ctrl.mixDatabaseName,
        //     $routeParams.parentId,
        //     ctrl.mixDataContent.id
        //   );
        //   if (getAssociation.success) {
        //     ctrl.association = getAssociation.data;
        //   } else {
        //     ctrl.association = {
        //       parentId: $routeParams.parentId,
        //       parentDatabaseName: $routeParams.parentName,
        //       childDatabaseName: ctrl.mixDatabaseName,
        //     };
        //   }
        //   var parentIdNameFieldName = `${$routeParams.parentName
        //     .charAt(0)
        //     .toLowerCase()}${
        //     $routeParams.parentName.slice(1) || $routeParams.parentName
        //   }Id`;
        //   if (!ctrl.mixDataContent[parentIdNameFieldName]) {
        //     ctrl.mixDataContent[parentIdNameFieldName] = $routeParams.parentId;
        //   }
        // }
      };

      ctrl.reload = async function () {
        ctrl.mixDataContent = angular.copy(ctrl.defaultData);
      };
      ctrl.loadSelected = function () {
        if (ctrl.selectedList.data.length) {
          ctrl.mixDataContent = ctrl.selectedList.data[0];
          ctrl.mixDataContent.mixDatabaseId = ctrl.mixDatabaseId;
          ctrl.mixDataContent.mixDatabaseName = ctrl.mixDatabaseName;
          if (ctrl.parentId) {
            ctrl.mixDataContent[ctrl.fieldNames.parentId] = ctrl.parentId;
          }
          if (ctrl.guidParentId) {
            ctrl.mixDataContent[ctrl.fieldNames.parentId] = ctrl.guidParentId;
          }
          ctrl.mixDataContent.parentType = ctrl.parentType;
        }
      };
      ctrl.submit = async function () {
        if (ctrl.validate()) {
          if (ctrl.onSave) {
            ctrl.onSave({ data: ctrl.mixDataContent });
          } else {
            ctrl.isBusy = true;
            service.initDbName(ctrl.mixDatabaseName);
            var saveResult = await service.save(ctrl.mixDataContent);
            if (saveResult.success) {
              ctrl.mixDataContent = saveResult.data;
              if (ctrl.association) {
                let result = await ctrl.saveAssociation(ctrl.mixDataContent);
                if (result.success) {
                  ctrl.isBusy = false;
                  $rootScope.showMessage("success");
                  $scope.$apply();
                } else {
                  ctrl.isBusy = false;
                  $rootScope.showErrors(result.errors);
                  $scope.$apply();
                }
              } else {
                if (ctrl.onSaveSuccess) {
                  ctrl.onSaveSuccess({ data: ctrl.mixDataContent });
                }
                ctrl.isBusy = false;
                $rootScope.showMessage("success");
                $scope.$apply();
              }
            } else {
              ctrl.isBusy = false;
              if (saveResult) {
                $rootScope.showErrors(saveResult.errors);
              }
              $scope.$apply();
            }
          }
        }
      };
      ctrl.saveAssociation = async function (data) {
        ctrl.association.childId = data.id;
        return await associationService.save(ctrl.association);
      };
      ctrl.validate = function () {
        var isValid = true;
        ctrl.errors = [];
        angular.forEach(ctrl.columns, function (column) {
          if (column.regex) {
            var regex = RegExp(column.regex, "g");
            isValid = regex.test(ctrl.mixDataContent.data[column.name]);
            if (!isValid) {
              ctrl.errors.push(`${column.name} is not match Regex`);
            }
          }
          if (!isValid) {
            $rootScope.showErrors(ctrl.errors);
          }
          if (isValid && column.isEncrypt) {
            ctrl.mixDataContent.data[column.name] = $rootScope.encrypt(
              ctrl.mixDataContent.data[column.name]
            );
          }
        });
        return isValid;
      };
      ctrl.showContentFilter = function ($event) {
        $rootScope.showContentFilter(ctrl.loadSelectedLink);
      };
      ctrl.loadSelectedLink = function (data, type) {
        if (data) {
          ctrl.mixDataContent.data.target_id = data.id;
          ctrl.mixDataContent.data.title = data.title;
          ctrl.mixDataContent.data.type = type;
          ctrl.mixDataContent.data.uri = data.detailUrl;
        }
      };
      ctrl.filterData = function (attributeName) {
        if (ctrl.mixDataContent) {
          var attr = $rootScope.findObjectByKey(
            ctrl.mixDataContent.data,
            "mixDatabaseColumnName",
            attributeName
          );
          if (!attr) {
            attr = angular.copy(
              $rootScope.findObjectByKey(
                ctrl.defaultData.data,
                "mixDatabaseColumnName",
                attributeName
              )
            );
            mixDatabaseColumn;
            ctrl.mixDataContent.data.push(attr);
          }
          return attr;
        }
      };
    },
  ],
});

modules.component("mixDatabaseNavData", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-nav-data/view.html",
  bindings: {
    nav: "=",
    parentId: "=",
    parentType: "=",
    onUpdate: "&?",
    onDelete: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "RestRelatedAttributeDataPortalService",
    "RestMixDatabaseDataPortalService",
    function ($rootScope, $scope, ngAppSettings, navService, dataService) {
      var ctrl = this;
      ctrl.data = null;
      ctrl.selected = null;
      ctrl.navRequest = angular.copy(ngAppSettings.request);
      ctrl.setRequest = angular.copy(ngAppSettings.request);
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = function () {
        navService
          .getDefault([ctrl.parentId, ctrl.parentType, "default"])
          .then((resp) => {
            ctrl.defaultData = resp.data;
            ctrl.defaultData.parentId = ctrl.parentId;
            ctrl.defaultData.parentType = ctrl.parentType;
            ctrl.selected = angular.copy(ctrl.defaultData);
            ctrl.loadData();
          });
        ctrl.navRequest.parentType = ctrl.parentType;
        ctrl.navRequest.parentId = ctrl.parentId;
      };
      ctrl.selectPane = function (pane) {};
      ctrl.loadData = function () {
        navService.getList(ctrl.navRequest).then((resp) => {
          if (resp) {
            ctrl.data = resp.data;
            $scope.$apply();
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
            $scope.$apply();
          }
        });
      };
      ctrl.updateData = function (nav) {
        ctrl.selected = nav;
        var e = $(".pane-form-" + ctrl.nav.data.id)[0];
        angular.element(e).triggerHandler("click");
        // $location.url('/admin/mix-database-data/details?dataContentId='+ item.id +'&mixDatabaseId=' + item.mixDatabaseId+'&parentType=' + item.parentType+'&parentId=' + item.parentId);
      };
      ctrl.saveData = function (data) {
        $rootScope.isBusy = true;
        ctrl.selected.data = data;
        dataService.save(data).then((resp) => {
          if (resp.success) {
            ctrl.selected.dataContentId = resp.data.id;
            ctrl.selected.mixDatabaseId = resp.data.mixDatabaseId;
            ctrl.selected.mixDatabaseName = resp.data.mixDatabaseName;
            ctrl.selected.attributeData = resp.data;
            navService.save(ctrl.selected).then((resp) => {
              if (resp.success) {
                var tmp = $rootScope.findObjectByKey(
                  ctrl.data,
                  ["parentId", "parentType", "id"],
                  [resp.data.parentId, resp.data.parentType, resp.data.id]
                );
                if (!tmp) {
                  ctrl.data.items.push(resp.data);
                  var e = $(".pane-data-" + ctrl.nav.data.id)[0];
                  angular.element(e).triggerHandler("click");
                }
                ctrl.selected = angular.copy(ctrl.defautData);
                $rootScope.isBusy = false;
                $scope.$apply();
              } else {
                $rootScope.showMessage(resp.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
              }
            });
          } else {
            $rootScope.showErrors(resp.errors);
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        });
      };
      ctrl.removeData = async function (nav) {
        $rootScope.showConfirm(
          ctrl,
          "removeDataConfirmed",
          [nav],
          null,
          "Remove",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };
      ctrl.removeDataConfirmed = async function (nav) {
        $rootScope.isBusy = true;
        var result = await navService.delete([nav.id]);
        if (result.success) {
          $rootScope.removeObjectByKey(ctrl.data, "id", nav.id);
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.data[0].priority;
      };
      ctrl.updateOrders = function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.data.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.data.splice(ctrl.dragStartIndex + 1, 1);
        }
        var arrNavs = [];
        angular.forEach(ctrl.data, function (e, i) {
          e.priority = ctrl.minPriority + i;
          var keys = {
            parentId: e.parentId,
            parentType: e.parentType,
            id: e.id,
          };
          var properties = {
            priority: e.priority,
          };
          arrNavs.push({
            keys: keys,
            properties: properties,
          });
        });
        navService.saveProperties("portal", arrNavs).then((resp) => {
          $rootScope.isBusy = false;
          $scope.$apply();
        });
      };
    },
  ],
});

modules.component("mixDatabaseNavValues", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-nav-values/view.html",
  bindings: {
    mixDatabaseId: "=",
    mixDatabaseName: "=",
    guidParentId: "=",
    parentType: "=",
    columns: "=?",
    header: "=",
    data: "=?",
    maxCol: "=?",
    createUrl: "=?",
    updateUrl: "=?",
    onUpdate: "&?",
    onDelete: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "RestRelatedAttributeDataPortalService",
    "RestMixDatabaseColumnPortalService",
    function ($rootScope, $scope, ngAppSettings, navService, columnService) {
      var ctrl = this;
      ctrl.selectedProp = null;
      ctrl.request = angular.copy(ngAppSettings.restRequest);
      ctrl.request.orderBy = "Priority";
      ctrl.request.query = "{}";

      ctrl.request.direction = 0;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = async function () {
        ctrl.maxCol = ctrl.maxCol || 3;
        if (!ctrl.createUrl) {
          ctrl.createUrl = "/admin/mix-database-data/create";
        }
        if (!ctrl.updateUrl) {
          ctrl.updateUrl = "/admin/mix-database-data/details";
        }
        if (!ctrl.columns) {
          var getFields = await columnService.initData(
            ctrl.mixDatabaseName || ctrl.mixDatabaseId
          );
          if (getFields.success) {
            ctrl.columns = getFields.data;
            $scope.$apply();
          }
        }
        if (!ctrl.data) {
          ctrl.loadData();
        }
      };

      ctrl.update = function (data) {
        ctrl.onUpdate({ data: data });
      };

      ctrl.delete = function (data) {
        ctrl.onDelete({ data: data });
      };

      ctrl.filterData = function (item, attributeName) {
        return $rootScope.findObjectByKey(
          item.data,
          "attributeName",
          attributeName
        );
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.data.items[0].priority;
      };
      ctrl.updateOrders = function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.data.items.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.data.items.splice(ctrl.dragStartIndex + 1, 1);
        }
        angular.forEach(ctrl.data.items, function (e, i) {
          e.priority = ctrl.minPriority + i;
          navService.saveFields(e.id, { priority: e.priority }).then((resp) => {
            $rootScope.isBusy = false;
            $scope.$apply();
          });
        });
      };

      ctrl.loadData = function () {
        ctrl.request.mixDatabaseId = ctrl.mixDatabaseId || 0;
        ctrl.request.mixDatabaseName = ctrl.mixDatabaseName || null;
        ctrl.request.guidParentId = ctrl.guidParentId;
        ctrl.request.intParentId = ctrl.intParentId;
        ctrl.request.parentType = ctrl.parentType;
        navService.getList(ctrl.request).then((resp) => {
          if (resp) {
            ctrl.data = resp.data;
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            if (resp) {
              $rootScope.showErrors("Failed");
            }
            ctrl.refData = [];
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        });
      };
      ctrl.updateData = function (nav) {
        $rootScope.goToPath(
          `${ctrl.updateUrl}?dataContentId=${nav.childDataContent.id}&mixDatabaseId=${nav.mixDatabaseId}&guidParentId=${ctrl.guidParentId}&parentType=${ctrl.parentType}`
        );
        // ctrl.refDataModel = nav;
        // var e = $(".pane-form-" + ctrl.mixDatabaseDataValue.column.referenceId)[0];
        // angular.element(e).triggerHandler('click');
        // $location.url('/admin/mix-database-data/details?dataContentId='+ item.id +'&mixDatabaseId=' + item.mixDatabaseId+'&parentType=' + item.parentType+'&parentId=' + item.parentId);
      };
      ctrl.saveData = function (data) {
        $rootScope.isBusy = true;
        ctrl.refDataModel.data = data;
        dataService.save("portal", data).then((resp) => {
          if (resp.success) {
            ctrl.refDataModel.id = resp.data.id;
            ctrl.refDataModel.data = resp.data;
            navService.save("portal", ctrl.refDataModel).then((resp) => {
              if (resp.success) {
                var tmp = $rootScope.findObjectByKey(
                  ctrl.refData,
                  ["parentId", "parentType", "id"],
                  [resp.data.parentId, resp.data.parentType, resp.data.id]
                );
                if (!tmp) {
                  ctrl.refData.push(resp.data);
                }
                ctrl.refDataModel = angular.copy(ctrl.defaultDataModel);
                var e = $(
                  ".pane-data-" + ctrl.mixDatabaseDataValue.column.referenceId
                )[0];
                angular.element(e).triggerHandler("click");
                $rootScope.isBusy = false;
                $scope.$apply();
              } else {
                $rootScope.showMessage("failed");
                $rootScope.isBusy = false;
                $scope.$apply();
              }
            });
          } else {
            $rootScope.showMessage("failed");
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        });
      };
      ctrl.removeData = async function (nav) {
        $rootScope.showConfirm(
          ctrl,
          "removeDataConfirmed",
          [nav],
          null,
          "Remove",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };
      ctrl.removeDataConfirmed = async function (nav) {
        $rootScope.isBusy = true;
        var result = await navService.delete([nav.id]);
        if (result.success) {
          $rootScope.removeObjectByKey(ctrl.data.items, "id", nav.id);
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showMessage("failed");
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.view = function (item) {
        var obj = {
          columns: ctrl.columns,
          item: item,
        };
        $rootScope.preview("mix-database-data", obj, null, "modal-lg");
      };
    },
  ],
});

modules.component("mixDatabaseNavs", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-navs/view.html",
  bindings: {
    parentId: "=",
    parentType: "=",
    mixDatabaseNavs: "=?",
    onUpdate: "&?",
    onDelete: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "RestRelatedMixDatabasePortalService",
    "RestMixDatabasePortalService",
    function ($rootScope, $scope, ngAppSettings, navService, setService) {
      var ctrl = this;
      ctrl.mixDatabaseNavs = ctrl.mixDatabaseNavs || [];
      ctrl.selected = {};
      ctrl.defaultData = null;
      ctrl.navRequest = angular.copy(ngAppSettings.request);
      ctrl.setRequest = angular.copy(ngAppSettings.request);

      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = function () {
        // ctrl.setRequest.type = ctrl.parentType;
        navService.getDefault().then((resp) => {
          resp.parentId = ctrl.parentId;
          resp.parentType = ctrl.parentType;
          ctrl.defaultData = resp;
          ctrl.loadData();
        });
      };
      ctrl.goToPath = $rootScope.goToPath;
      ctrl.selectPane = function (pane) {};
      ctrl.loadData = async function () {
        // Load attr set navs if not in input
        if (!ctrl.mixDatabaseNavs) {
          ctrl.navRequest.parentType = ctrl.parentType;
          ctrl.navRequest.parentId = ctrl.parentId;
          var resp = await navService.getList(ctrl.navRequest);
          if (resp) {
            angular.forEach(resp.data.items, (e) => {
              e.isActived = true;
              ctrl.mixDatabaseNavs.push(e);
            });
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
          }
        } else {
          angular.forEach(ctrl.mixDatabaseNavs, (e) => {
            e.isActived = true;
          });
        }

        var setResult = await setService.getList(ctrl.setRequest);
        if (setResult) {
          angular.forEach(setResult.data.items, (element) => {
            var e = $rootScope.findObjectByKey(
              ctrl.mixDatabaseNavs,
              "mixDatabaseId",
              element.id
            );
            if (!e) {
              e = angular.copy(ctrl.defaultData);
              e.status = "Published";
              e.mixDatabaseId = element.id;
              e.specificulture = navService.lang;
              e.data = element;
              e.isActived = false;
              ctrl.mixDatabaseNavs.push(e);
            }
          });
        } else {
          if (setResult) {
            $rootScope.showErrors("Others Failed");
          }
        }
        $scope.$apply();
      };
      ctrl.change = async function (nav) {
        $rootScope.isBusy = true;
        var result;
        if (nav.isActived) {
          ctrl.active(nav);
        } else {
          ctrl.deactive(nav);
        }
      };

      ctrl.deactive = async function (nav) {
        let result = null;
        if (nav.id) {
          result = await navService.delete([nav.id]);
          $(".pane-container-" + nav.data.id)
            .parent()
            .remove();
        }
        if (result && result.success) {
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showMessage("failed");
          $rootScope.isBusy = false;
        }
      };

      ctrl.active = async function (nav) {
        $rootScope.isBusy = true;
        var result;
        result = await navService.save(nav);
        if (result && result.success) {
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showMessage("failed");
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.update = function (data) {
        ctrl.onUpdate({
          data: data,
        });
      };

      ctrl.delete = function (data) {
        ctrl.onDelete({
          data: data,
        });
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.mixDatabaseNavs[0].priority;
      };
      ctrl.updateOrders = function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.mixDatabaseNavs.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.mixDatabaseNavs.splice(ctrl.dragStartIndex + 1, 1);
        }
        var arrNavs = [];
        angular.forEach(ctrl.mixDatabaseNavs, function (e, i) {
          e.priority = ctrl.minPriority + i;
          var keys = {
            parentId: e.parentId,
            parentType: e.parentType,
            id: e.id,
          };
          var properties = {
            priority: e.priority,
          };
          arrNavs.push({
            keys: keys,
            properties: properties,
          });
        });
        navService.saveProperties("portal", arrNavs).then((resp) => {
          $rootScope.isBusy = false;
          $scope.$apply();
        });
      };
    },
  ],
});

modules.component("mixDatabaseNestedDataValues", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-nested-data-values/view.html",
  bindings: {
    database: "=?",
    fieldNames: "=?",
    mixDatabaseName: "=?",
    mixDatabaseTitle: "=?",
    mixDatabaseId: "=?",
    relationship: "=?",
    parentName: "=?",
    parentId: "=?",
    guidParentId: "=?",
    header: "=?",
    data: "=?",
    canDrag: "=?",
    queries: "=?",
    filterType: "=?",
    compareType: "=?",
    selectedList: "=?",
    selectSingle: "=?",
    database: "=?",
    onFilterList: "&?",
    onApplyList: "&?",
    onSendMail: "&?",
    onUpdate: "&?",
    onDuplicate: "&?",
    onDelete: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "$routeParams",
    "ngAppSettings",
    "RestMixDatabasePortalService",
    "MixDbService",
    function (
      $rootScope,
      $scope,
      $location,
      $routeParams,
      ngAppSettings,
      databaseService,
      dataService
    ) {
      var ctrl = this;
      ctrl.intShowColumn = 3;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.actions = ["Delete", "SendMail"];
      ctrl.filterTypes = ["contain", "equal"];
      ctrl.compareTypes = ["or", "and"];
      ctrl.selectedProp = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = async function () {
        dataService.initDbName(ctrl.mixDatabaseName);
        ctrl.request.name = ctrl.mixDatabaseName;
        ctrl.request.orderBy = ctrl.fieldNames.createdDateTime;
        ctrl.request.parentName = ctrl.parentName;
        ctrl.request.parentId = ctrl.parentId;
        ctrl.request.relationship = ctrl.relationship;
        ctrl.request.guidParentId = ctrl.guidParentId;
        if (!ctrl.selectedList) {
          ctrl.selectedList = {
            action: "Delete",
            data: [],
          };
        }
        if (!ctrl.database) {
          var getDatabase = await databaseService.getByName(
            ctrl.mixDatabaseName
          );
          if (getDatabase.success) {
            ctrl.database = getDatabase.data;
            $scope.$apply();
          }
        }
        if (!ctrl.data) {
          await ctrl.loadData();
        }
        ctrl.createUrl = `/admin/mix-database-data/create?mixDatabaseId=${
          ctrl.database.id
        }&mixDatabaseName=${ctrl.database.systemName}&mixDatabaseTitle=${
          ctrl.database.displayName
        }&dataContentId=default&relationship=${
          ctrl.relationship || ""
        }&parentId=${ctrl.parentId || ctrl.guidParentId || ""}&parentName=${
          ctrl.parentName || ""
        }`;
        $scope.$apply();
      };
      ctrl.toCamelCase = (txt) => {
        return txt.charAt(0).toLowerCase() + txt.substr(1);
      };
      ctrl.loadData = async function () {
        dataService.initDbName(ctrl.mixDatabaseName);
        ctrl.request.queries = [];
        if (ctrl.queries) {
          Object.keys(ctrl.queries).forEach((e) => {
            if (ctrl.queries[e]) {
              ctrl.request.queries.push({
                fieldName: e,
                value: ctrl.queries[e],
              });
            }
          });
        }
        var getData = await dataService.filterNestedData(ctrl.request);
        ctrl.data = getData.data;
        if (ctrl.request.relationship == "ManyToMany") {
          ctrl.selectedIds = ctrl.data.items.map((m) => ({
            id: m.id,
            dataId: m.data.id,
          }));
        }
        $scope.$apply();
      };
      ctrl.select = function (item) {
        if (item.isSelected) {
          if (ctrl.selectSingle == "true") {
            ctrl.selectedList.data.items = [];
            ctrl.selectedList.data.items.push(item);
          } else {
            var current = $rootScope.findObjectByKey(
              ctrl.selectedList,
              "id",
              item.id
            );
            if (!current) {
              ctrl.selectedList.data.items.push(item);
            }
          }
        } else {
          $rootScope.removeObject(ctrl.selectedList, item.id);
        }
      };
      ctrl.selectAll = function (isSelected) {
        ctrl.selectedList.data.items = [];
        angular.forEach(ctrl.data.items, function (e) {
          e.isSelected = isSelected;
          if (isSelected) {
            ctrl.selectedList.data.items.push(e.id);
          }
        });
      };
      ctrl.filter = function () {
        ctrl.data.items = [];
        ctrl.loadData();
      };
      ctrl.sendMail = async function (data) {
        ctrl.onSendMail({ data: data });
      };
      ctrl.apply = async function () {
        ctrl.onApplyList();
      };

      ctrl.duplicate = function (data) {
        ctrl.onDuplicate({ data: data });
      };

      ctrl.update = function (item) {
        let url = `/admin/mix-database-data/details?dataContentId=${
          item.data.id
        }&mixDatabaseName=${ctrl.mixDatabaseName}&mixDatabaseTitle=${
          ctrl.mixDatabaseTitle
        }&guidParentId=${ctrl.guidParentId || ""}&parentId=${
          ctrl.parentId || ""
        }&parentName=${ctrl.parentName || ""}`;
        $location.url(url);
      };

      ctrl.delete = function (data) {
        $rootScope.showConfirm(
          ctrl,
          "removeConfirmed",
          [data.id],
          null,
          "Remove",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };

      ctrl.removeConfirmed = async function (dataContentId) {
        $rootScope.isBusy = true;
        dataService.initDbName(ctrl.mixDatabaseName);
        var result = await dataService.delete([dataContentId]);
        if (result.success) {
          if (ctrl.onDelete) {
            ctrl.onDelete({ data: dataContentId });
          }
          await ctrl.loadData();
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.filterData = function (item, attributeName) {
        return $rootScope.findObjectByKey(
          item.data.items,
          "attributeName",
          attributeName
        );
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.data.items[0].priority;
      };
      ctrl.updateOrders = function (index, items) {
        if (index > ctrl.dragStartIndex) {
          ctrl.data.items.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.data.items.splice(ctrl.dragStartIndex + 1, 1);
        }
        ctrl.updateDataInfos();
      };
      ctrl.updateDataInfos = async function () {
        angular.forEach(ctrl.data.items, async function (e, i) {
          e.priority = ctrl.minPriority + i;
          var resp = await dataService.saveFields(e.id, {
            priority: e.priority,
          });
          if (resp && resp.success) {
            $scope.activedPage = resp.data;
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
          }
        });
      };

      ctrl.view = function (item) {
        var obj = {
          columns: ctrl.database.columns,
          item: item,
        };
        $rootScope.preview("mix-database-data", obj, null, "modal-lg");
      };
    },
  ],
});

modules.component("mixDatabaseOneToMany", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-database-one-to-many/view.html",
  bindings: {
    database: "=?",
    fieldNames: "=?",
    mixDatabaseName: "=?",
    mixDatabaseTitle: "=?",
    mixDatabaseId: "=?",
    relationship: "=?",
    parentName: "=?",
    parentId: "=?",
    guidParentId: "=?",
    header: "=?",
    data: "=?",
    canDrag: "=?",
    queries: "=?",
    filterType: "=?",
    compareType: "=?",
    selectedList: "=?",
    selectSingle: "=?",
    database: "=?",
    onFilterList: "&?",
    onApplyList: "&?",
    onSendMail: "&?",
    onUpdate: "&?",
    onDuplicate: "&?",
    onDelete: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "$routeParams",
    "ngAppSettings",
    "RestMixDatabasePortalService",
    "MixDbService",
    function (
      $rootScope,
      $scope,
      $location,
      $routeParams,
      ngAppSettings,
      databaseService,
      dataService
    ) {
      var ctrl = this;
      ctrl.intShowColumn = 3;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.actions = ["Delete", "SendMail"];
      ctrl.filterTypes = ["contain", "equal"];
      ctrl.compareTypes = ["or", "and"];
      ctrl.selectedProp = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.$onInit = async function () {
        dataService.initDbName(ctrl.mixDatabaseName);
        ctrl.request.name = ctrl.mixDatabaseName;
        ctrl.request.orderBy = ctrl.fieldNames.createdDateTime;
        ctrl.request.parentName = ctrl.parentName;
        ctrl.request.parentId = ctrl.parentId;
        ctrl.request.relationship = ctrl.relationship;
        ctrl.request.guidParentId = ctrl.guidParentId;
        if (!ctrl.selectedList) {
          ctrl.selectedList = {
            action: "Delete",
            data: [],
          };
        }
        if (!ctrl.database) {
          var getDatabase = await databaseService.getByName(
            ctrl.mixDatabaseName
          );
          if (getDatabase.success) {
            ctrl.database = getDatabase.data;
            $scope.$apply();
          }
        }
        if (!ctrl.data) {
          await ctrl.loadData();
        }
        ctrl.createUrl = `/admin/mix-database-data/create?mixDatabaseId=${
          ctrl.database.id
        }&mixDatabaseName=${ctrl.database.systemName}&mixDatabaseTitle=${
          ctrl.database.displayName
        }&dataContentId=default&relationship=${
          ctrl.relationship || ""
        }&parentId=${ctrl.parentId || ctrl.guidParentId || ""}&parentName=${
          ctrl.parentName || ""
        }`;
        $scope.$apply();
      };
      ctrl.toCamelCase = (txt) => {
        return txt.charAt(0).toLowerCase() + txt.substr(1);
      };
      ctrl.loadData = async function () {
        dataService.initDbName(ctrl.mixDatabaseName);
        ctrl.request.queries = [];
        if (ctrl.queries) {
          Object.keys(ctrl.queries).forEach((e) => {
            if (ctrl.queries[e]) {
              ctrl.request.queries.push({
                fieldName: e,
                value: ctrl.queries[e],
              });
            }
          });
        }
        var getData = await dataService.filterNestedData(ctrl.request);
        ctrl.data = getData.data;
        if (ctrl.request.relationship == "ManyToMany") {
          ctrl.selectedIds = ctrl.data.items.map((m) => ({
            id: m.id,
            dataId: m.data.id,
          }));
        }
        $scope.$apply();
      };
      ctrl.select = function (item) {
        if (item.isSelected) {
          if (ctrl.selectSingle == "true") {
            ctrl.selectedList.data.items = [];
            ctrl.selectedList.data.items.push(item);
          } else {
            var current = $rootScope.findObjectByKey(
              ctrl.selectedList,
              "id",
              item.id
            );
            if (!current) {
              ctrl.selectedList.data.items.push(item);
            }
          }
        } else {
          $rootScope.removeObject(ctrl.selectedList, item.id);
        }
      };
      ctrl.selectAll = function (isSelected) {
        ctrl.selectedList.data.items = [];
        angular.forEach(ctrl.data.items, function (e) {
          e.isSelected = isSelected;
          if (isSelected) {
            ctrl.selectedList.data.items.push(e.id);
          }
        });
      };
      ctrl.filter = function () {
        ctrl.data.items = [];
        ctrl.loadData();
      };
      ctrl.sendMail = async function (data) {
        ctrl.onSendMail({ data: data });
      };
      ctrl.apply = async function () {
        ctrl.onApplyList();
      };

      ctrl.duplicate = function (data) {
        ctrl.onDuplicate({ data: data });
      };

      ctrl.update = function (item) {
        let url = `/admin/mix-database-data/details?dataContentId=${
          item.data.id
        }&mixDatabaseName=${ctrl.mixDatabaseName}&mixDatabaseTitle=${
          ctrl.mixDatabaseTitle
        }&guidParentId=${ctrl.guidParentId || ""}&parentId=${
          ctrl.parentId || ""
        }&parentName=${ctrl.parentName || ""}`;
        $location.url(url);
      };

      ctrl.delete = function (data) {
        $rootScope.showConfirm(
          ctrl,
          "removeConfirmed",
          [data.id],
          null,
          "Remove",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };

      ctrl.removeConfirmed = async function (dataContentId) {
        $rootScope.isBusy = true;
        var result = await dataService.delete([dataContentId]);
        if (result.success) {
          if (ctrl.onDelete) {
            ctrl.onDelete({ data: dataContentId });
          }
          await ctrl.loadData();
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      ctrl.filterData = function (item, attributeName) {
        return $rootScope.findObjectByKey(
          item.data.items,
          "attributeName",
          attributeName
        );
      };

      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.data.items[0].priority;
      };
      ctrl.updateOrders = function (index, items) {
        if (index > ctrl.dragStartIndex) {
          ctrl.data.items.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.data.items.splice(ctrl.dragStartIndex + 1, 1);
        }
        ctrl.updateDataInfos();
      };
      ctrl.updateDataInfos = async function () {
        angular.forEach(ctrl.data.items, async function (e, i) {
          e.priority = ctrl.minPriority + i;
          var resp = await dataService.saveFields(e.id, {
            priority: e.priority,
          });
          if (resp && resp.success) {
            $scope.activedPage = resp.data;
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
          }
        });
      };

      ctrl.view = function (item) {
        var obj = {
          columns: ctrl.database.columns,
          item: item,
        };
        $rootScope.preview("mix-database-data", obj, null, "modal-lg");
      };
    },
  ],
});

modules.component("mixFileExtract", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-file-extract/view.html",
  bindings: {
    folder: "=?",
    accept: "=?",
    onFail: "&?",
    onSuccess: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "FileServices",
    function ($rootScope, $scope, ngAppSettings, fileService) {
      var ctrl = this;
      ctrl.mediaFile = {};
      ctrl.isAdmin = $rootScope.isAdmin;
      ctrl.mediaNavs = [];
      ctrl.$onInit = function () {
        ctrl.id = Math.floor(Math.random() * 100);
      };
      ctrl.selectFile = function (files) {
        if (files !== undefined && files !== null && files.length > 0) {
          const file = files[0];
          ctrl.file = file;
          ctrl.mediaFile.folder = ctrl.folder ? ctrl.folder : "Media";
          ctrl.mediaFile.title = ctrl.title ? ctrl.title : "";
          ctrl.mediaFile.description = ctrl.description ? ctrl.description : "";
          ctrl.mediaFile.file = file;
          if (ctrl.auto == "true") {
            ctrl.uploadFile(file);
          } else {
            ctrl.getBase64(file);
          }
        }
      };

      ctrl.getBase64 = function (file) {
        if (file !== null) {
          $rootScope.isBusy = true;
          var reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = function () {
            if (ctrl.mediaFile) {
              ctrl.mediaFile.fileName = file.name.substring(
                0,
                file.name.lastIndexOf(".")
              );
              ctrl.mediaFile.extension = file.name.substring(
                file.name.lastIndexOf(".")
              );
              ctrl.mediaFile.fileStream = reader.result;
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          };
          reader.onerror = function (error) {
            $rootScope.isBusy = false;
            $rootScope.showErrors([error]);
          };
        } else {
          return null;
        }
      };

      ctrl.uploadFile = async function () {
        if (ctrl.file) {
          $rootScope.isBusy = true;
          var response = await fileService.extractFile(ctrl.file, ctrl.folder);
          if (response) {
            if (ctrl.onSuccess) {
              ctrl.onSuccess();
            }
            $rootScope.showMessage("success", "success");
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            $rootScope.showErrors(["Cannot upload file"]);
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        } else {
          $rootScope.showErrors(["Please choose file"]);
        }
      };
    },
  ],
});

"use strict";
app.controller("MixNavigationController", [
  "$scope",
  "$rootScope",
  "ngAppSettings",
  "$routeParams",
  "MediaService",
  "ApiService",
  "CommonService",
  function (
    $scope,
    $rootScope,
    ngAppSettings,
    $routeParams,
    service,
    apiService,
    commonService
  ) {
    BaseCtrl.call(
      this,
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      service
    );

    $scope.viewmodel = {
      title: "",
      description: "",
      status: "Published",
      mediaFile: {
        file: null,
        fullPath: "",
        folderName: "Media",
        fileFolder: "",
        fileName: "",
        extension: "",
        content: "",
        fileStream: "",
      },
    };
    $scope.relatedMedias = [];
    $scope.uploadMedia = async function () {
      $rootScope.isBusy = true;
      var resp = await service.uploadMedia($scope.mediaFile);
      if (resp && resp.success) {
        $scope.activedMedia = resp.data;
        $scope.getList();
        $scope.$apply();
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.selectFile = function (file, errFiles) {
      if (file !== undefined && file !== null) {
        $scope.mediaFile.folder = "Media";
        $scope.mediaFile.file = file;
        $scope.getBase64(file);
      }
    };
    $scope.getBase64 = function (file) {
      if (file !== null && $scope.postedFile) {
        $rootScope.isBusy = true;
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = function () {
          var index = reader.result.indexOf(",") + 1;
          var base64 = reader.result.substring(index);
          $scope.activedMedia.mediaFile.fileName = $rootScope.generateKeyword(
            file.name.substring(0, file.name.lastIndexOf(".")),
            "-"
          );
          $scope.activedMedia.mediaFile.extension = file.name.substring(
            file.name.lastIndexOf(".")
          );
          $scope.activedMedia.mediaFile.fileStream = reader.result;
          $rootScope.isBusy = false;
          $scope.$apply();
        };
        reader.onerror = function (error) {
          $rootScope.showErrors([error]);
          $rootScope.isBusy = false;
        };
      } else {
        return null;
      }
    };
    $scope.togglePreview = function (item) {
      item.isPreview = item.isPreview === undefined ? true : !item.isPreview;
    };
    $scope.clone = async function (id) {
      $rootScope.isBusy = true;
      var resp = await service.cloneMedia(id);
      if (resp && resp.success) {
        $scope.activedMedia = resp.data;
        $rootScope.showMessage("Update successfully!", "success");
        $rootScope.isBusy = false;
        $scope.$apply();
        //$location.path('/admin/media/details/' + resp.data.id);
      } else {
        if (resp) {
          $rootScope.showErrors(resp.errors);
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      }
    };
    $scope.saveSuccessCallback = function () {
      $scope.getList();
    };
    $scope.removeCallback = function () {
      $scope.getList();
    };
  },
]);

modules.component("mixFileUpload", {
  templateUrl: "/mix-app/views/app-portal/components/mix-file-upload/view.html",
  bindings: {
    folder: "=?",
    accept: "=?",
    onFail: "&?",
    onSuccess: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "FileServices",
    function ($rootScope, $scope, ngAppSettings, fileService) {
      var ctrl = this;
      ctrl.mediaFile = {};
      ctrl.isAdmin = $rootScope.isAdmin;
      ctrl.mediaNavs = [];
      ctrl.$onInit = function () {
        ctrl.id = Math.floor(Math.random() * 100);
      };
      ctrl.selectFile = function (files) {
        if (files !== undefined && files !== null && files.length > 0) {
          const file = files[0];
          ctrl.file = file;
          ctrl.mediaFile.folder = ctrl.folder ? ctrl.folder : "Media";
          ctrl.mediaFile.title = ctrl.title ? ctrl.title : "";
          ctrl.mediaFile.description = ctrl.description ? ctrl.description : "";
          ctrl.mediaFile.file = file;
          if (ctrl.auto == "true") {
            ctrl.uploadFile(file);
          } else {
            ctrl.getBase64(file);
          }
        }
      };

      ctrl.getBase64 = function (file) {
        if (file !== null) {
          $rootScope.isBusy = true;
          var reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = function () {
            if (ctrl.mediaFile) {
              ctrl.mediaFile.fileName = file.name.substring(
                0,
                file.name.lastIndexOf(".")
              );
              ctrl.mediaFile.extension = file.name.substring(
                file.name.lastIndexOf(".")
              );
              ctrl.mediaFile.fileStream = reader.result;
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          };
          reader.onerror = function (error) {
            $rootScope.isBusy = false;
            $rootScope.showErrors([error]);
          };
        } else {
          return null;
        }
      };

      ctrl.uploadFile = async function () {
        if (ctrl.file) {
          $rootScope.isBusy = true;
          var response = await fileService.uploadFile(ctrl.file, ctrl.folder);
          if (response) {
            if (ctrl.onSuccess) {
              ctrl.onSuccess();
            }
            $rootScope.showMessage("success", "success");
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            $rootScope.showErrors(['Cannot upload file']);
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        } else {
          $rootScope.showErrors(["Please choose file"]);
        }
      };
    },
  ],
});

modules.component("mixSelectIcons", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-select-icons/mix-select-icons.html",
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "$element",
    function ($rootScope, $scope, $location, $element) {
      var ctrl = this;
      ctrl.limitTo = 20;
      ctrl.container = $element[0].querySelector(".list-icon");
      ctrl.translate = function (keyword) {
        return $rootScope.translate(keyword);
      };
      ctrl.showMore = () => {
        if (
          ctrl.container.scrollTop >= ctrl.container.scrollHeight - 200 &&
          ctrl.limitTo < ctrl.options.length
        ) {
          ctrl.limitTo *= 2;
        }
      };
      ctrl.select = function (ico) {
        ctrl.data = ico.class;
      };
    },
  ],
  bindings: {
    data: "=",
    prefix: "=",
    options: "=",
  },
});

modules.component("mixTemplateEditor", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-template-editor/view.html",
  bindings: {
    template: "=",
    folderType: "=",
    isReadonly: "=?",
    lineCount: "=?",
    hideJs: "=?",
    hideCss: "=?",
  },
  controller: [
    "$scope",
    "$rootScope",
    "$routeParams",
    "ngAppSettings",
    "AppSettingsService",
    "TemplateService",
    function (
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      appSettingsService,
      service
    ) {
      BaseCtrl.call(
        this,
        $scope,
        $rootScope,
        $routeParams,
        ngAppSettings,
        service
      );
      var ctrl = this;
      ctrl.isNull = false;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.selectPane = function (pane) {
        ctrl.activedPane = pane;
      };
      ctrl.selectTemplate = function (template) {
        ctrl.template = template;
        $scope.$broadcast("updateContentCodeEditors", []);
      };
      ctrl.new = function () {
        ctrl.template.id = 0;
      };
      ctrl.init = async function () {
        if (ctrl.folderType) {
          var themeId = $rootScope.mixConfigurations.data.ThemeId;
          ctrl.request.key = ctrl.folderType;
          var resp = await service.getList(ctrl.request, [themeId]);

          if (resp && resp.success) {
            ctrl.templates = resp.data.items;
            if (!ctrl.template) {
              ctrl.template = ctrl.templates[0];
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
              $rootScope.isBusy = false;
              $scope.$apply();
            }
          }
        }
      };
      ctrl.updateTemplateContent = function (content) {
        ctrl.template.content = content;
      };
      ctrl.updateStyleContent = function (content) {
        ctrl.template.scripts = content;
      };
      ctrl.updateScriptContent = function (content) {
        ctrl.template.styles = content;
      };
    },
  ],
});

modules.component("mixValueEditor", {
  templateUrl:
    "/mix-app/views/app-portal/components/mix-value-editor/view.html",
  bindings: {
    title: "=?",
    isSelect: "=?",
    stringValue: "=",
    type: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "$location",
    "RestMixDatabaseDataPortalService",
    function ($rootScope, $scope, ngAppSettings, $location, dataService) {
      var ctrl = this;
      ctrl.icons = ngAppSettings.icons;
      ctrl.refData = [];
      ctrl.refRequest = angular.copy(ngAppSettings.request);
      ctrl.refRequest.pageSize = 100;
      ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
      ctrl.previousId = null;
      ctrl.initData = async function () {
        setTimeout(() => {
          switch (ctrl.type) {
            case "datetime":
            case "date":
            case "time":
              if (ctrl.stringValue) {
                ctrl.dateObj = new Date(ctrl.stringValue);
                $scope.$apply();
              }
              break;
            case "boolean":
              if (ctrl.stringValue) {
                ctrl.booleanValue = ctrl.stringValue == "true";
              }
              break;

            case "reference": // reference
              if (ctrl.referenceId) {
                ctrl.refRequest.mixDatabaseId = ctrl.referenceId;
                ctrl.refRequest.parentType = ctrl.parentType;
                ctrl.refRequest.parentId = ctrl.parentId;

                dataService.getList(ctrl.refRequest).then((resp) => {
                  if (resp) {
                    ctrl.refData = resp;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                  } else {
                    if (resp) {
                      $rootScope.showErrors(resp.errors);
                    }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                  }
                });
              }
              break;
            default:
              if (ctrl.isEncrypt && ctrl.encryptValue) {
                var encryptedData = {
                  key: ctrl.encryptKey,
                  data: ctrl.encryptValue,
                };
                ctrl.stringValue = $rootScope.decrypt(encryptedData);
              }
              break;
          }
        }, 200);
      };
      ctrl.updateStringValue = async function (dataType) {
        switch (dataType) {
          case "datetime":
          case "date":
          case "time":
            if (ctrl.dateObj != null) {
              ctrl.stringValue = ctrl.dateObj.toISOString();
            } else {
              ctrl.stringValue = null;
            }
            break;
          case "double":
            // ctrl.stringValue = ctrl.doubleValue;
            break;
          case "boolean":
            // ctrl.stringValue = ctrl.booleanValue;
            break;

          default:
            ctrl.stringValue = ctrl.doubleValue;
            break;
        }
      };
      ctrl.updateRefData = function (item) {
        $location.url(
          "/admin/mix-database-data/details?dataContentId=" +
            item.id +
            "&mixDatabaseId=" +
            item.mixDatabaseId +
            "&parentType=" +
            item.parentType +
            "&parentId=" +
            item.parentId
        );
      };
      ctrl.removeRefData = async function (data) {
        $rootScope.showConfirm(
          ctrl,
          "removeRefDataConfirmed",
          [data.id],
          null,
          "Remove",
          "Deleted data will not able to recover, are you sure you want to delete this item?"
        );
      };
      ctrl.removeRefDataConfirmed = async function (dataContentId) {
        $rootScope.isBusy = true;
        var result = await dataService.delete(dataContentId);
        if (result.success) {
          $rootScope.removeObjectByKey(ctrl.refData, "id", dataContentId);
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(result.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
});

modules.component("modalBookmark", {
  templateUrl:
    "/mix-app/views/app-portal/components/modal-bookmark/modal-bookmark.html",
  controller: [
    "$rootScope",
    "$scope",
    "localStorageService",
    "$routeParams",
    "$location",
    function (
      $rootScope,
      $scope,
      localStorageService,
      $routeParams,
      $location
    ) {
      var ctrl = this;
      ctrl.searchText = "";
      ctrl.defaultModel = {
        url: "",
        title: "",
      };
      ctrl.bookmarks = [];
      ctrl.model = null;
      ctrl.$onInit = function () {
        ctrl.model = angular.copy(ctrl.defaultModel);
        ctrl.getCurrentUrl();
        ctrl.bookmarks = localStorageService.get("bookmarks") || [];
      };
      ctrl.goToPath = function (url) {
        $rootScope.goToPath(url);
        $("#dlg-bookmark").modal("hide");
      };
      ctrl.getCurrentUrl = function (url) {
        url = url || $location.url();
        ctrl.model.url = url;
        ctrl.model.title = url;
      };
      ctrl.removeBookmark = function (url) {
        $rootScope.removeObjectByKey(ctrl.bookmarks, "url", url);
        localStorageService.set("bookmarks", ctrl.bookmarks);
      };
      ctrl.addBookmark = function () {
        var current = $rootScope.findObjectByKey(
          ctrl.bookmarks,
          "url",
          ctrl.model.url
        );
        if (current) {
          current.title = ctrl.model.title;
        } else {
          ctrl.bookmarks.push(ctrl.model);
        }
        localStorageService.set("bookmarks", ctrl.bookmarks);
        ctrl.model = angular.copy(ctrl.defaultModel);
      };
    },
  ],
});

modules.component("modalContentFilter", {
  templateUrl:
    "/mix-app/views/app-portal/components/modal-content-filter/modal-content-filter.html",
  bindings: {
    query: "=",
    initData: "=?",
    selected: "=",
    callback: "&?",
    save: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "PostRestService",
    "PageRestService",
    "ModuleRestService",
    function (
      $rootScope,
      $scope,
      ngAppSettings,
      postService,
      pageService,
      moduleService
    ) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.types = ["Page", "Post", "Module"];
      ctrl.moduleContentId = null;
      ctrl.type = "Page";
      ctrl.navs = [];
      ctrl.data = {
        items: [],
      };
      // ctrl.goToPath = $rootScope.goToPath;
      ctrl.$onInit = function () {
        $("#modal-content-filter").on("shown.bs.modal", function () {
          if (ctrl.initData) {
            ctrl.data = ctrl.initData;
          } else {
            if (!ctrl.data.items.length) {
              ctrl.loadData();
            }
          }
        });
      };
      ctrl.closeDialog = function () {
        $("#modal-content-filter").modal("hide");
      };
      ctrl.loadData = async function (pageIndex) {
        ctrl.request.query = ctrl.query + ctrl.srcId;
        ctrl.navs = [];
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }

        switch (ctrl.type) {
          case "Page":
            ctrl.loadPages();
            break;
          case "Post":
            ctrl.loadPosts();
            break;
          case "Module":
            ctrl.loadModules();
            break;
        }
      };
      ctrl.edit = function (nav) {
        switch (ctrl.type) {
          case "Page":
            ctrl.goToPath(`/admin/page/details/${nav.id}`);
            break;
          case "Post":
            ctrl.goToPath(`/admin/post/details/${nav.id}`);
            break;
          case "Module":
            ctrl.goToPath(`/admin/module/details/${nav.id}`);
            break;
        }
      };
      ctrl.loadModules = async function () {
        $rootScope.isBusy = true;
        var response = await moduleService.getList(ctrl.request);
        if (response.success) {
          ctrl.data = response.data;
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.loadPosts = async function () {
        $rootScope.isBusy = true;
        var response = await postService.getList(ctrl.request);
        if (response.success) {
          ctrl.data = response.data;
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.loadPages = async function () {
        $rootScope.isBusy = true;
        var response = await pageService.getList(ctrl.request);
        if (response.success) {
          ctrl.data = response.data;
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.select = function (nav) {
        var current = $rootScope.findObjectByKey(ctrl.data.items, "id", nav.id);
        if (!nav.isActive && ctrl.callback) {
          ctrl.callback({
            nav: nav,
            type: ctrl.type,
          });
        }
        if (ctrl.isMultiple) {
          current.isActive = !current.isActive;
        } else {
          if (!nav.isActive) {
            angular.forEach(ctrl.data.items, (element) => {
              element.isActive = false;
            });
          }
          current.isActive = !nav.isActive;
        }
      };
      ctrl.saveSelected = function () {
        ctrl.selected = $rootScope.filterArray(
          ctrl.data,
          ["isActived"],
          [true]
        );
        setTimeout(() => {
          ctrl.save().then(() => {
            ctrl.loadPosts();
          });
        }, 500);
      };
      ctrl.limString = function (str, max) {
        if (str) {
          return str.length > max ? str.substring(0, max) + " ..." : str;
        }
      };
    },
  ],
});

modules.component("modalHelper", {
  templateUrl:
    "/mix-app/views/app-portal/components/modal-helper/modal-helper.html",
  bindings: {
    url: "=?",
    title: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "localStorageService",
    "$routeParams",
    "$location",
    "$sce",
    function (
      $rootScope,
      $scope,
      localStorageService,
      $routeParams,
      $location,
      $sce
    ) {
      var ctrl = this;
      ctrl.$onInit = function () {
        $("#dev-helper-modal").on("shown.bs.modal", function () {
          if ($rootScope.helperUrl) {
            ctrl.trustedUrl = $sce.trustAsResourceUrl($rootScope.helperUrl);
            ctrl.title = "Developer Document";
          } else {
            ctrl.loadHelperUrl();
            ctrl.title = "Developer Document";
          }
          $rootScope.helperUrl = null;
          $scope.$apply();
        });
      };
      ctrl.loadHelperUrl = function () {
        var portalUrl = $location.url();
        // var portalabsUrl = $location.absUrl();
        var defaultUrl = "//docs.mixcore.org";
        ctrl.trustedUrl = $sce.trustAsResourceUrl(defaultUrl);

        if (portalUrl.startsWith("/admin")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-administration-screens"
          );
        }
        if (
          portalUrl.startsWith("/admin/mix-database-data/list?mixDatabaseId=2")
        ) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-navigation"
          );
        }
        if (portalUrl.startsWith("/admin/post")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-writing-posts"
          );
        }
        if (portalUrl.startsWith("/admin/page")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-page"
          );
        }
        if (portalUrl.startsWith("/admin/module")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-module"
          );
        }
        if (portalUrl.startsWith("/admin/mix-database")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-database"
          );
        }
        if (
          portalUrl.startsWith("/admin/mix-database-data/list?mixDatabaseId=7")
        ) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-category"
          );
        }
        if (
          portalUrl.startsWith("/admin/mix-database-data/list?mixDatabaseId=8")
        ) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-tag"
          );
        }
        if (portalUrl.startsWith("/admin/media")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-media"
          );
        }
        if (portalUrl.startsWith("/admin/file")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-file"
          );
        }
        if (portalUrl.startsWith("/admin/user")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-user"
          );
        }
        if (portalUrl.startsWith("/admin/theme")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-theme"
          );
        }
        if (portalUrl.startsWith("/admin/app-settings")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-app-settings"
          );
        }
        if (portalUrl.startsWith("/admin/configuration")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-configuration"
          );
        }
        if (portalUrl.startsWith("/admin/my-profile")) {
          ctrl.trustedUrl = $sce.trustAsResourceUrl(
            defaultUrl + "/basic-usage-users-profile"
          );
        }

        // switch (portalUrl) {
        //   case '/admin':
        //   default:
        //     ctrl.trustedUrl = $sce.trustAsResourceUrl(defaultUrl);
        //     break;
        // }
      };
    },
  ],
});

modules.component("modalNavMetas", {
  templateUrl: "/mix-app/views/app-portal/components/modal-nav-metas/view.html",
  bindings: {
    header: "=",
    mixDatabaseId: "=?",
    mixDatabaseName: "=?",
    intParentId: "=?",
    guidParentId: "=?",
    parentType: "=?",
    type: "=?",
    columnDisplay: "=?",
    isOpen: "=?",
    selectedList: "=?",
    selectCallback: "&?",
    save: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$routeParams",
    "ngAppSettings",
    "RestMixDatabaseDataPortalService",
    "RestRelatedAttributeDataPortalService",
    "RestMixDatabasePortalService",
    function (
      $rootScope,
      $scope,
      $routeParams,
      ngAppSettings,
      dataService,
      navService,
      databaseService
    ) {
      var ctrl = this;

      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.request.key = "readData";
      ctrl.navs = [];

      ctrl.queries = {};
      ctrl.data = { items: [] };
      ctrl.selectedValues = [];

      ctrl.$onInit = async function () {
        await ctrl.loadDefaultModel();
        await ctrl.loadDefaultData();
        await ctrl.loadSelected();
        ctrl.loadData();
        ctrl.filterData();
      };

      ctrl.loadSelected = async function () {
        ctrl.navRequest = angular.copy(ngAppSettings.request);
        ctrl.navRequest.mixDatabaseId = ctrl.mixDatabaseId;
        ctrl.navRequest.mixDatabaseName = ctrl.mixDatabaseName;
        ctrl.navRequest.intParentId = ctrl.intParentId;
        ctrl.navRequest.guidParentId = ctrl.guidParentId;
        var getSelected = await navService.getList(ctrl.navRequest);
        if (getSelected.success) {
          ctrl.selectedList = getSelected.data;
          ctrl.selectedValues = ctrl.selectedList.items.map(
            (m) => m.dataContentId
          );
          $scope.$apply();
        }
      };
      ctrl.loadDefaultModel = async function () {
        ctrl.request.isGroup = true;

        if (ctrl.mixDatabaseId) {
          ctrl.request.mixDatabaseId = ctrl.mixDatabaseId;
        }
        if (ctrl.mixDatabaseName) {
          ctrl.request.mixDatabaseName = ctrl.mixDatabaseName;
        }
        if ($routeParams.intParentId) {
          ctrl.intParentId = $routeParams.intParentId;
        }
        if ($routeParams.parentType) {
          ctrl.parentType = $routeParams.parentType;
        }
        ctrl.defaultNav = {
          id: null,
          specificulture: navService.lang,
          dataContentId: null,
          intParentId: ctrl.intParentId,
          parentType: ctrl.parentType,
          mixDatabaseId: ctrl.mixDatabaseId,
          mixDatabaseName: ctrl.mixDatabaseName,
          status: "Published",
          childDataContent: null,
        };
        if (!ctrl.columns) {
          var getMixDatbase = ctrl.mixDatabaseId
            ? await databaseService.getSingle([ctrl.mixDatabaseId])
            : await databaseService.getByName([ctrl.mixDatabaseName]);
          if (getMixDatbase.success) {
            ctrl.columns = getMixDatbase.data.columns;
            ctrl.mixDatabaseId = getMixDatbase.data.id;
            ctrl.mixDatabaseName = getMixDatbase.data.systemName;
            ctrl.defaultNav.mixDatabaseId = getMixDatbase.data.id;
            ctrl.defaultNav.mixDatabaseName = getMixDatbase.data.systemName;
            $scope.$apply();
          }
        }
      };
      ctrl.loadDefaultData = async function () {
        var getDefault = await dataService.initData(
          ctrl.mixDatabaseName || ctrl.mixDatabaseId
        );
        ctrl.defaultData = getDefault.data;
        if (ctrl.defaultData) {
          ctrl.defaultData.mixDatabaseId = ctrl.mixDatabaseId || 0;
          ctrl.defaultData.mixDatabaseName = ctrl.mixDatabaseName;
        }
        if (!ctrl.mixDatabaseData) {
          ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
        }
        if (!ctrl.mixDatabaseId) {
          ctrl.mixDatabaseId = ctrl.defaultData.mixDatabaseId;
        }
        if (!ctrl.mixDatabaseName) {
          ctrl.mixDatabaseName = ctrl.defaultData.mixDatabaseName;
        }
      };
      ctrl.isSelected = function (value, level) {
        let item = $rootScope.findObjectByKey(
          ctrl.selectedList.items,
          "dataContentId",
          value
        );
        if (item) {
          item.level = level;
        }
        return ctrl.selectedValues.indexOf(value) >= 0;
      };
      ctrl.reload = async function () {
        ctrl.newTitle = "";
        ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
      };
      ctrl.loadData = async function (pageIndex) {
        ctrl.request.query = "{}";
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        if (ctrl.mixDatabaseId) {
          ctrl.request.mixDatabaseId = ctrl.mixDatabaseId;
        }
        if (ctrl.mixDatabaseName) {
          ctrl.request.mixDatabaseName = ctrl.mixDatabaseName;
        }
        if (ctrl.type) {
          ctrl.request.type = ctrl.type;
        }
        Object.keys(ctrl.queries).forEach((e) => {
          if (ctrl.queries[e]) {
            ctrl.request[e] = ctrl.queries[e];
          }
        });
        ctrl.request.key = "data";
        var response = await dataService.getList(ctrl.request);
        if (response.success) {
          ctrl.data = response.data;
          ctrl.filterData();
          ctrl.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          ctrl.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.filterData = function () {
        angular.forEach(ctrl.data.items, function (e) {
          // Not show data if there's in selected list
          e.disabled = ctrl.selectedValues.indexOf(e.id) >= 0;
        });
        angular.forEach(ctrl.selectedList.items, function (e) {
          var subIds = [];
          e.isActived = e.isActived === undefined ? true : e.isActived;
          if (e.childDataContent && e.childDataContent.data.childItems) {
            angular.forEach(e.childDataContent.data.childItems, function (sub) {
              sub.isActived = ctrl.selectedValues.indexOf(e.id) >= 0;
            });
            subIds = e.childDataContent.data.childItems.map((m) => m.id);
          } else if (e.childItems) {
            subIds = e.childItems.map((m) => m.id);
          }
          var subData = ctrl.selectedList.items.filter(
            (m) => subIds.indexOf(m.dataContentId) >= 0
          );
          angular.forEach(subData, function (s) {
            s.disabled = true;
          });
        });
      };
      ctrl.select = async function (dataContentId, isSelected, level) {
        let idx = ctrl.selectedValues.indexOf(dataContentId);
        var nav = ctrl.selectedList.items[idx];
        if (!nav) {
          ctrl.selectedValues.push(dataContentId);
          nav = angular.copy(ctrl.defaultNav);
          nav.dataContentId = dataContentId;
          nav.childDataContent = $rootScope.findObjectByKey(
            ctrl.data.items,
            "id",
            dataContentId
          );
          ctrl.selectedList.items.push(nav);
        }
        nav.level = level;
        if (isSelected) {
          nav.isActived = true;
          if (nav.intParentId) {
            var saveResult = await navService.save(nav);
            nav.id = saveResult.data.id;
            $rootScope.showMessage("success", "success");
            ctrl.filterData();
            $scope.$apply();
          }
        }

        if (!isSelected) {
          await ctrl.removeNav(idx);
          if (ctrl.selectCallback) {
            ctrl.selectCallback({ data: nav });
          }
          return;
        }
      };
      ctrl.removeNav = async function (idx) {
        var nav = ctrl.selectedList.items[idx];
        ctrl.selectedValues.splice(idx, 1);
        ctrl.selectedList.items.splice(idx, 1);
        ctrl.filterData();
        if (nav && nav.id) {
          await navService.delete([nav.id]);
          $rootScope.showMessage("success", "success");
          $scope.$apply();
        }
      };
      ctrl.disableNavitem = function (nav, isDisable) {
        nav.disabled = isDisable;
      };
      ctrl.createData = function () {
        if (ctrl.newTitle) {
          var tmp = $rootScope.findObjectByKey(
            ctrl.data.items,
            "title",
            ctrl.newTitle
          );
          if (!tmp) {
            ctrl.isBusy = true;
            ctrl.mixDatabaseData.intParentId = 0;
            ctrl.mixDatabaseData.parentType = "Set";
            ctrl.mixDatabaseData.data.title = ctrl.newTitle;
            ctrl.mixDatabaseData.data.slug = $rootScope.generateKeyword(
              ctrl.newTitle,
              "-"
            );
            ctrl.mixDatabaseData.data.type = ctrl.type;
            dataService.save(ctrl.mixDatabaseData).then((resp) => {
              if (resp.success) {
                ctrl.mixDatabaseData.id = resp.data;
                ctrl.data.items.push(ctrl.mixDatabaseData);
                ctrl.reload();
                ctrl.select(resp.data.id, true);
                ctrl.filterData();
                ctrl.isBusy = false;
                $scope.$apply();
              } else {
                $rootScope.showErrors(resp.errors);
                ctrl.isBusy = false;
                $scope.$apply();
              }
            });
          } else {
            tmp.isActived = true;
            ctrl.select(tmp);
          }
        }
      };
    },
  ],
});

app.component("modalCroppie", {
  templateUrl: "/mix-app/views/app-portal/components/modal-croppie/view.html",
  bidings: {
    resolve: "<",
    close: "&",
    dismiss: "&",
  },
  controller: function () {
    var $ctrl = this;
    $ctrl.fileUrl = "test";
    $ctrl.$onInit = function () {
      $ctrl.file = $ctrl.resolve.file;
    };

    $ctrl.ok = function () {
      $ctrl.close({ $value: $ctrl.fileUrl });
    };

    $ctrl.cancel = function () {
      $ctrl.dismiss({ $value: "cancel" });
    };
  },
});

modules.component("modalNavDatas", {
  templateUrl: "/mix-app/views/app-portal/components/modal-nav-datas/view.html",
  bindings: {
    fieldNames: "=",
    mixDatabaseId: "=?",
    relationship: "=?",
    mixDatabaseName: "=?",
    parentDatabaseName: "=?",
    guidParentId: "=?",
    parentId: "=?",
    parentType: "=?",
    type: "=?",
    columnDisplay: "=?",
    selectedIds: "=?",
    selectedList: "=?",
    selectCallback: "&?",
    save: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$location",
    "$routeParams",
    "ngAppSettings",
    "RestMixAssociationPortalService",
    "RestMixDatabasePortalService",
    "MixDbService",
    function (
      $rootScope,
      $scope,
      $location,
      $routeParams,
      ngAppSettings,
      associationService,
      databaseService,
      dataService
    ) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.navs = [];

      ctrl.queries = {};
      ctrl.data = { items: [] };
      ctrl.$onInit = async function () {
        ctrl.association = {
          parentId: ctrl.parentId,
          guidParentId: ctrl.guidParentId,
          parentDatabaseName: ctrl.parentDatabaseName,
          childDatabaseName: ctrl.mixDatabaseName,
        };
        dataService.initDbName(ctrl.mixDatabaseName);
        ctrl.request.orderBy = ctrl.fieldNames.createdDateTime;
        ctrl.request.name = ctrl.mixDatabaseName;
        ctrl.request.parentName = ctrl.parentName;
        ctrl.request.relationship = ctrl.relationship;
        // ctrl.request.parentId = ctrl.parentId;
        if (!ctrl.database) {
          var getDatabase = await databaseService.getByName(
            ctrl.mixDatabaseName
          );
          if (getDatabase.success) {
            ctrl.database = getDatabase.data;
            $scope.$apply();
          }
        }
        if (!ctrl.data) {
          await ctrl.loadData();
        }
      };
      ctrl.showDbModel = function () {
        $(`#modal-nav-data-${ctrl.mixDatabaseName}`).modal("show");
      };
      ctrl.select = async (item) => {
        $rootScope.isBusy = true;
        if (item.isSelected && (ctrl.parentId || ctrl.guidParentId)) {
          ctrl.association.childId = item.id;
          let result = await dataService.createRelationship(ctrl.association);
          if (result.success) {
            item.associationId = result.data.id;
          }
          $rootScope.handleResponse(result);
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          var nav = ctrl.selectedIds.find((m) => m.dataId == item.id);
          let result = await dataService.deleteRelationship(nav.id);
          $rootScope.handleResponse(result);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
        if (ctrl.selectCallback) {
          ctrl.selectCallback();
        }
      };

      ctrl.filter = function () {
        ctrl.data = [];
        ctrl.loadData();
      };
      ctrl.loadData = async function (pageIndex) {
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        dataService.initDbName(ctrl.mixDatabaseName);
        ctrl.request.queries = [];
        if (ctrl.queries) {
          Object.keys(ctrl.queries).forEach((e) => {
            if (ctrl.queries[e]) {
              ctrl.request.queries.push({
                fieldName: e,
                value: ctrl.queries[e],
                compareOperator: "Like",
              });
            }
          });
        }
        var getData = await dataService.filter(ctrl.request);
        ctrl.data = getData.data;
        angular.forEach(ctrl.data.items, (e) => {
          if (ctrl.selectedIds.find((n) => n.dataId == e.id)) {
            e.isSelected = true;
          }
        });
        $scope.$apply();
      };
      ctrl.update = function (data) {
        let url = `/admin/mix-database-data/details?dataContentId=${
          data.id
        }&mixDatabaseName=${ctrl.mixDatabaseName}&mixDatabaseTitle=${
          ctrl.mixDatabaseTitle
        }&parentId=${ctrl.parentId || ""}&parentName=${
          ctrl.parentName || ""
        }&guidParentId=${ctrl.guidParentId || ""}`;
        $location.url(url);
      };
    },
  ],
});

modules.component("modalNavPages", {
  templateUrl: "/mix-app/views/app-portal/components/modal-nav-pages/view.html",
  bindings: {
    srcField: "=",
    srcId: "=",
    query: "=",
    selected: "=",
    save: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "PageRestService",
    function ($rootScope, $scope, ngAppSettings, pageService) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.navs = [];
      ctrl.data = { items: [] };
      ctrl.loadData = async function (pageIndex) {
        ctrl.request.query = ctrl.query + ctrl.srcId;
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        var response = await pageService.getList(ctrl.request);
        if (response.success) {
          ctrl.data = response.data;
          ctrl.navs = [];
          angular.forEach(response.data.items, function (e) {
            var item = {
              priority: e.priority,
              description: e.title,
              pageId: e.id,
              image: e.thumbnailUrl,
              specificulture: e.specificulture,
              status: "Published",
              isActived: false,
            };
            item[ctrl.srcField] = ctrl.srcId;
            ctrl.navs.push(item);
          });
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.saveSelected = function () {
        ctrl.selected = $rootScope.filterArray(
          ctrl.navs,
          ["isActived"],
          [true]
        );
        setTimeout(() => {
          ctrl.save().then(() => {
            ctrl.loadPages();
          });
        }, 500);
      };
    },
  ],
});

modules.component("modalNavPosts", {
  templateUrl:
    "/mix-app/views/app-portal/components/modal-nav-posts/modal-nav-posts.html",
  bindings: {
    srcColumn: "=",
    srcId: "=",
    query: "=",
    selected: "=",
    save: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$routeParams",
    "ngAppSettings",
    "PostRestService",
    function ($rootScope, $scope, $routeParams, ngAppSettings, postService) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.navs = [];
      ctrl.associations = [];
      ctrl.data = { items: [] };
      ctrl.loadPosts = async function (pageIndex) {
        // ctrl.request.query = ctrl.query + ctrl.srcId;
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        if ($routeParams.type) {
          ctrl.request.postType = $routeParams.type;
        } else {
          ctrl.request.postType = "";
        }
        var response = await postService.getList(ctrl.request);
        if (response.success) {
          ctrl.data = response.data;
          //   ctrl.navs = [];
          //   angular.forEach(response.data.items, function (e) {
          //     var item = {
          //       priority: e.priority,
          //       description: e.title,
          //       postId: e.id,
          //       image: e.thumbnailUrl,
          //       specificulture: e.specificulture,
          //       post: e,
          //       status: "Published",
          //       isActived: false,
          //     };
          //     item[ctrl.srcColumn] = ctrl.srcId;
          //     ctrl.navs.push(item);
          //   });
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showErrors(response.errors);
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
      ctrl.select = async (associations) => {
        ctrl.associations = associations;
      };
      ctrl.saveSelected = function () {
        ctrl.selected = $rootScope.filterArray(
          ctrl.navs,
          ["isActived"],
          [true]
        );
        setTimeout(() => {
          ctrl.save().then(() => {
            ctrl.loadPosts();
          });
        }, 500);
      };
    },
  ],
});

modules.component("modalNavs", {
  templateUrl: "/mix-app/views/app-portal/components/modal-navs/view.html",
  bindings: {
    modelName: "=",
    viewType: "=",
    selects: "=",
    isSingle: "=?",
    isGlobal: "=?",
    save: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$routeParams",
    "ngAppSettings",
    function ($rootScope, $scope, $routeParams, ngAppSettings) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.contentStatuses = angular.copy(ngAppSettings.contentStatuses);
      ctrl.viewmodel = null;
      ctrl.data = null;
      ctrl.isInit = false;
      ctrl.isValid = true;
      ctrl.errors = [];
      ctrl.selected = [];

      ctrl.init = function () {
        ctrl.service = $rootScope.getRestService(ctrl.modelName, ctrl.isGlobal);
        ctrl.prefix = "modal_navs_" + ctrl.modelName;
        ctrl.cols = ctrl.selects.split(",");
        ctrl.getList();
      };

      ctrl.getList = async function (pageIndex) {
        if (pageIndex !== undefined) {
          ctrl.request.pageIndex = pageIndex;
        }
        if (ctrl.request.fromDate !== null) {
          var d = new Date(ctrl.request.fromDate);
          ctrl.request.fromDate = d.toISOString();
        }
        if (ctrl.request.toDate !== null) {
          var d = new Date(ctrl.request.toDate);
          ctrl.request.toDate = d.toISOString();
        }
        var resp = await ctrl.service.getList(ctrl.request);
        if (resp.success) {
          ctrl.data = resp.data;
          $.each(ctrl.data.items, function (i, data) {
            $.each(ctrl.viewmodels, function (i, e) {
              if (e.dataContentId === data.id) {
                data.isHidden = true;
              }
            });
          });
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };

      // ctrl.loadData = async function (pageIndex) {
      //     ctrl.request.query = ctrl.query + ctrl.srcId;
      //     if (pageIndex !== undefined) {
      //         ctrl.request.pageIndex = pageIndex;
      //     }
      //     if (ctrl.request.fromDate !== null) {
      //         var d = new Date(ctrl.request.fromDate);
      //         ctrl.request.fromDate = d.toISOString();
      //     }
      //     if (ctrl.request.toDate !== null) {
      //         var d = new Date(ctrl.request.toDate);
      //         ctrl.request.toDate = d.toISOString();
      //     }
      //     var response = await pageService.getList(ctrl.request);
      //     if (response.success) {
      //         ctrl.data = response.data;
      //         ctrl.navs = [];
      //         angular.forEach(response.data.items, function (e) {
      //             var item = {
      //                 priority: e.priority,
      //                 description: e.title,
      //                 pageId: e.id,
      //                 image: e.thumbnailUrl,
      //                 specificulture: e.specificulture,
      //                 status: 'Published',
      //                 isActived: false
      //             };
      //             item[ctrl.srcField] = ctrl.srcId;
      //             ctrl.navs.push(item);
      //         });
      //         $rootScope.isBusy = false;
      //         $scope.$apply();
      //     }
      //     else {
      //         $rootScope.showErrors(response.errors);
      //         $rootScope.isBusy = false;
      //         $scope.$apply();
      //     }
      // }
      ctrl.selectAll = function (isSelectAll) {
        angular.forEach(ctrl.data.items, (element) => {
          element.isActived = isSelectAll;
        });
      };
      ctrl.selectChange = function (item) {
        if (ctrl.isSingle == "true" && item.isActived) {
          angular.forEach(ctrl.data.items, (element) => {
            element.isActived = false;
          });
          item.isActived = true;
        }
      };
      ctrl.saveSelected = function () {
        ctrl.selected = $rootScope.filterArray(
          ctrl.data.items,
          ["isActived"],
          [true]
        );
        if (ctrl.save) {
          ctrl.save({ selected: ctrl.selected });
        }
      };
    },
  ],
});

modules.component("modalPermission", {
  templateUrl:
    "/mix-app/views/app-portal/components/modal-permission/modal-permission.html",
  controller: "PermissionController",
  bindings: {
    message: "=",
  },
});

modules.component("modalTemplate", {
  templateUrl: "/mix-app/views/app-portal/components/modal-template/view.html",
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "TemplateService",
    function ($rootScope, $scope, ngAppSettings, service) {
      var ctrl = this;
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.$onInit = function () {
        ctrl.modal = $("#modal-template");
        ctrl.request.status = null;
        ctrl.request.pageSize = 10;
        ctrl.modal.on("shown.bs.modal", function () {
          ctrl.search();
        });
      };
      ctrl.search = async function (pageIndex) {
        if (ctrl.request.keyword.indexOf("/") > 0) {
          let params = ctrl.request.keyword.split("/");
          ctrl.request.folderType = params[0];
          ctrl.request.keyword = params[1];
        }
        ctrl.request.pageIndex = pageIndex || ctrl.request.pageIndex;
        $rootScope.isBusy = true;
        var resp = await service.getList(ctrl.request);
        if (resp && resp.success) {
          ctrl.data = resp.data;
        }
        $rootScope.isBusy = false;
        $scope.$apply();
      };
      ctrl.edit = function (item) {
        let path = `/admin/template/details/${item.folderType}/${item.id}`;
        ctrl.modal.modal("hide");
        $rootScope.goToPath(path);
      };
    },
  ],
});

modules.component("monacoEditor", {
  templateUrl: "/mix-app/views/app-portal/components/monaco-editor/view.html",
  bindings: {
    editor: "=?",
    content: "=",
    defaultContent: "=?",
    contentId: "=",
    isVisible: "=",
    isReadonly: "=?",
    lineCount: "=?",
    ext: "=",
    updateContent: "&",
  },
  controller: [
    "$rootScope",
    "$scope",
    "$element",
    function ($rootScope, $scope, $element) {
      var ctrl = this;
      ctrl.previousId = null;
      ctrl.minHeight = 400;
      ctrl.isFull = false;
      ctrl.id = Math.floor(Math.random() * 100) + 1;
      ctrl.$onInit = function () {
        setTimeout(() => {
          if (!ctrl.content) {
            ctrl.content = "\r\n";
          }
        }, 100);
      };
      ctrl.$onChanges = function (changes) {
        if (changes.content) {
          ctrl.updateContent(changes.content);
        }
        if (changes.isVisible || changes.isReadonly) {
          ctrl.updateEditors();
        }
      };

      ctrl.showHelper = function (url) {
        $rootScope.showHelper(url);
      };

      this.$doCheck = function () {
        if (ctrl.previousId != null && ctrl.previousId !== ctrl.contentId) {
          ctrl.previousId = ctrl.contentId;
          ctrl.updateContent(ctrl.content);
        }
        if (ctrl.isReadonly !== ctrl._readonly && ctrl.editor) {
          ctrl._readonly = ctrl.isReadonly;
          ctrl.editor.updateOptions({ readOnly: ctrl._readonly });
        }
        if (ctrl.isVisible && ctrl.editor) {
          setTimeout(() => {
            var h = ctrl.lineCount
              ? ctrl.lineCount
              : ctrl.editor.getModel().getLineCount() * 18;
            $($element).height(h);
            ctrl.editor.layout();
          }, 100);
        }
      }.bind(this);

      ctrl.initEditor = function () {
        // ctrl.lineCount = parseInt(ctrl.lineCount) || 100;
        setTimeout(() => {
          ctrl.previousId = ctrl.contentId;
          ctrl.updateEditors();
        }, 100);
      };

      ctrl.updateContent = function (content) {
        ctrl.editor.setValue(content);
        // lineCount = ctrl.editor.getModel().getLineCount();

        // var h = ctrl.editor.getModel().getLineCount() * 18;
        var h = ctrl.lineCount * 18;
        $($element).height(h);
        ctrl.editor.layout();
      };
      ctrl.updateEditors = function () {
        $.each($($element).find(".code-editor"), function (i, e) {
          if (e) {
            var model = {
              value: ctrl.content || ctrl.defaultContent,
              readOnly: ctrl.isReadonly === "true" || ctrl.isReadonly,

              lineNumbers: "on",
              roundedSelection: false,
              scrollBeyondLastLine: false,
              contextmenu: false,
              // theme: "vs-dark",
              formatOnType: true,
              formatOnPaste: true,
              // wordWrap: "on",
              automaticLayout: true, // the important part
            };
            switch (ctrl.ext) {
              case ".json":
                // ctrl.content = JSON.stringify(ctrl.content);
                model.language = "json";
                break;
              case ".webmanifest":
                model.language = "json";
                break;
              case ".js":
                model.language = "javascript";
                break;
              case ".css":
                model.language = "css";
                break;
              case ".cshtml":
                model.language = "razor";
                break;
              case ".cs":
                model.language = "csharp";
                break;
              default:
                model.language = "razor";
                break;
            }
            ctrl.editor = monaco.editor.create(e, model);

            ctrl.editor.getModel().onDidChangeContent(() => {
              ctrl.content = ctrl.editor.getModel().getValue();
              ctrl.updateContent({ content: ctrl.content });
            });
            ctrl.editor.addCommand(
              monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S,
              function () {
                var btn = document.getElementById("btnToSubmit");
                btn.click();
              }
            );

            if (ctrl.isFull) {
              $(e).height(window.innerHeight);
            } else {
              $(e).height(ctrl.minHeight);
            }

            // setTimeout(() => {
            //   // var h = ctrl.editor.getModel().getLineCount() * 18;
            //   // h = h < ctrl.minHeight ? ctrl.minHeight : h;
            //   var h = ctrl.lineCount * 20;
            // $(e).height(h);
            // ctrl.editor.layout();
            // }, 200);
          }
        });
      };

      ctrl.fullscreen = function (event) {
        // const element = $(event.target).parents(".monaco-editor");

        // event.target.addEventListener('click', () => {
        //   if (screenfull.isEnabled) {
        //     screenfull.request(element);
        //   }
        // });
        // $.each($($element).find('.code-editor'), function (i, e) {
        //     //var container = $(this);
        //     if (e) {}
        // });
        // console.log($(event.target));

        $(event.target)
          .parents(".monaco-editor")
          .toggleClass("monaco-editor-full");

        ctrl.isFull = !ctrl.isFull;

        ctrl.editor.dispose();

        // var h;

        // ctrl.editor.dispose();
        // if ($(".monaco-editor.container-code-editor.monaco-editor-full")[0]) {
        //   // Do something if class exists
        //   h = window.innerHeight;
        //   $(
        //     ".monaco-editor.container-code-editor.monaco-editor-full .code-editor"
        //   ).height(h);
        //   document.body.style.overflow = "hidden";
        // } else {
        //   // Do something if class does not exist
        //   h = ctrl.lineCount * 20;
        //   $(".monaco-editor .code-editor").height(h);
        //   document.body.style.overflow = "visible";
        // }
        // ctrl.editor.layout();

        ctrl.updateEditors();
      };
    },
  ],
});

modules.component("navigators", {
  templateUrl:
    "/mix-app/views/app-portal/components/navigations/navigations.html",
  bindings: {
    modelName: "=",
    parentId: "=",
    associations: "=",
    titleField: "=?",

    prefix: "=",
    detailUrl: "=",
    data: "=",
    titleMaxLength: "=?",
    callback: "&?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "ngAppSettings",
    "$location",
    function ($rootScope, $scope, ngAppSettings, $location) {
      var ctrl = this;
      var service;
      ctrl.selected = null;
      ctrl.activedIndex = null;
      ctrl.$onInit = async () => {
        ctrl.titleField = ctrl.titleField || "title";
        service = $rootScope.getRestService(ctrl.modelName);
        ctrl.associationRequest = angular.copy(ngAppSettings.request);
        ctrl.associationRequest.orderBy = "Priority";
        ctrl.associationRequest.direction = "Asc";
        ctrl.associationRequest.parentId = ctrl.parentId;
        await ctrl.loadAssociations();
        ctrl.loadData();
      };
      ctrl.loadAssociations = async () => {
        var getAssociations = await service.getList(ctrl.associationRequest);
        ctrl.associations = getAssociations.data.items;
      };
      ctrl.loadData = async () => {
        var maxPriority = 0;
        if (ctrl.associations.length > 0) {
          maxPriority =
            ctrl.associations[ctrl.associations.length - 1].priority || 0;
        }
        angular.forEach(ctrl.data, function (e, i) {
          let nav = ctrl.associations.filter((m) => m.childId == e.id)[0];
          if (nav) {
            if (nav.priority == undefined) {
              nav.priority = maxPriority + 1;
              maxPriority++;
            }
            e.isActived = true;
            e.priority = nav.priority || 0;
          } else {
            e.isActived = false;
            e.priority = maxPriority + 1;
            maxPriority++;
          }
          e.isActived = nav != null;
        });
        ctrl.data = $rootScope.sortArray(ctrl.data, "priority");
      };
      ctrl.select = async (obj) => {
        if (obj.isActived) {
          ctrl.selectItem(obj);
        } else {
          ctrl.removeItem(obj);
        }
        if (ctrl.callback) {
          ctrl.callback({ associations: ctrl.associations });
          await ctrl.loadAssociations();
        }
      };
      ctrl.removeItem = async (obj) => {
        var nav = ctrl.associations.filter((m) => m.childId == obj.id)[0];
        $rootScope.removeObjectByKey(ctrl.associations, "childId", obj.id);
        if (nav && nav.id) {
          await service.delete([nav.id]);
          $rootScope.showMessage("saved", "success");
        }
      };
      ctrl.selectItem = async (obj) => {
        var nav = {
          parentId: ctrl.parentId,
          childId: obj.id,
          priority: obj.priority,
        };
        if (ctrl.parentId) {
          var result = await service.save(nav);
          nav.id = result.data.id;
          $rootScope.showMessage("saved", "success");
        }
        ctrl.associations.push(nav);
        if (ctrl.callback) {
          ctrl.callback({ selected: nav });
        }
      };
      ctrl.getTitle = (item) => {
        return item[ctrl.titleField];
      };
      ctrl.updateOrders = async function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.data.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.data.splice(ctrl.dragStartIndex + 1, 1);
        }
        angular.forEach(ctrl.data, function (e, i) {
          e.priority = ctrl.minPriority + i;
        });
        ctrl.saveOrder();
      };
      ctrl.saveOrder = async () => {
        angular.forEach(ctrl.data, function (e, i) {
          let nav = ctrl.associations.filter((m) => m.childId == e.id)[0];
          if (nav) {
            nav.priority = ctrl.data[i].priority;
          }
        });
        if (ctrl.parentId) {
          var result = await service.saveMany(ctrl.associations);
          if (result.success) {
            $rootScope.showMessage("saved", "success");
          }
        }
      };
      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
        ctrl.minPriority = ctrl.data[0].priority;
      };
      ctrl.goToDetails = async function (nav) {
        $location.url(ctrl.detailUrl + nav[ctrl.key]);
      };
    },
  ],
});

modules.component("portalThemeSettings", {
  templateUrl:
    "/mix-app/views/app-portal/components/portal-theme-settings/view.html",
  bindings: {
    showLink: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    "AppSettingsServices",
    function ($rootScope, $scope, appSettingsServices) {
      var ctrl = this;
      this.$onInit = function () {
        ctrl.portalThemeSettings =
          $rootScope.globalSettings.portalThemeSettings;
      };
      ctrl.applyThemeSettings = function () {
        $rootScope.globalSettings.portalThemeSettings =
          ctrl.portalThemeSettings;
      };
      ctrl.saveThemeSettings = async function () {
        var resp = await appSettingsServices.saveAppSettings(
          "PortalThemeSettings",
          ctrl.portalThemeSettings
        );
        if (resp && resp.success) {
          $rootScope.showMessage("success", "success");
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          if (resp) {
            $rootScope.showErrors(resp.errors);
          }
          $scope.$apply();
        }
      };
    },
  ],
});

modules.component("propertiesStructure", {
  templateUrl:
    "/mix-app/views/app-portal/components/properties-structure/view.html",
  controller: [
    "$rootScope",
    "$scope",
    function ($rootScope, $scope) {
      var ctrl = this;
      ctrl.selectedCol = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.defaultAttr = {
        displayName: "",
        systemName: "",
        defaultValue: null,
        priority: 0,
        dataType: "Text",
        columnConfigurations: {
          upload: {
            arrayAccepts: [],
            isCrop: false,
            width: null,
            height: null,
          },
        },
      };

      ctrl.addAttr = function () {
        if (ctrl.columns) {
          var t = angular.copy(ctrl.defaultAttr);
          ctrl.columns.push(t);
        }
      };

      ctrl.addOption = function (col, index) {
        var val = $("#option_" + index).val();
        col.options.push(val);
        $("#option_" + index).val("");
      };
      ctrl.generateForm = function () {
        var formHtml = document.createElement("module-form");
        formHtml.setAttribute("class", "row");
        angular.forEach(ctrl.viewmodel.columns, function (e, i) {
          var el;
          var label = document.createElement("label");
          label.setAttribute("class", "control-label");
          label.setAttribute("ng-bind", "{{data.title}}");

          switch (e.dataType) {
            case "datetime":
              el = document.createElement("input");
              el.setAttribute("type", "datetime-local");
              break;

            case "date":
              el = document.createElement("input");
              el.setAttribute("type", "date");
              break;

            case "time":
              el = document.createElement("input");
              el.setAttribute("type", "time");
              break;

            case "phonenumber":
              el = document.createElement("input");
              el.setAttribute("type", "tel");
              break;

            case "integer":
              el = document.createElement("input");
              el.setAttribute("type", "number");
              break;

            case "html":
              el = document.createElement("quill");
              el.setAttribute("options", "{}");
              el.setAttribute("type", "number");
              break;

            case "multilinetext":
              el = document.createElement("textarea");
              break;

            default:
              el = document.createElement("input");
              el.setAttribute("type", "text");
              formHtml.appendChild(el);
              break;
          }
          el.setAttribute("ng-model", "data.jItem[" + e.name + "].value");
          el.setAttribute("placeholder", "{{$ctrl.title}}");
          formHtml.appendChild(label);
          formHtml.appendChild(el);
        });
        ctrl.viewmodel.formView.content = formHtml.innerHTML;
      };

      ctrl.generateName = function (col) {
        col.systemName = $rootScope.generateKeyword(
          col.displayName,
          "",
          true,
          true
        );
      };
      ctrl.removeAttr = function (index) {
        if (ctrl.columns) {
          ctrl.columns.splice(index, 1);
        }
      };
      ctrl.dragStart = function (index) {
        ctrl.dragStartIndex = index;
      };
      ctrl.updateOrders = function (index) {
        if (index > ctrl.dragStartIndex) {
          ctrl.columns.splice(ctrl.dragStartIndex, 1);
        } else {
          ctrl.columns.splice(ctrl.dragStartIndex + 1, 1);
        }
        angular.forEach(ctrl.columns, function (e, i) {
          e.priority = i;
        });
      };
    },
  ],
  bindings: {
    header: "=",
    columns: "=",
  },
});

modules.component("propertiesValue", {
  templateUrl:
    "/mix-app/views/app-portal/components/properties-value/view.html",
  bindings: {
    title: "=",
    columns: "=",
    properties: "=",
  },
  controller: [
    "$rootScope",
    "$scope",
    function ($rootScope, $scope) {
      var ctrl = this;
      ctrl.defaultAttr = {
        title: "",
        name: "",
        default: null,
        options: [],
        priority: 0,
        dataType: 7,
        isGroupBy: false,
        isSelect: false,
        isDisplay: true,
        width: 3,
      };
      ctrl.selectedProp = null;
      ctrl.mixConfigurations = $rootScope.globalSettings;

      ctrl.$doCheck = function () {
        if (
          angular.toJson(ctrl.columns) != angular.toJson(ctrl.trackedColumns)
        ) {
          ctrl.trackedColumns = angular.copy(ctrl.columns);
          ctrl.trackedProperties = angular.copy(ctrl.properties);
          ctrl.loadEditors();
        }
      }.bind(ctrl);

      ctrl.loadEditors = function () {
        ctrl.properties = [];
        for (let i = 0; i < ctrl.columns.length; i++) {
          var col = ctrl.columns[i];
          var oldObj =
            $rootScope.findObjectByKey(
              ctrl.trackedProperties,
              "name",
              col.systemName
            ) || {};

          ctrl.properties.push({
            title: col.displayName,
            name: col.systemName,
            dataType: col.dataType,
            value: oldObj.value || col.defaultValue,
            options: col.options,
          });
        }
      };

      ctrl.addAttr = function () {
        if (ctrl.columns) {
          var t = angular.copy(ctrl.defaultAttr);
          ctrl.columns.push(t);
        }
      };
    },
  ],
});

modules.component("serviceHubPortal", {
  templateUrl:
    "/mix-app/views/app-portal/components/service-hub-portal/view.html",
  bindings: {
    mixDatabaseName: "=",
    isSave: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "RestMixDatabaseColumnPortalService",
    "RestMixDatabaseDataClientService",
    "UserServices",
    function ($rootScope, $scope, columnService, service, userServices) {
      var ctrl = this;
      var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
      BaseHub.call(this, ctrl, endpoints.Messenger);
      $scope.host = `${$rootScope.globalSettings.domain}/${ctrl.host}`;
      ctrl.mixConfigurations = $rootScope.globalSettings;
      ctrl.user = {
        loggedIn: false,
        connection: {},
      };
      ctrl.mixDatabaseData = null;
      ctrl.isHide = true;
      ctrl.hideContact = true;
      ctrl.columns = [];
      ctrl.members = [];
      ctrl.errors = [];
      ctrl.messages = {
        items: [],
      };
      ctrl.message = { connection: {}, content: "" };
      ctrl.request = {
        uid: "",
        specificulture: "",
        action: "",
        objectType: null,
        data: {},
        room: "",
        isMyself: true,
        isSave: false,
      };
      ctrl.init = function () {
        ctrl.mixDatabaseId = ctrl.mixDatabaseId || 0;
        ctrl.request.specificulture = service.lang;
        ctrl.request.room = ctrl.mixDatabaseName;
        ctrl.request.isSave = ctrl.isSave == "true" || false;
        ctrl.startConnection("serviceHub", ctrl.checkLoginStatus);
      };
      ctrl.loadData = async function () {
        /*
                    If input is data id => load ctrl.mixDatabaseData from service and handle it independently
                    Else modify input ctrl.mixDatabaseData
                */
        $rootScope.isBusy = true;
        var getDefault = await service.initData(ctrl.mixDatabaseName);
        if (getDefault.success) {
          ctrl.defaultData = getDefault.data;
          ctrl.defaultData.data.user_name = ctrl.user.connection.name;
          ctrl.defaultData.data.user_id = ctrl.user.connection.id;
          ctrl.defaultData.data.user_avatar = ctrl.user.connection.avatar;
          ctrl.defaultData.data.data_type = 9;
          ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
          $rootScope.isBusy = false;
        }
        var getFields = await columnService.initData(ctrl.mixDatabaseName);
        if (getFields.success) {
          ctrl.columns = getFields.data;
        }
      };
      ctrl.submit = async function () {
        if (ctrl.validate()) {
          ctrl.request.action = "send_group_message";
          ctrl.request.uid = ctrl.user.connection.id;
          ctrl.request.data = ctrl.mixDatabaseData.data;
          ctrl.request.connection = ctrl.user.connection;
          ctrl.connection.invoke("HandleRequest", JSON.stringify(ctrl.request));
          ctrl.mixDatabaseData = angular.copy(ctrl.defaultData);
        }
      };
      ctrl.validate = function () {
        var isValid = true;
        ctrl.errors = [];
        angular.forEach(ctrl.columns, function (column) {
          if (column.regex) {
            var regex = RegExp(column.regex, "g");
            isValid = regex.test(ctrl.mixDatabaseData.data[column.name]);
            if (!isValid) {
              ctrl.errors.push(`${column.name} is not match Regex`);
            }
          }
          if (isValid && column.isEncrypt) {
            ctrl.mixDatabaseData.data[column.name] = $rootScope.encrypt(
              ctrl.mixDatabaseData.data[column.name]
            );
          }
        });
        return isValid;
      };
      ctrl.receiveMessage = function (msg) {
        switch (msg.responseKey) {
          case "NewMember":
            ctrl.newMember(msg.data);
            // $('.widget-conversation').scrollTop = $('.widget-conversation')[0].scrollHeight;
            break;
          case "NewMessage":
            ctrl.newMessage(msg.data);
            break;
          case "ConnectSuccess":
            ctrl.user.loggedIn = true;
            ctrl.initListMember(msg.data);
            $scope.$apply();
            break;
          case "PreviousMessages":
            ctrl.messages = msg.data;
            $scope.$apply();
            break;
          case "MemberOffline":
            ctrl.removeMember(msg.data);
            break;
          case "Error":
            console.error(msg.data);
            break;
        }
      };
      ctrl.newMessage = function (msg) {
        ctrl.messages.items.push(msg);
        $scope.$apply();
      };
      ctrl.newMember = function (member) {
        var m = $rootScope.findObjectByKey(ctrl.members, "id", member.id);
        if (!m) {
          ctrl.members.push(member);
        }
        $scope.$apply();
      };
      ctrl.join = async function () {
        ctrl.request.action = "join_group";
        ctrl.request.uid = ctrl.user.connection.id;
        ctrl.request.data = ctrl.user.connection;
        ctrl.message.connection = ctrl.user.connection;
        ctrl.connection.invoke("HandleRequest", JSON.stringify(ctrl.request));
        await ctrl.loadData();
        $scope.$apply();
      };
      ctrl.initListMember = function (data) {
        data.forEach((member) => {
          var index = ctrl.members.findIndex((x) => x.id === member.id);
          if (index < 0) {
            ctrl.members.splice(0, 0, member);
          }
        });

        $scope.$apply();
      };

      ctrl.checkLoginStatus = async function () {
        var response = await userServices.getMyProfile();
        ctrl.user.connection.name = response.data.username;
        ctrl.user.connection.id = response.data.id;
        ctrl.user.connection.connectionId = ctrl.connection.connectionId;
        ctrl.user.connection.avatar = response.data.avatar;
        ctrl.user.loggedIn = true;
        ctrl.join();
      };
    },
  ],
});

modules.component("templateEditor", {
  templateUrl:
    "/mix-app/views/app-portal/components/template-editor/templateEditor.html",
  bindings: {
    templateId: "=",
    folderType: "=",
    defaultTemplate: "=?",
    isReadonly: "=?",
    lineCount: "=?",
    hideJs: "=?",
    hideCss: "=?",
    enableRename: "=?",
  },
  controller: [
    "$scope",
    "$rootScope",
    "$routeParams",
    "ngAppSettings",
    "AppSettingsService",
    "ThemeService",
    "TemplateService",
    function (
      $scope,
      $rootScope,
      $routeParams,
      ngAppSettings,
      appSettingsService,
      themeService,
      service
    ) {
      BaseCtrl.call(
        this,
        $scope,
        $rootScope,
        $routeParams,
        ngAppSettings,
        service
      );
      var ctrl = this;
      var endpoints = JSON.parse(localStorage.getItem("ls.endpoints") || "{}");
      BaseHub.call(this, ctrl, endpoints.Messenger);
      $scope.host = `${$rootScope.globalSettings.domain}/${ctrl.host}`;
      ctrl.themeRequest = angular.copy(ngAppSettings.request);
      ctrl.request = angular.copy(ngAppSettings.request);
      ctrl.isNull = false;
      ctrl.selectPane = function (pane) {
        ctrl.activedPane = pane;
      };
      ctrl.selectTheme = () => {
        ctrl.loadTemplates();
        ctrl.createUrl = `/admin/template/create/${ctrl.theme.id}/${ctrl.folderType}`;
      };
      ctrl.selectTemplate = function () {
        ctrl.template = null;
        ctrl.templateId = null;
        setTimeout(() => {
          if (ctrl.selectedTemplate.id) {
            ctrl.template = ctrl.selectedTemplate;
            ctrl.templateId = ctrl.selectedTemplate.id;
          }
          $scope.$apply();
        }, 50);
      };
      ctrl.new = function () {
        ctrl.template.id = 0;
      };
      ctrl.init = async function () {
        await ctrl.loadTemplate();
        await ctrl.loadThemes();
        await ctrl.loadTemplates();
        ctrl.createUrl = `/admin/template/create/${ctrl.theme.id}/${ctrl.folderType}`;
        // ctrl.template = ctrl.templates.filter(
        //   (m) => m.id == ctrl.templateId
        // )[0];
        // if (!ctrl.template && ctrl.templates) {
        //   ctrl.template = ctrl.templates[0];
        //   ctrl.templateId = ctrl.template.id;
        // }
        // if (ctrl.folderType && !ctrl.folderType) {
        //   var resp = await service.getSingle([
        //     "portal",
        //     themeId,
        //     ctrl.folderType,
        //   ]);
        //   if (resp && resp.success) {
        //     resp.data.fileName = "new";
        //     ctrl.templates.splice(0, 0, resp.data);

        //     $rootScope.isBusy = false;
        //     $scope.$apply();
        //   } else {
        //     if (resp) {
        //       $rootScope.showErrors(resp.errors);
        //       $rootScope.isBusy = false;
        //       $scope.$apply();
        //     }
        //   }
        // }
      };
      ctrl.loadTemplates = async function () {
        ctrl.request.folderType = ctrl.folderType;
        ctrl.request.themeId = ctrl.theme.id;
        ctrl.request.pageSize = 1000;
        let getTemplates = await service.getList(ctrl.request);
        ctrl.templates = getTemplates.data.items;
        ctrl.templates.splice(0, 0, { id: null, fileName: "" });
        if (!ctrl.templateId && ctrl.templates.length > 1) {
          if (ctrl.defaultTemplate) {
            ctrl.template = ctrl.templates.find(
              (m) => m.fileName == ctrl.defaultTemplate
            );
            ctrl.templateId = ctrl.template.id;
            ctrl.selectedTemplate = ctrl.template;
          }
          if (!ctrl.template) {
            ctrl.template = ctrl.templates[1];
            ctrl.templateId = ctrl.templates[1].id;
            ctrl.selectedTemplate = ctrl.template;
          }
        }
        $scope.$apply();
      };
      ctrl.loadThemes = async () => {
        let getThemes = await themeService.getList(ctrl.themeRequest);
        ctrl.themes = getThemes.data.items;
        ctrl.theme = !ctrl.templateId
          ? ctrl.themes[0]
          : ctrl.themes.filter((m) => m.id == ctrl.template.mixThemeId)[0];
      };
      ctrl.loadTemplate = async () => {
        if (ctrl.templateId) {
          var resp = await service.getSingle([ctrl.templateId], {
            folderType: $scope.folderType,
          });
          if (resp && resp.success) {
            ctrl.selectedTemplate = resp.data;
            ctrl.template = resp.data;
            $rootScope.isBusy = false;
            $scope.$apply();
          } else {
            if (resp) {
              $rootScope.showErrors(resp.errors);
            }
            $rootScope.isBusy = false;
            $scope.$apply();
          }
        }
      };
    },
  ],
});

modules.component("toastHelper", {
  templateUrl:
    "/mix-app/views/app-portal/components/toast-helper/toast-helper.html",
  bindings: {
    url: "=?",
    title: "=?",
  },
  controller: [
    "$rootScope",
    function ($rootScope) {
      var ctrl = this;
      ctrl.visible = $rootScope.visible;
    },
  ],
});

modules.component("urlAlias", {
  templateUrl: "/mix-app/views/app-portal/components/url-alias/url-alias.html",
  controller: [
    "$rootScope",
    "$scope",
    "UrlAliasService",
    function ($rootScope, $scope, service) {
      var ctrl = this;
      ctrl.$onInit = function () {
        ctrl.updateUrl();
      };
      ctrl.updateUrl = function () {
        ctrl.url =
          $rootScope.globalSettings.domain +
          "/" +
          $rootScope.mixConfigurations.lang +
          "/" +
          ctrl.urlAlias.alias;
      };
      ctrl.remove = function () {
        if (ctrl.urlAlias.id > 0) {
          $rootScope.showConfirm(
            ctrl,
            "removeConfirmed",
            [ctrl.urlAlias.id],
            null,
            "Remove",
            "Deleted data will not able to recover, are you sure you want to delete this item?"
          );
        } else {
          if (ctrl.removeCallback) {
            ctrl.removeCallback({ index: ctrl.index });
          }
        }
      };

      ctrl.removeConfirmed = async function (id) {
        $rootScope.isBusy = true;
        var result = await service.delete(id);
        if (result.success) {
          if (ctrl.removeCallback) {
            ctrl.removeCallback({ index: ctrl.index });
          }
          $rootScope.isBusy = false;
          $scope.$apply();
        } else {
          $rootScope.showMessage("failed");
          $rootScope.isBusy = false;
          $scope.$apply();
        }
      };
    },
  ],
  bindings: {
    urlAlias: "=",
    index: "=",
    callback: "&",
    removeCallback: "&",
  },
});

app.factory("ConnectionManager", [
  function () {
    var serviceFactory = {};
    var _signaler,
      _connections = {},
      _iceServers = [
        { urls: "stun:ec2-54-176-1-181.us-west-1.compute.amazonaws.com:3478" },
        {
          urls: "turn:ec2-54-176-1-181.us-west-1.compute.amazonaws.com:3478",
          username: "tadhackuser",
          credential: "tadhackpw",
        },
      ], // stun.l.google.com - Firefox does not support DNS names.
      /* Callbacks */
      _onReadyForStreamCallback = function () {
        console.log("UNIMPLEMENTED: _onReadyForStreamCallback");
      },
      _onStreamAddedCallback = function () {
        console.log("UNIMPLEMENTED: _onStreamAddedCallback");
      },
      _onStreamRemovedCallback = function () {
        console.log("UNIMPLEMENTED: _onStreamRemovedCallback");
      },
      // Initialize the ConnectionManager with a signaler and callbacks to handle events
      _initialize = function (
        signaler,
        onReadyForStream,
        onStreamAdded,
        onStreamRemoved
      ) {
        _signaler = signaler;
        _onReadyForStreamCallback =
          onReadyForStream || _onReadyForStreamCallback;
        _onStreamAddedCallback = onStreamAdded || _onStreamAddedCallback;
        _onStreamRemovedCallback = onStreamRemoved || _onStreamRemovedCallback;
      },
      // Create a new WebRTC Peer Connection with the given partner
      _createConnection = function (partnerClientId) {
        console.log("WebRTC: creating connection...");

        // Create a new PeerConnection
        var connection = new RTCPeerConnection({
          iceServers: _iceServers,
          voiceActivityDetection: false,
        });

        // ICE Candidate Callback
        connection.onicecandidate = function (event) {
          if (event.candidate) {
            // Found a new candidate
            console.log("WebRTC: new ICE candidate");
            _signaler.invoke(
              "sendSignal",
              JSON.stringify({ candidate: event.candidate }),
              partnerClientId
            );
          } else {
            // Null candidate means we are done collecting candidates.
            console.log("WebRTC: ICE candidate gathering complete");
          }
        };

        // State changing
        connection.onstatechange = function () {
          // Not doing anything here, but interesting to see the state transitions
          var states = {
            iceConnectionState: connection.iceConnectionState,
            iceGatheringState: connection.iceGatheringState,
            readyState: connection.readyState,
            signalingState: connection.signalingState,
          };

          console.log(JSON.stringify(states));
        };

        // Stream handlers
        connection.onaddstream = function (event) {
          console.log("WebRTC: adding stream");
          // A stream was added, so surface it up to our UI via callback
          _onStreamAddedCallback(connection, event);
        };

        connection.onremovestream = function (event) {
          console.log("WebRTC: removing stream");
          // A stream was removed
          _onStreamRemovedCallback(connection, event.stream.id);
        };

        // Store away the connection
        _connections[partnerClientId] = connection;

        // And return it
        return connection;
      },
      // Process a newly received SDP signal
      _receivedSdpSignal = function (connection, partnerClientId, sdp) {
        console.log("WebRTC: processing sdp signal");
        connection.setRemoteDescription(
          new RTCSessionDescription(sdp),
          function () {
            if (connection.remoteDescription.type == "offer") {
              console.log("WebRTC: received offer, sending response...");
              _onReadyForStreamCallback(connection);
              connection.createAnswer(
                function (desc) {
                  connection.setLocalDescription(desc, function () {
                    _signaler.invoke(
                      "sendSignal",
                      JSON.stringify({ sdp: connection.localDescription }),
                      partnerClientId
                    );
                  });
                },
                function (error) {
                  console.log("Error creating session description: " + error);
                }
              );
            } else if (connection.remoteDescription.type == "answer") {
              console.log("WebRTC: received answer");
            }
          }
        );
      },
      // Hand off a new signal from the signaler to the connection
      _newSignal = function (partnerClientId, data) {
        var signal = JSON.parse(data),
          connection = _getConnection(partnerClientId);

        console.log("WebRTC: received signal");

        // Route signal based on type
        if (signal.sdp) {
          _receivedSdpSignal(connection, partnerClientId, signal.sdp);
        } else if (signal.candidate) {
          _receivedCandidateSignal(
            connection,
            partnerClientId,
            signal.candidate
          );
        }
      },
      // Process a newly received Candidate signal
      _receivedCandidateSignal = function (
        connection,
        partnerClientId,
        candidate
      ) {
        console.log("WebRTC: processing candidate signal");
        connection.addIceCandidate(new RTCIceCandidate(candidate));
      },
      // Retreive an existing or new connection for a given partner
      _getConnection = function (partnerClientId) {
        var connection =
          _connections[partnerClientId] || _createConnection(partnerClientId);
        return connection;
      },
      // Close all of our connections
      _closeAllConnections = function () {
        for (var connectionId in _connections) {
          _closeConnection(connectionId);
        }
      },
      // Close the connection between myself and the given partner
      _closeConnection = function (partnerClientId) {
        var connection = _connections[partnerClientId];

        if (connection) {
          // Let the user know which streams are leaving
          // todo: foreach connection.remoteStreams -> onStreamRemoved(stream.id)
          _onStreamRemovedCallback(null, null);

          // Close the connection
          connection.close();
          delete _connections[partnerClientId]; // Remove the property
        }
      },
      // Send an offer for audio/video
      _initiateOffer = function (partnerClientId, stream) {
        // Get a connection for the given partner
        var connection = _getConnection(partnerClientId);

        // Add our audio/video stream
        connection.addStream(stream);

        console.log("stream added on my end");

        // Send an offer for a connection
        connection.createOffer(
          function (desc) {
            connection.setLocalDescription(desc, function () {
              _signaler.invoke(
                "sendSignal",
                JSON.stringify({ sdp: connection.localDescription }),
                partnerClientId
              );
            });
          },
          function (error) {
            console.log("Error creating session description: " + error);
          }
        );
      };

    serviceFactory.initialize = _initialize;
    serviceFactory.newSignal = _newSignal;
    serviceFactory.closeConnection = _closeConnection;
    serviceFactory.closeAllConnections = _closeAllConnections;
    serviceFactory.initiateOffer = _initiateOffer;
    return serviceFactory;
  },
]);

modules.component("videoChatHub", {
  templateUrl: "/mix-app/views/app-portal/components/video-chat-hub/view.html",
  bindings: {
    mixDatabaseName: "=",
    isSave: "=?",
  },
  controller: [
    "$rootScope",
    "$scope",
    "VideoChatService",
    "ViewModel",
    "ConnectionManager",
    function ($rootScope, $scope, service, viewmodel, connectionManager) {
      var ctrl = this;
      BaseHub.call(this, ctrl);
      $scope.host = `${$rootScope.globalSettings.domain}/${ctrl.host}`;
      ctrl.mixConfigurations = $rootScope.globalSettings;

      ctrl.init = function () {
        ctrl.viewmodel = viewmodel;
        _start();
      };
      ctrl.toogleMute = function () {
        if (
          ctrl._mediaStream != null &&
          ctrl._mediaStream.getAudioTracks().length > 0
        ) {
          ctrl.viewmodel.muted = !ctrl.viewmodel.muted;
          ctrl._mediaStream.getAudioTracks()[0].enabled = ctrl.viewmodel.muted;
        }
      };
      ctrl.toogleVideo = function () {
        if (
          ctrl._mediaStream != null &&
          ctrl._mediaStream.getVideoTracks().length > 0
        ) {
          ctrl.viewmodel.video = !ctrl.viewmodel.video;
          ctrl._mediaStream.getVideoTracks()[0].enabled = ctrl.viewmodel.video;
        }
      };

      ctrl._mediaStream = null;

      var _hub,
        _connect = function (username, onSuccess, onFailure) {
          var hub = new signalR.HubConnectionBuilder()
            .withUrl("/webRtcHub")
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Information)
            .build();
          // Setup client SignalR operations
          _setupHubCallbacks(hub);
          hub
            .start()
            .then(function () {
              console.log(
                "connected to SignalR hub... connection id: " + hub.connectionId
              );

              // Tell the hub what our username is
              hub.invoke("Join", username);

              if (onSuccess) {
                onSuccess(hub);
              }
              //scope.$apply();
            })
            .catch(function (error) {
              console.log(`Cannot start the connection use transport.`, error);
              if (onFailure) {
                onFailure(event);
              }
              return Promise.reject(error);
            });

          _hub = hub;
        },
        _start = function () {
          // Show warning if WebRTC support is not detected
          if (ctrl.webrtcDetectedBrowser == null) {
            console.log("Your browser doesnt appear to support WebRTC.");
            $(".browser-warning").show();
          }

          // Then proceed to the next step, gathering username
          _getUsername();
        },
        _getUsername = function () {
          alertify.prompt(
            "What is your name?",
            function (e, username) {
              if (e == false || username == "") {
                username = "User " + Math.floor(Math.random() * 10000 + 1);
                alertify.success(
                  "You really need a username, so we will call you... " +
                    username
                );
              }

              // proceed to next step, get media access and start up our connection
              _startSession(username);
            },
            ""
          );
        },
        _startSession = function (username) {
          ctrl.viewmodel.Username = username; // Set the selected username in the UI
          ctrl.viewmodel.Loading = true; // Turn on the loading indicator
          $scope.$apply();
          // Ask the user for permissions to access the webcam and mic
          getUserMedia(
            {
              // Permissions to request
              video: true,
              audio: true,
            },
            function (stream) {
              // succcess callback gives us a media stream
              $(".instructions").hide();

              // Now we have everything we need for interaction, so fire up SignalR
              _connect(
                username,
                function (hub) {
                  // tell the viewmodel our conn id, so we can be treated like the special person we are.
                  ctrl.viewmodel.MyConnectionId = hub.connectionId;

                  // Initialize our client signal manager, giving it a signaler (the SignalR hub) and some callbacks
                  console.log("initializing connection manager");
                  connectionManager.initialize(
                    hub,
                    _callbacks.onReadyForStream,
                    _callbacks.onStreamAdded,
                    _callbacks.onStreamRemoved
                  );

                  // Store off the stream reference so we can share it later
                  ctrl._mediaStream = stream;
                  ctrl._mediaStream.getAudioTracks()[0].enabled = true;
                  ctrl._mediaStream.getVideoTracks()[0].enabled = false;
                  // Load the stream into a video element so it starts playing in the UI
                  //console.log('playing my local video feed');
                  var videoElement = document.querySelector(".video.mine");
                  videoElement.volume = 0;
                  setTimeout(() => {
                    videoElement.volume = 0.5;
                  }, 2000);
                  attachMediaStream(videoElement, ctrl._mediaStream);

                  // Hook up the UI
                  ctrl.viewmodel.Loading = false;
                },
                function (event) {
                  alertify.alert(
                    "<h4>Failed SignalR Connection</h4> We were not able to connect you to the signaling server.<br/><br/>Error: " +
                      JSON.stringify(event)
                  );
                  ctrl.viewmodel.Loading = false;
                }
              );
            },
            function (error) {
              // error callback
              alertify.alert(
                "<h4>Failed to get hardware access!</h4> Do you have another browser type open and using your cam/mic?<br/><br/>You were not connected to the server, because I didn't code to make browsers without media access work well. <br/><br/>Actual Error: " +
                  JSON.stringify(error)
              );
              ctrl.viewmodel.Loading = false;
            }
          );
        },
        _setupHubCallbacks = function (hub) {
          // Hub Callback: Incoming Call
          hub.on("incomingCall", (callingUser) => {
            console.log("incoming call from: " + callingUser);
            callingUser = JSON.parse(callingUser);
            // Ask if we want to talk
            alertify.confirm(
              callingUser.Username + " is calling.  Do you want to chat?",
              function (e) {
                if (e) {
                  // I want to chat
                  hub.invoke("answerCall", true, callingUser.ConnectionId);

                  // So lets go into call mode on the UI
                  ctrl.viewmodel.Mode = "incall";
                } else {
                  // Go away, I don't want to chat with you
                  hub.invoke("answerCall", false, callingUser.ConnectionId);
                }
              }
            );
          });

          // Hub Callback: Call Accepted
          hub.on("callAccepted", (acceptingUser) => {
            console.log(
              "call accepted from: " +
                acceptingUser +
                ".  Initiating WebRTC call and offering my stream up..."
            );
            acceptingUser = JSON.parse(acceptingUser);
            // Callee accepted our call, let's send them an offer with our video stream
            connectionManager.initiateOffer(
              acceptingUser.ConnectionId,
              ctrl._mediaStream
            );

            // Set UI into call mode
            ctrl.viewmodel.Mode = "incall";
          });

          // Hub Callback: Call Declined
          hub.on("callDeclined", (decliningConnectionId, reason) => {
            console.log("call declined from: " + decliningConnectionId);

            // Let the user know that the callee declined to talk
            alertify.error(reason);

            // Back to an idle UI
            ctrl.viewmodel.Mode = "idle";
          });

          // Hub Callback: Call Ended
          hub.on("callEnded", (connectionId, reason) => {
            console.log("call with " + connectionId + " has ended: " + reason);

            // Let the user know why the server says the call is over
            alertify.error(reason);

            // Close the WebRTC connection
            connectionManager.closeConnection(connectionId);

            // Set the UI back into idle mode
            ctrl.viewmodel.Mode = "idle";
          });
          // Hub Callback: Update User List
          hub.on("updateUserList", (userList) => {
            ctrl.viewmodel.Users = JSON.parse(userList);
            $scope.$apply();
          });
          // Hub Callback: WebRTC Signal Received
          hub.on("receiveSignal", (callingUser, data) => {
            callingUser = JSON.parse(callingUser);
            connectionManager.newSignal(callingUser.ConnectionId, data);
          });
        },
        // Connection Manager Callbacks
        _callbacks = {
          onReadyForStream: function (connection) {
            // The connection manager needs our stream
            // todo: not sure I like this
            connection.addStream(ctrl._mediaStream);
          },
          onStreamAdded: function (connection, event) {
            console.log("binding remote stream to the partner window");

            // Bind the remote stream to the partner window
            var otherVideo = document.querySelector(".video.partner");
            attachMediaStream(otherVideo, event.stream); // from adapter.js
          },
          onStreamRemoved: function (connection, streamId) {
            // todo: proper stream removal.  right now we are only set up for one-on-one which is why this works.
            console.log("removing remote stream from partner window");

            // Clear out the partner window
            var otherVideo = document.querySelector(".video.partner");
            otherVideo.srcObject = null;
          },
        };
      ctrl.callUser = function (targetConnectionId) {
        // Make sure we are in a state where we can make a call
        if (ctrl.viewmodel.Mode !== "idle") {
          alertify.error(
            "Sorry, you are already in a call.  Conferencing is not yet implemented."
          );
          return;
        }
        // Then make sure we aren't calling ourselves.
        if (targetConnectionId != ctrl.viewmodel.MyConnectionId) {
          // Initiate a call
          _hub.invoke("callUser", targetConnectionId);

          // UI in calling mode
          ctrl.viewmodel.Mode = "calling";
        } else {
          alertify.error("Ah, nope.  Can't call yourself.");
        }
      };
      ctrl.hangup = function () {
        // Only allow hangup if we are not idle
        if (ctrl.viewmodel.Mode != "idle") {
          _hub.invoke("hangUp");
          connectionManager.closeAllConnections();
          ctrl.viewmodel.Mode = "idle";
        }
      };
    },
  ],
});

"use strict";
app.factory("VideoChatService", [
  "ViewModel",
  "ConnectionManager",
  function (viewmodel, connectionManager) {
    var serviceFactory = {};
    var _mediaStream,
      _hub,
      _connect = function (username, onSuccess, onFailure) {
        var hub = new signalR.HubConnectionBuilder()
          .withUrl("/videoChatHub")
          .withAutomaticReconnect()
          .configureLogging(signalR.LogLevel.Information)
          .build();
        hub
          .start()
          .then(function () {
            console.log(
              "connected to SignalR hub... connection id: " + hub.connectionId
            );

            // Tell the hub what our username is
            hub.invoke("Join", username);

            if (onSuccess) {
              onSuccess(hub);
            }
            //scope.$apply();
          })
          .catch(function (error) {
            console.log(`Cannot start the connection use transport.`, error);
            if (onFailure) {
              onFailure(event);
            }
            return Promise.reject(error);
          });
        // Setup client SignalR operations
        _setupHubCallbacks(hub);
        _hub = hub;
      },
      _start = function (vm) {
        // Show warning if WebRTC support is not detected
        viewmodel = vm;
        if (webrtcDetectedBrowser == null) {
          console.log("Your browser doesnt appear to support WebRTC.");
          $(".browser-warning").show();
        }

        // Then proceed to the next step, gathering username
        _getUsername();
      },
      _getUsername = function () {
        alertify.prompt(
          "What is your name?",
          function (e, username) {
            if (e == false || username == "") {
              username = "User " + Math.floor(Math.random() * 10000 + 1);
              alertify.success(
                "You really need a username, so we will call you... " + username
              );
            }

            // proceed to next step, get media access and start up our connection
            _startSession(username);
          },
          ""
        );
      },
      _startSession = function (username) {
        viewmodel.Username = username; // Set the selected username in the UI
        viewmodel.Loading = true; // Turn on the loading indicator

        // Ask the user for permissions to access the webcam and mic
        getUserMedia(
          {
            // Permissions to request
            video: true,
            audio: false,
          },
          function (stream) {
            // succcess callback gives us a media stream
            $(".instructions").hide();

            // Now we have everything we need for interaction, so fire up SignalR
            _connect(
              username,
              function (hub) {
                // tell the viewmodel our conn id, so we can be treated like the special person we are.
                viewmodel.MyConnectionId = hub.connectionId;

                // Initialize our client signal manager, giving it a signaler (the SignalR hub) and some callbacks
                console.log("initializing connection manager");
                connectionManager.initialize(
                  hub,
                  _callbacks.onReadyForStream,
                  _callbacks.onStreamAdded,
                  _callbacks.onStreamRemoved
                );

                // Store off the stream reference so we can share it later
                _mediaStream = stream;

                // Load the stream into a video element so it starts playing in the UI
                //console.log('playing my local video feed');
                var videoElement = document.querySelector(".video.mine");
                attachMediaStream(videoElement, _mediaStream);

                // Hook up the UI

                viewmodel.Loading = false;
              },
              function (event) {
                alertify.alert(
                  "<h4>Failed SignalR Connection</h4> We were not able to connect you to the signaling server.<br/><br/>Error: " +
                    JSON.stringify(event)
                );
                viewmodel.Loading = false;
              }
            );
          },
          function (error) {
            // error callback
            alertify.alert(
              "<h4>Failed to get hardware access!</h4> Do you have another browser type open and using your cam/mic?<br/><br/>You were not connected to the server, because I didn't code to make browsers without media access work well. <br/><br/>Actual Error: " +
                JSON.stringify(error)
            );
            viewmodel.Loading = false;
          }
        );
      },
      _callUser = function (targetConnectionId) {
        // Make sure we are in a state where we can make a call
        if (viewmodel.Mode !== "idle") {
          alertify.error(
            "Sorry, you are already in a call.  Conferencing is not yet implemented."
          );
          return;
        }
        // Then make sure we aren't calling ourselves.
        if (targetConnectionId != viewmodel.MyConnectionId) {
          // Initiate a call
          _hub.server.invoke("callUser", targetConnectionId);

          // UI in calling mode
          viewmodel.Mode = "calling";
        } else {
          alertify.error("Ah, nope.  Can't call yourself.");
        }
      },
      _hangup = function () {
        // Only allow hangup if we are not idle
        if (viewmodel.Mode != "idle") {
          _hub.server.invoke("hangUp");
          connectionManager.closeAllConnections();
          viewmodel.Mode = "idle";
        }
      },
      _setupHubCallbacks = function (hub) {
        // Hub Callback: Incoming Call

        hub.on("incomingCall", (callingUser) => {
          console.log("incoming call from: " + JSON.stringify(callingUser));

          // Ask if we want to talk
          alertify.confirm(
            callingUser.Username + " is calling.  Do you want to chat?",
            function (e) {
              if (e) {
                // I want to chat
                hub.server.answerCall(true, callingUser.ConnectionId);

                // So lets go into call mode on the UI
                viewmodel.Mode = "incall";
              } else {
                // Go away, I don't want to chat with you
                hub.server.answerCall(false, callingUser.ConnectionId);
              }
            }
          );
        });

        // Hub Callback: Call Accepted
        hub.on("callAccepted", (acceptingUser) => {
          console.log(
            "call accepted from: " +
              JSON.stringify(acceptingUser) +
              ".  Initiating WebRTC call and offering my stream up..."
          );

          // Callee accepted our call, let's send them an offer with our video stream
          connectionManager.initiateOffer(
            acceptingUser.ConnectionId,
            _mediaStream
          );

          // Set UI into call mode
          viewmodel.Mode = "incall";
        });

        // Hub Callback: Call Declined
        hub.on("callDeclined", (decliningConnectionId, reason) => {
          console.log("call declined from: " + decliningConnectionId);

          // Let the user know that the callee declined to talk
          alertify.error(reason);

          // Back to an idle UI
          viewmodel.Mode = "idle";
        });

        // Hub Callback: Call Ended
        hub.on("callEnded", (connectionId, reason) => {
          console.log("call with " + connectionId + " has ended: " + reason);

          // Let the user know why the server says the call is over
          alertify.error(reason);

          // Close the WebRTC connection
          connectionManager.closeConnection(connectionId);

          // Set the UI back into idle mode
          viewmodel.Mode = "idle";
        });
        // Hub Callback: Update User List
        hub.on("updateUserList", (userList) => {
          viewmodel.setUsers(userList);
        });
        // Hub Callback: WebRTC Signal Received
        hub.on("receiveSignal", (callingUser, data) => {
          connectionManager.newSignal(callingUser.ConnectionId, data);
        });
      },
      // Connection Manager Callbacks
      _callbacks = {
        onReadyForStream: function (connection) {
          // The connection manager needs our stream
          // todo: not sure I like this
          connection.addStream(_mediaStream);
        },
        onStreamAdded: function (connection, event) {
          console.log("binding remote stream to the partner window");

          // Bind the remote stream to the partner window
          var otherVideo = document.querySelector(".video.partner");
          attachMediaStream(otherVideo, event.stream); // from adapter.js
        },
        onStreamRemoved: function (connection, streamId) {
          // todo: proper stream removal.  right now we are only set up for one-on-one which is why this works.
          console.log("removing remote stream from partner window");

          // Clear out the partner window
          var otherVideo = document.querySelector(".video.partner");
          otherVideo.src = "";
        },
      };
    // serviceFactory._connect = _connect;
    // serviceFactory._start = _start;
    // serviceFactory._getUsername = _getUsername;
    // serviceFactory._startSession = _startSession;
    // serviceFactory._attachUiHandlers = _attachUiHandlers;
    // serviceFactory._setupHubCallbacks = _setupHubCallbacks;
    // serviceFactory._callbacks = _callbacks;
    // serviceFactory._mediaStream = _mediaStream;
    // serviceFactory._hub = _hub;
    // Define more service methods here
    serviceFactory.viewmodel = viewmodel;
    serviceFactory.callUser = _callUser; // Starts the UI process
    serviceFactory.hangup = _hangup; // Starts the UI process
    serviceFactory.start = _start; // Starts the UI process
    serviceFactory.getStream = function () {
      // Temp hack for the connection manager to reach back in here for a stream
      return _mediaStream;
    };
    return serviceFactory;
  },
]);

app.factory("ViewModel", [
  "$rootScope",
  function ($rootScope) {
    var viewmodel = {
      Users: [], // List of users that are logged in and ready for connections
      Username: "not logged in.", // My username, to be reflected in UI
      MyConnectionId: "", // My connection Id, so I can tell who I am
      Mode: "idle", // UI mode ['idle', 'calling', 'incall']
      Loading: false, // Loading indicator control
      muted: "muted", // Loading indicator control
    };

    // The user that represents me
    viewmodel.Me = function () {
      return $rootScope.findObjectByKey(
        this.Users,
        "MyConnectionId",
        viewmodel.MyConnectionId
      );
    };

    // The readable status of the UI
    viewmodel.CallStatus = function () {
      var callStatus;

      if (this.Mode == "idle") {
        callStatus = "Idle";
      } else if (this.Mode == "calling") {
        callStatus = "Calling...";
      } else {
        callStatus = "In Call";
      }

      return callStatus;
    };

    // Set a new array of users.  We could simply do viewmodel.Users([array]),
    // but the mapping plugin converts all the user props to observables for us.
    viewmodel.setUsers = function (userArray) {
      viewmodel.Users = userArray;
    };

    // Retreives the css class that should be used to represent the user status.
    // I can't get this to work as just a dynamic class property for some reason.
    viewmodel.getUserStatus = function (user) {
      var css;

      if (user == viewmodel.Me()) {
        css = "icon-user";
      } else if (user.InCall()) {
        css = "icon-phone-3";
      } else {
        css = "icon-phone-4";
      }

      return css;
    };

    // Return the viewmodel so that we can change props later
    return viewmodel;
  },
]);

!(function (t) {
  var e = {};
  function i(n) {
    if (e[n]) return e[n].exports;
    var s = (e[n] = { i: n, l: !1, exports: {} });
    return t[n].call(s.exports, s, s.exports, i), (s.l = !0), s.exports;
  }
  (i.m = t),
    (i.c = e),
    (i.d = function (t, e, n) {
      i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });
    }),
    (i.r = function (t) {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(t, "__esModule", { value: !0 });
    }),
    (i.t = function (t, e) {
      if ((1 & e && (t = i(t)), 8 & e)) return t;
      if (4 & e && "object" == typeof t && t && t.__esModule) return t;
      var n = Object.create(null);
      if (
        (i.r(n),
        Object.defineProperty(n, "default", { enumerable: !0, value: t }),
        2 & e && "string" != typeof t)
      )
        for (var s in t)
          i.d(
            n,
            s,
            function (e) {
              return t[e];
            }.bind(null, s)
          );
      return n;
    }),
    (i.n = function (t) {
      var e =
        t && t.__esModule
          ? function () {
              return t.default;
            }
          : function () {
              return t;
            };
      return i.d(e, "a", e), e;
    }),
    (i.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }),
    (i.p = ""),
    i((i.s = 40));
})({
  40: function (t, e) {
    gapi.analytics.ready(function () {
      gapi.analytics.createComponent("ActiveUsers", {
        initialize: function () {
          (this.activeUsers = 0),
            gapi.analytics.auth.once("signOut", this.handleSignOut_.bind(this));
        },
        execute: function () {
          this.polling_ && this.stop(),
            this.render_(),
            gapi.analytics.auth.isAuthorized()
              ? this.pollActiveUsers_()
              : gapi.analytics.auth.once(
                  "signIn",
                  this.pollActiveUsers_.bind(this)
                );
        },
        stop: function () {
          clearTimeout(this.timeout_),
            (this.polling_ = !1),
            this.emit("stop", { activeUsers: this.activeUsers });
        },
        render_: function () {
          var t = this.get();
          (this.container =
            "string" == typeof t.container
              ? document.getElementById(t.container)
              : t.container),
            (this.container.innerHTML = t.template || this.template),
            (this.container.querySelector("b").innerHTML = this.activeUsers);
        },
        pollActiveUsers_: function () {
          var t = this.get(),
            e = 1e3 * (t.pollingInterval || 5);
          if (isNaN(e) || e < 5e3)
            throw new Error("Frequency must be 5 seconds or more.");
          (this.polling_ = !0),
            gapi.client.analytics.data.realtime
              .get({ ids: t.ids, metrics: "rt:activeUsers" })
              .then(
                function (t) {
                  var i = t.result,
                    n = i.totalResults ? +i.rows[0][0] : 0,
                    s = this.activeUsers;
                  this.emit("success", { activeUsers: this.activeUsers }),
                    n != s && ((this.activeUsers = n), this.onChange_(n - s)),
                    1 == this.polling_ &&
                      (this.timeout_ = setTimeout(
                        this.pollActiveUsers_.bind(this),
                        e
                      ));
                }.bind(this)
              );
        },
        onChange_: function (t) {
          var e = this.container.querySelector("b");
          e && (e.innerHTML = this.activeUsers),
            this.emit("change", { activeUsers: this.activeUsers, delta: t }),
            t > 0
              ? this.emit("increase", {
                  activeUsers: this.activeUsers,
                  delta: t,
                })
              : this.emit("decrease", {
                  activeUsers: this.activeUsers,
                  delta: t,
                });
        },
        handleSignOut_: function () {
          this.stop(),
            gapi.analytics.auth.once("signIn", this.handleSignIn_.bind(this));
        },
        handleSignIn_: function () {
          this.pollActiveUsers_(),
            gapi.analytics.auth.once("signOut", this.handleSignOut_.bind(this));
        },
        template:
          '<div class="ActiveUsers">Active Users: <b class="ActiveUsers-value"></b></div>',
      });
    });
  },
});
